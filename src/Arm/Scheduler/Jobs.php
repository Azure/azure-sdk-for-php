<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-03-01
 */

namespace MicrosoftAzure\Arm\Scheduler;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Jobs.
 */
class Jobs
{
    /**
     * The service client object for the operations.
     *
     * @var SchedulerManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Jobs.
     *
     * @param SchedulerManagementClient, Service client for Jobs
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Gets a job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'type' => '',
     *    'name' => '',
     *    'properties' => [
     *       'startTime' => '',
     *       'action' => [
     *          'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *          'request' => [
     *             'authentication' => [
     *                'type' => 'NotSpecified|ClientCertificate|ActiveDirectoryOAuth|Basic'
     *             ],
     *             'uri' => '',
     *             'method' => '',
     *             'body' => '',
     *             'headers' => ''
     *          ],
     *          'queueMessage' => [
     *             'storageAccount' => '',
     *             'queueName' => '',
     *             'sasToken' => '',
     *             'message' => ''
     *          ],
     *          'serviceBusQueueMessage' => [
     *             'queueName' => ''
     *          ],
     *          'serviceBusTopicMessage' => [
     *             'topicPath' => ''
     *          ],
     *          'retryPolicy' => [
     *             'retryType' => 'None|Fixed',
     *             'retryInterval' => '',
     *             'retryCount' => ''
     *          ],
     *          'errorAction' => [
     *             'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *             'request' => [
     *                'authentication' => ,
     *                'uri' => '',
     *                'method' => '',
     *                'body' => '',
     *                'headers' => ''
     *             ],
     *             'queueMessage' => [
     *                'storageAccount' => '',
     *                'queueName' => '',
     *                'sasToken' => '',
     *                'message' => ''
     *             ],
     *             'serviceBusQueueMessage' => [
     *                'queueName' => ''
     *             ],
     *             'serviceBusTopicMessage' => [
     *                'topicPath' => ''
     *             ],
     *             'retryPolicy' => [
     *                'retryType' => 'None|Fixed',
     *                'retryInterval' => '',
     *                'retryCount' => ''
     *             ]
     *          ]
     *       ],
     *       'recurrence' => [
     *          'frequency' => 'Minute|Hour|Day|Week|Month',
     *          'interval' => '',
     *          'count' => '',
     *          'endTime' => '',
     *          'schedule' => [
     *             'weekDays' => '',
     *             'hours' => '',
     *             'minutes' => '',
     *             'monthDays' => '',
     *             'monthlyOccurrences' => ''
     *          ]
     *       ],
     *       'state' => 'Enabled|Disabled|Faulted|Completed',
     *       'status' => [
     *          'executionCount' => '',
     *          'failureCount' => '',
     *          'faultedCount' => '',
     *          'lastExecutionTime' => '',
     *          'nextExecutionTime' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $jobCollectionName, $jobName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $jobCollectionName, $jobName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $jobCollectionName, $jobName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($jobCollectionName == null) {
            Validate::notNullOrEmpty($jobCollectionName, '$jobCollectionName');
        }
        if ($jobName == null) {
            Validate::notNullOrEmpty($jobName, '$jobName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{jobCollectionName}' => $jobCollectionName, '{jobName}' => $jobName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $job The job definition. 
     * <pre>
     * [
     *    'id' => '',
     *    'type' => '',
     *    'name' => '',
     *    'properties' => [
     *       'startTime' => '',
     *       'action' => [
     *          'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *          'request' => [
     *             'authentication' => [
     *                'type' => 'NotSpecified|ClientCertificate|ActiveDirectoryOAuth|Basic'
     *             ],
     *             'uri' => '',
     *             'method' => '',
     *             'body' => '',
     *             'headers' => ''
     *          ],
     *          'queueMessage' => [
     *             'storageAccount' => '',
     *             'queueName' => '',
     *             'sasToken' => '',
     *             'message' => ''
     *          ],
     *          'serviceBusQueueMessage' => [
     *             'queueName' => ''
     *          ],
     *          'serviceBusTopicMessage' => [
     *             'topicPath' => ''
     *          ],
     *          'retryPolicy' => [
     *             'retryType' => 'None|Fixed',
     *             'retryInterval' => '',
     *             'retryCount' => ''
     *          ],
     *          'errorAction' => [
     *             'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *             'request' => [
     *                'authentication' => ,
     *                'uri' => '',
     *                'method' => '',
     *                'body' => '',
     *                'headers' => ''
     *             ],
     *             'queueMessage' => [
     *                'storageAccount' => '',
     *                'queueName' => '',
     *                'sasToken' => '',
     *                'message' => ''
     *             ],
     *             'serviceBusQueueMessage' => [
     *                'queueName' => ''
     *             ],
     *             'serviceBusTopicMessage' => [
     *                'topicPath' => ''
     *             ],
     *             'retryPolicy' => [
     *                'retryType' => 'None|Fixed',
     *                'retryInterval' => '',
     *                'retryCount' => ''
     *             ]
     *          ]
     *       ],
     *       'recurrence' => [
     *          'frequency' => 'Minute|Hour|Day|Week|Month',
     *          'interval' => '',
     *          'count' => '',
     *          'endTime' => '',
     *          'schedule' => [
     *             'weekDays' => '',
     *             'hours' => '',
     *             'minutes' => '',
     *             'monthDays' => '',
     *             'monthlyOccurrences' => ''
     *          ]
     *       ],
     *       'state' => 'Enabled|Disabled|Faulted|Completed',
     *       'status' => [
     *          'executionCount' => '',
     *          'failureCount' => '',
     *          'faultedCount' => '',
     *          'lastExecutionTime' => '',
     *          'nextExecutionTime' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'type' => '',
     *    'name' => '',
     *    'properties' => [
     *       'startTime' => '',
     *       'action' => [
     *          'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *          'request' => [
     *             'authentication' => [
     *                'type' => 'NotSpecified|ClientCertificate|ActiveDirectoryOAuth|Basic'
     *             ],
     *             'uri' => '',
     *             'method' => '',
     *             'body' => '',
     *             'headers' => ''
     *          ],
     *          'queueMessage' => [
     *             'storageAccount' => '',
     *             'queueName' => '',
     *             'sasToken' => '',
     *             'message' => ''
     *          ],
     *          'serviceBusQueueMessage' => [
     *             'queueName' => ''
     *          ],
     *          'serviceBusTopicMessage' => [
     *             'topicPath' => ''
     *          ],
     *          'retryPolicy' => [
     *             'retryType' => 'None|Fixed',
     *             'retryInterval' => '',
     *             'retryCount' => ''
     *          ],
     *          'errorAction' => [
     *             'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *             'request' => [
     *                'authentication' => ,
     *                'uri' => '',
     *                'method' => '',
     *                'body' => '',
     *                'headers' => ''
     *             ],
     *             'queueMessage' => [
     *                'storageAccount' => '',
     *                'queueName' => '',
     *                'sasToken' => '',
     *                'message' => ''
     *             ],
     *             'serviceBusQueueMessage' => [
     *                'queueName' => ''
     *             ],
     *             'serviceBusTopicMessage' => [
     *                'topicPath' => ''
     *             ],
     *             'retryPolicy' => [
     *                'retryType' => 'None|Fixed',
     *                'retryInterval' => '',
     *                'retryCount' => ''
     *             ]
     *          ]
     *       ],
     *       'recurrence' => [
     *          'frequency' => 'Minute|Hour|Day|Week|Month',
     *          'interval' => '',
     *          'count' => '',
     *          'endTime' => '',
     *          'schedule' => [
     *             'weekDays' => '',
     *             'hours' => '',
     *             'minutes' => '',
     *             'monthDays' => '',
     *             'monthlyOccurrences' => ''
     *          ]
     *       ],
     *       'state' => 'Enabled|Disabled|Faulted|Completed',
     *       'status' => [
     *          'executionCount' => '',
     *          'failureCount' => '',
     *          'faultedCount' => '',
     *          'lastExecutionTime' => '',
     *          'nextExecutionTime' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'id' => '',
     *    'type' => '',
     *    'name' => '',
     *    'properties' => [
     *       'startTime' => '',
     *       'action' => [
     *          'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *          'request' => [
     *             'authentication' => [
     *                'type' => 'NotSpecified|ClientCertificate|ActiveDirectoryOAuth|Basic'
     *             ],
     *             'uri' => '',
     *             'method' => '',
     *             'body' => '',
     *             'headers' => ''
     *          ],
     *          'queueMessage' => [
     *             'storageAccount' => '',
     *             'queueName' => '',
     *             'sasToken' => '',
     *             'message' => ''
     *          ],
     *          'serviceBusQueueMessage' => [
     *             'queueName' => ''
     *          ],
     *          'serviceBusTopicMessage' => [
     *             'topicPath' => ''
     *          ],
     *          'retryPolicy' => [
     *             'retryType' => 'None|Fixed',
     *             'retryInterval' => '',
     *             'retryCount' => ''
     *          ],
     *          'errorAction' => [
     *             'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *             'request' => [
     *                'authentication' => ,
     *                'uri' => '',
     *                'method' => '',
     *                'body' => '',
     *                'headers' => ''
     *             ],
     *             'queueMessage' => [
     *                'storageAccount' => '',
     *                'queueName' => '',
     *                'sasToken' => '',
     *                'message' => ''
     *             ],
     *             'serviceBusQueueMessage' => [
     *                'queueName' => ''
     *             ],
     *             'serviceBusTopicMessage' => [
     *                'topicPath' => ''
     *             ],
     *             'retryPolicy' => [
     *                'retryType' => 'None|Fixed',
     *                'retryInterval' => '',
     *                'retryCount' => ''
     *             ]
     *          ]
     *       ],
     *       'recurrence' => [
     *          'frequency' => 'Minute|Hour|Day|Week|Month',
     *          'interval' => '',
     *          'count' => '',
     *          'endTime' => '',
     *          'schedule' => [
     *             'weekDays' => '',
     *             'hours' => '',
     *             'minutes' => '',
     *             'monthDays' => '',
     *             'monthlyOccurrences' => ''
     *          ]
     *       ],
     *       'state' => 'Enabled|Disabled|Faulted|Completed',
     *       'status' => [
     *          'executionCount' => '',
     *          'failureCount' => '',
     *          'faultedCount' => '',
     *          'lastExecutionTime' => '',
     *          'nextExecutionTime' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdate($resourceGroupName, $jobCollectionName, $jobName, array $job, array $customHeaders = [])
    {
        $response = $this->createOrUpdateAsync($resourceGroupName, $jobCollectionName, $jobName, $job, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Provisions a new job or updates an existing job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $job The job definition. 
     * <pre>
     * [
     *    'id' => '',
     *    'type' => '',
     *    'name' => '',
     *    'properties' => [
     *       'startTime' => '',
     *       'action' => [
     *          'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *          'request' => [
     *             'authentication' => [
     *                'type' => 'NotSpecified|ClientCertificate|ActiveDirectoryOAuth|Basic'
     *             ],
     *             'uri' => '',
     *             'method' => '',
     *             'body' => '',
     *             'headers' => ''
     *          ],
     *          'queueMessage' => [
     *             'storageAccount' => '',
     *             'queueName' => '',
     *             'sasToken' => '',
     *             'message' => ''
     *          ],
     *          'serviceBusQueueMessage' => [
     *             'queueName' => ''
     *          ],
     *          'serviceBusTopicMessage' => [
     *             'topicPath' => ''
     *          ],
     *          'retryPolicy' => [
     *             'retryType' => 'None|Fixed',
     *             'retryInterval' => '',
     *             'retryCount' => ''
     *          ],
     *          'errorAction' => [
     *             'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *             'request' => [
     *                'authentication' => ,
     *                'uri' => '',
     *                'method' => '',
     *                'body' => '',
     *                'headers' => ''
     *             ],
     *             'queueMessage' => [
     *                'storageAccount' => '',
     *                'queueName' => '',
     *                'sasToken' => '',
     *                'message' => ''
     *             ],
     *             'serviceBusQueueMessage' => [
     *                'queueName' => ''
     *             ],
     *             'serviceBusTopicMessage' => [
     *                'topicPath' => ''
     *             ],
     *             'retryPolicy' => [
     *                'retryType' => 'None|Fixed',
     *                'retryInterval' => '',
     *                'retryCount' => ''
     *             ]
     *          ]
     *       ],
     *       'recurrence' => [
     *          'frequency' => 'Minute|Hour|Day|Week|Month',
     *          'interval' => '',
     *          'count' => '',
     *          'endTime' => '',
     *          'schedule' => [
     *             'weekDays' => '',
     *             'hours' => '',
     *             'minutes' => '',
     *             'monthDays' => '',
     *             'monthlyOccurrences' => ''
     *          ]
     *       ],
     *       'state' => 'Enabled|Disabled|Faulted|Completed',
     *       'status' => [
     *          'executionCount' => '',
     *          'failureCount' => '',
     *          'faultedCount' => '',
     *          'lastExecutionTime' => '',
     *          'nextExecutionTime' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateAsync($resourceGroupName, $jobCollectionName, $jobName, array $job, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($jobCollectionName == null) {
            Validate::notNullOrEmpty($jobCollectionName, '$jobCollectionName');
        }
        if ($jobName == null) {
            Validate::notNullOrEmpty($jobName, '$jobName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($job == null) {
            Validate::notNullOrEmpty($job, '$job');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{jobCollectionName}' => $jobCollectionName, '{jobName}' => $jobName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($job);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Patches an existing job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $job The job definition. 
     * <pre>
     * [
     *    'id' => '',
     *    'type' => '',
     *    'name' => '',
     *    'properties' => [
     *       'startTime' => '',
     *       'action' => [
     *          'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *          'request' => [
     *             'authentication' => [
     *                'type' => 'NotSpecified|ClientCertificate|ActiveDirectoryOAuth|Basic'
     *             ],
     *             'uri' => '',
     *             'method' => '',
     *             'body' => '',
     *             'headers' => ''
     *          ],
     *          'queueMessage' => [
     *             'storageAccount' => '',
     *             'queueName' => '',
     *             'sasToken' => '',
     *             'message' => ''
     *          ],
     *          'serviceBusQueueMessage' => [
     *             'queueName' => ''
     *          ],
     *          'serviceBusTopicMessage' => [
     *             'topicPath' => ''
     *          ],
     *          'retryPolicy' => [
     *             'retryType' => 'None|Fixed',
     *             'retryInterval' => '',
     *             'retryCount' => ''
     *          ],
     *          'errorAction' => [
     *             'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *             'request' => [
     *                'authentication' => ,
     *                'uri' => '',
     *                'method' => '',
     *                'body' => '',
     *                'headers' => ''
     *             ],
     *             'queueMessage' => [
     *                'storageAccount' => '',
     *                'queueName' => '',
     *                'sasToken' => '',
     *                'message' => ''
     *             ],
     *             'serviceBusQueueMessage' => [
     *                'queueName' => ''
     *             ],
     *             'serviceBusTopicMessage' => [
     *                'topicPath' => ''
     *             ],
     *             'retryPolicy' => [
     *                'retryType' => 'None|Fixed',
     *                'retryInterval' => '',
     *                'retryCount' => ''
     *             ]
     *          ]
     *       ],
     *       'recurrence' => [
     *          'frequency' => 'Minute|Hour|Day|Week|Month',
     *          'interval' => '',
     *          'count' => '',
     *          'endTime' => '',
     *          'schedule' => [
     *             'weekDays' => '',
     *             'hours' => '',
     *             'minutes' => '',
     *             'monthDays' => '',
     *             'monthlyOccurrences' => ''
     *          ]
     *       ],
     *       'state' => 'Enabled|Disabled|Faulted|Completed',
     *       'status' => [
     *          'executionCount' => '',
     *          'failureCount' => '',
     *          'faultedCount' => '',
     *          'lastExecutionTime' => '',
     *          'nextExecutionTime' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'type' => '',
     *    'name' => '',
     *    'properties' => [
     *       'startTime' => '',
     *       'action' => [
     *          'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *          'request' => [
     *             'authentication' => [
     *                'type' => 'NotSpecified|ClientCertificate|ActiveDirectoryOAuth|Basic'
     *             ],
     *             'uri' => '',
     *             'method' => '',
     *             'body' => '',
     *             'headers' => ''
     *          ],
     *          'queueMessage' => [
     *             'storageAccount' => '',
     *             'queueName' => '',
     *             'sasToken' => '',
     *             'message' => ''
     *          ],
     *          'serviceBusQueueMessage' => [
     *             'queueName' => ''
     *          ],
     *          'serviceBusTopicMessage' => [
     *             'topicPath' => ''
     *          ],
     *          'retryPolicy' => [
     *             'retryType' => 'None|Fixed',
     *             'retryInterval' => '',
     *             'retryCount' => ''
     *          ],
     *          'errorAction' => [
     *             'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *             'request' => [
     *                'authentication' => ,
     *                'uri' => '',
     *                'method' => '',
     *                'body' => '',
     *                'headers' => ''
     *             ],
     *             'queueMessage' => [
     *                'storageAccount' => '',
     *                'queueName' => '',
     *                'sasToken' => '',
     *                'message' => ''
     *             ],
     *             'serviceBusQueueMessage' => [
     *                'queueName' => ''
     *             ],
     *             'serviceBusTopicMessage' => [
     *                'topicPath' => ''
     *             ],
     *             'retryPolicy' => [
     *                'retryType' => 'None|Fixed',
     *                'retryInterval' => '',
     *                'retryCount' => ''
     *             ]
     *          ]
     *       ],
     *       'recurrence' => [
     *          'frequency' => 'Minute|Hour|Day|Week|Month',
     *          'interval' => '',
     *          'count' => '',
     *          'endTime' => '',
     *          'schedule' => [
     *             'weekDays' => '',
     *             'hours' => '',
     *             'minutes' => '',
     *             'monthDays' => '',
     *             'monthlyOccurrences' => ''
     *          ]
     *       ],
     *       'state' => 'Enabled|Disabled|Faulted|Completed',
     *       'status' => [
     *          'executionCount' => '',
     *          'failureCount' => '',
     *          'faultedCount' => '',
     *          'lastExecutionTime' => '',
     *          'nextExecutionTime' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function patch($resourceGroupName, $jobCollectionName, $jobName, array $job, array $customHeaders = [])
    {
        $response = $this->patchAsync($resourceGroupName, $jobCollectionName, $jobName, $job, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Patches an existing job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $job The job definition. 
     * <pre>
     * [
     *    'id' => '',
     *    'type' => '',
     *    'name' => '',
     *    'properties' => [
     *       'startTime' => '',
     *       'action' => [
     *          'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *          'request' => [
     *             'authentication' => [
     *                'type' => 'NotSpecified|ClientCertificate|ActiveDirectoryOAuth|Basic'
     *             ],
     *             'uri' => '',
     *             'method' => '',
     *             'body' => '',
     *             'headers' => ''
     *          ],
     *          'queueMessage' => [
     *             'storageAccount' => '',
     *             'queueName' => '',
     *             'sasToken' => '',
     *             'message' => ''
     *          ],
     *          'serviceBusQueueMessage' => [
     *             'queueName' => ''
     *          ],
     *          'serviceBusTopicMessage' => [
     *             'topicPath' => ''
     *          ],
     *          'retryPolicy' => [
     *             'retryType' => 'None|Fixed',
     *             'retryInterval' => '',
     *             'retryCount' => ''
     *          ],
     *          'errorAction' => [
     *             'type' => 'Http|Https|StorageQueue|ServiceBusQueue|ServiceBusTopic',
     *             'request' => [
     *                'authentication' => ,
     *                'uri' => '',
     *                'method' => '',
     *                'body' => '',
     *                'headers' => ''
     *             ],
     *             'queueMessage' => [
     *                'storageAccount' => '',
     *                'queueName' => '',
     *                'sasToken' => '',
     *                'message' => ''
     *             ],
     *             'serviceBusQueueMessage' => [
     *                'queueName' => ''
     *             ],
     *             'serviceBusTopicMessage' => [
     *                'topicPath' => ''
     *             ],
     *             'retryPolicy' => [
     *                'retryType' => 'None|Fixed',
     *                'retryInterval' => '',
     *                'retryCount' => ''
     *             ]
     *          ]
     *       ],
     *       'recurrence' => [
     *          'frequency' => 'Minute|Hour|Day|Week|Month',
     *          'interval' => '',
     *          'count' => '',
     *          'endTime' => '',
     *          'schedule' => [
     *             'weekDays' => '',
     *             'hours' => '',
     *             'minutes' => '',
     *             'monthDays' => '',
     *             'monthlyOccurrences' => ''
     *          ]
     *       ],
     *       'state' => 'Enabled|Disabled|Faulted|Completed',
     *       'status' => [
     *          'executionCount' => '',
     *          'failureCount' => '',
     *          'faultedCount' => '',
     *          'lastExecutionTime' => '',
     *          'nextExecutionTime' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function patchAsync($resourceGroupName, $jobCollectionName, $jobName, array $job, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($jobCollectionName == null) {
            Validate::notNullOrEmpty($jobCollectionName, '$jobCollectionName');
        }
        if ($jobName == null) {
            Validate::notNullOrEmpty($jobName, '$jobName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($job == null) {
            Validate::notNullOrEmpty($job, '$job');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{jobCollectionName}' => $jobCollectionName, '{jobName}' => $jobName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($job);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function delete($resourceGroupName, $jobCollectionName, $jobName, array $customHeaders = [])
    {
        $response = $this->deleteAsync($resourceGroupName, $jobCollectionName, $jobName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAsync($resourceGroupName, $jobCollectionName, $jobName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($jobCollectionName == null) {
            Validate::notNullOrEmpty($jobCollectionName, '$jobCollectionName');
        }
        if ($jobName == null) {
            Validate::notNullOrEmpty($jobName, '$jobName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{jobCollectionName}' => $jobCollectionName, '{jobName}' => $jobName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Runs a job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function run($resourceGroupName, $jobCollectionName, $jobName, array $customHeaders = [])
    {
        $response = $this->runAsync($resourceGroupName, $jobCollectionName, $jobName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Runs a job.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function runAsync($resourceGroupName, $jobCollectionName, $jobName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($jobCollectionName == null) {
            Validate::notNullOrEmpty($jobCollectionName, '$jobCollectionName');
        }
        if ($jobName == null) {
            Validate::notNullOrEmpty($jobName, '$jobName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{jobCollectionName}' => $jobCollectionName, '{jobName}' => $jobName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param int $top The number of jobs to request, in the of range [1..100].
     * @param int $skip The (0-based) index of the job history list from which to
     * begin requesting entries.
     * @param array $filter The filter to apply on the job state. 
     * <pre>
     * [
     *    'state' => 'Enabled|Disabled|Faulted|Completed'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($resourceGroupName, $jobCollectionName, $top = null, $skip = null, array $filter, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($resourceGroupName, $jobCollectionName, $top, $skip, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param int $top The number of jobs to request, in the of range [1..100].
     * @param int $skip The (0-based) index of the job history list from which to
     * begin requesting entries.
     * @param array $filter The filter to apply on the job state. 
     * <pre>
     * [
     *    'state' => 'Enabled|Disabled|Faulted|Completed'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($resourceGroupName, $jobCollectionName, $top = null, $skip = null, array $filter, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($jobCollectionName == null) {
            Validate::notNullOrEmpty($jobCollectionName, '$jobCollectionName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{jobCollectionName}' => $jobCollectionName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion(), '$top' => $top, '$skip' => $skip, '$filter' => $filter];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists job history.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param int $top the number of job history to request, in the of range
     * [1..100].
     * @param int $skip The (0-based) index of the job history list from which to
     * begin requesting entries.
     * @param array $filter The filter to apply on the job state. 
     * <pre>
     * [
     *    'status' => 'Completed|Failed|Postponed'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listJobHistory($resourceGroupName, $jobCollectionName, $jobName, $top = null, $skip = null, array $filter, array $customHeaders = [])
    {
        $response = $this->listJobHistoryAsync($resourceGroupName, $jobCollectionName, $jobName, $top, $skip, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists job history.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $jobCollectionName The job collection name.
     * @param string $jobName The job name.
     * @param int $top the number of job history to request, in the of range
     * [1..100].
     * @param int $skip The (0-based) index of the job history list from which to
     * begin requesting entries.
     * @param array $filter The filter to apply on the job state. 
     * <pre>
     * [
     *    'status' => 'Completed|Failed|Postponed'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listJobHistoryAsync($resourceGroupName, $jobCollectionName, $jobName, $top = null, $skip = null, array $filter, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($jobCollectionName == null) {
            Validate::notNullOrEmpty($jobCollectionName, '$jobCollectionName');
        }
        if ($jobName == null) {
            Validate::notNullOrEmpty($jobName, '$jobName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{jobCollectionName}' => $jobCollectionName, '{jobName}' => $jobName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion(), '$top' => $top, '$skip' => $skip, '$filter' => $filter];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all jobs under the specified job collection.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists job history.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listJobHistoryNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listJobHistoryNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists job history.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listJobHistoryNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
