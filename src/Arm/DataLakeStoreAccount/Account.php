<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-10-01-preview
 */

namespace MicrosoftAzure\Arm\DataLakeStoreAccount;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Account for Creates an Azure Data Lake Store account management client.
 */
class Account
{
    /**
     * The service client object for the operations.
     *
     * @var DataLakeStoreAccountManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Account.
     *
     * @param DataLakeStoreAccountManagementClient, Service client for Account
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Deletes the specified firewall rule from the specified Data Lake Store
     * account
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account from
     * which to delete the firewall rule.
     * @param string $firewallRuleName The name of the firewall rule to delete.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function deleteFirewallRule($resourceGroupName, $accountName, $firewallRuleName, array $customHeaders = [])
    {
        $response = $this->deleteFirewallRuleAsync($resourceGroupName, $accountName, $firewallRuleName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes the specified firewall rule from the specified Data Lake Store
     * account
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account from
     * which to delete the firewall rule.
     * @param string $firewallRuleName The name of the firewall rule to delete.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteFirewallRuleAsync($resourceGroupName, $accountName, $firewallRuleName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($firewallRuleName == null) {
            Validate::notNullOrEmpty($firewallRuleName, '$firewallRuleName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}';
        $statusCodes = [200, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{firewallRuleName}' => $firewallRuleName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the specified Data Lake Store firewall rule.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account from
     * which to get the firewall rule.
     * @param string $firewallRuleName The name of the firewall rule to retrieve.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'location' => '',
     *    'properties' => [
     *       'startIpAddress' => '',
     *       'endIpAddress' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getFirewallRule($resourceGroupName, $accountName, $firewallRuleName, array $customHeaders = [])
    {
        $response = $this->getFirewallRuleAsync($resourceGroupName, $accountName, $firewallRuleName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the specified Data Lake Store firewall rule.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account from
     * which to get the firewall rule.
     * @param string $firewallRuleName The name of the firewall rule to retrieve.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getFirewallRuleAsync($resourceGroupName, $accountName, $firewallRuleName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($firewallRuleName == null) {
            Validate::notNullOrEmpty($firewallRuleName, '$firewallRuleName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{firewallRuleName}' => $firewallRuleName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the Data Lake Store firewall rules within the specified Data Lake
     * Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account from
     * which to get the firewall rules.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => '',
     *    'count' => ''
     * ];
     * </pre>
     */
    public function listFirewallRules($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->listFirewallRulesAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the Data Lake Store firewall rules within the specified Data Lake
     * Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account from
     * which to get the firewall rules.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listFirewallRulesAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates or updates the specified firewall rule.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account to which
     * to add the firewall rule.
     * @param string $name The name of the firewall rule to create or update.
     * @param array $parameters Parameters supplied to create the create firewall rule. 
     * <pre>
     * [
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'location' => '',
     *    'properties' => [
     *       'startIpAddress' => '',
     *       'endIpAddress' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'location' => '',
     *    'properties' => [
     *       'startIpAddress' => '',
     *       'endIpAddress' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateFirewallRule($resourceGroupName, $accountName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->createOrUpdateFirewallRuleAsync($resourceGroupName, $accountName, $name, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates the specified firewall rule.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account to which
     * to add the firewall rule.
     * @param string $name The name of the firewall rule to create or update.
     * @param array $parameters Parameters supplied to create the create firewall rule. 
     * <pre>
     * [
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'location' => '',
     *    'properties' => [
     *       'startIpAddress' => '',
     *       'endIpAddress' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateFirewallRuleAsync($resourceGroupName, $accountName, $name, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{name}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates the specified Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $name The name of the Data Lake Store account to create.
     * @param array $parameters Parameters supplied to create the Data Lake Store account. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     */
    public function create($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincreateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates the specified Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $name The name of the Data Lake Store account to create.
     * @param array $parameters Parameters supplied to create the Data Lake Store account. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginCreate($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCreateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates the specified Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $name The name of the Data Lake Store account to create.
     * @param array $parameters Parameters supplied to create the Data Lake Store account. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateAsync($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{name}';
        $statusCodes = [201, 200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the specified Data Lake Store account information.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $name The name of the Data Lake Store account to update.
     * @param array $parameters Parameters supplied to update the Data Lake Store account. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     */
    public function update($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginupdateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the specified Data Lake Store account information.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $name The name of the Data Lake Store account to update.
     * @param array $parameters Parameters supplied to update the Data Lake Store account. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginUpdate($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginUpdateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the specified Data Lake Store account information.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $name The name of the Data Lake Store account to update.
     * @param array $parameters Parameters supplied to update the Data Lake Store account. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginUpdateAsync($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{name}';
        $statusCodes = [200, 201];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes the specified Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account to
     * delete.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function delete($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->begindeleteAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes the specified Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account to
     * delete.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginDelete($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->beginDeleteAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes the specified Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account to
     * delete.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}';
        $statusCodes = [200, 404, 204, 202];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the specified Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account to
     * retrieve.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the specified Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account.
     * @param string $accountName The name of the Data Lake Store account to
     * retrieve.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the Data Lake Store accounts within a specific resource group. The
     * response includes a link to the next page of results, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account(s).
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count A Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => '',
     *    'count' => ''
     * ];
     * </pre>
     */
    public function listByResourceGroup($resourceGroupName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        $response = $this->listByResourceGroupAsync($resourceGroupName, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the Data Lake Store accounts within a specific resource group. The
     * response includes a link to the next page of results, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Store account(s).
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count A Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByResourceGroupAsync($resourceGroupName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, '$search' => $search, '$format' => $format, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the Data Lake Store accounts within the subscription. The response
     * includes a link to the next page of results, if any.
     *
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => '',
     *    'count' => ''
     * ];
     * </pre>
     */
    public function listOperation(array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the Data Lake Store accounts within the subscription. The response
     * includes a link to the next page of results, if any.
     *
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => '',
     *       'defaultGroup' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync(array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/accounts';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, '$search' => $search, '$format' => $format, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the Data Lake Store firewall rules within the specified Data Lake
     * Store account.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => '',
     *    'count' => ''
     * ];
     * </pre>
     */
    public function listFirewallRulesNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listFirewallRulesNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the Data Lake Store firewall rules within the specified Data Lake
     * Store account.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listFirewallRulesNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the Data Lake Store accounts within a specific resource group. The
     * response includes a link to the next page of results, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => '',
     *    'count' => ''
     * ];
     * </pre>
     */
    public function listByResourceGroupNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listByResourceGroupNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the Data Lake Store accounts within a specific resource group. The
     * response includes a link to the next page of results, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByResourceGroupNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the Data Lake Store accounts within the subscription. The response
     * includes a link to the next page of results, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => '',
     *    'count' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the Data Lake Store accounts within the subscription. The response
     * includes a link to the next page of results, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
