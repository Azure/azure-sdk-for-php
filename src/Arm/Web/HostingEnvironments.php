<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-08-01
 */

namespace MicrosoftAzure\Arm\Web;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * HostingEnvironments for Use these APIs to manage Azure Websites resources
 * through the Azure Resource Manager. All task operations conform to the
 * HTTP/1.1 protocol specification and each operation returns an
 * x-ms-request-id header that can be used to obtain information about the
 * request. You must make sure that requests made to these resources are
 * secure. For more information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class HostingEnvironments
{
    /**
     * The service client object for the operations.
     *
     * @var WebSiteManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for HostingEnvironments.
     *
     * @param WebSiteManagementClient, Service client for HostingEnvironments
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getHostingEnvironment($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service
     *  Environment) 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function createOrUpdateHostingEnvironment($resourceGroupName, $name, array $hostingEnvironmentEnvelope, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateHostingEnvironmentAsync($resourceGroupName, $name, $hostingEnvironmentEnvelope, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service
     *  Environment) 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function beginCreateOrUpdateHostingEnvironment($resourceGroupName, $name, array $hostingEnvironmentEnvelope, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateHostingEnvironmentAsync($resourceGroupName, $name, $hostingEnvironmentEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service
     *  Environment) 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateHostingEnvironmentAsync($resourceGroupName, $name, array $hostingEnvironmentEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($hostingEnvironmentEnvelope == null) {
            Validate::notNullOrEmpty($hostingEnvironmentEnvelope, '$hostingEnvironmentEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}';
        $statusCodes = [200, 202, 400, 404, 409];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($hostingEnvironmentEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param bool $forceDelete Delete even if the hostingEnvironment (App Service
     * Environment) contains resources
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * When the resposne status is Accepted(202), object
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function deleteHostingEnvironment($resourceGroupName, $name, $forceDelete = null, array $customHeaders = [])
    {
        $response = $this->begindeleteHostingEnvironmentAsync($resourceGroupName, $name, $forceDelete, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param bool $forceDelete Delete even if the hostingEnvironment (App Service
     * Environment) contains resources
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * When the resposne status is Accepted(202), object
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function beginDeleteHostingEnvironment($resourceGroupName, $name, $forceDelete = null, array $customHeaders = [])
    {
        $response = $this->beginDeleteHostingEnvironmentAsync($resourceGroupName, $name, $forceDelete, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param bool $forceDelete Delete even if the hostingEnvironment (App Service
     * Environment) contains resources
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteHostingEnvironmentAsync($resourceGroupName, $name, $forceDelete = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}';
        $statusCodes = [200, 202, 400, 404, 409];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['forceDelete' => $forceDelete, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'name' => '',
     *    'diagnosicsOutput' => ''
     * ];
     * </pre>
     * )
     */
    public function getHostingEnvironmentDiagnostics($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentDiagnosticsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentDiagnosticsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $diagnosticsName Name of the diagnostics
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'name' => '',
     *    'diagnosicsOutput' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentDiagnosticsItem($resourceGroupName, $name, $diagnosticsName, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentDiagnosticsItemAsync($resourceGroupName, $name, $diagnosticsName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $diagnosticsName Name of the diagnostics
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentDiagnosticsItemAsync($resourceGroupName, $name, $diagnosticsName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($diagnosticsName == null) {
            Validate::notNullOrEmpty($diagnosticsName, '$diagnosticsName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{diagnosticsName}' => $diagnosticsName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentCapacities($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentCapacitiesAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentCapacitiesAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'serviceIpAddress' => '',
     *    'internalIpAddress' => '',
     *    'outboundIpAddresses' => '',
     *    'vipMappings' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentVips($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentVipsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentVipsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param string $resourceGroupName Name of resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironments($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentsAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @param string $resourceGroupName Name of resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentsAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), object
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function rebootHostingEnvironment($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->rebootHostingEnvironmentAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function rebootHostingEnvironmentAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot';
        $statusCodes = [202, 400, 404, 409];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List all currently running operations on the hostingEnvironment (App
     * Service Environment)
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getHostingEnvironmentOperations($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentOperationsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List all currently running operations on the hostingEnvironment (App
     * Service Environment)
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentOperationsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $operationId operation identifier GUID
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * When the resposne status is Accepted(202), object
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status InternalServerError(500).<br>
     */
    public function getHostingEnvironmentOperation($resourceGroupName, $name, $operationId, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentOperationAsync($resourceGroupName, $name, $operationId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $operationId operation identifier GUID
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentOperationAsync($resourceGroupName, $name, $operationId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($operationId == null) {
            Validate::notNullOrEmpty($operationId, '$operationId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations/{operationId}';
        $statusCodes = [200, 202, 404, 500];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{operationId}' => $operationId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param bool $details Include instance details
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentMetrics($resourceGroupName, $name, $details = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentMetricsAsync($resourceGroupName, $name, $details, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param bool $details Include instance details
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentMetricsAsync($resourceGroupName, $name, $details = null, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metrics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['details' => $details, '$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'unit' => '',
     *       'primaryAggregationType' => '',
     *       'metricAvailabilities' => '',
     *       'displayName' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getHostingEnvironmentMetricDefinitions($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentMetricDefinitionsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentMetricDefinitionsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentUsages($resourceGroupName, $name, $filter = null, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentUsagesAsync($resourceGroupName, $name, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentUsagesAsync($resourceGroupName, $name, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $startTime Beginning time of metrics query
     * @param string $endTime End time of metrics query
     * @param string $timeGrain Time granularity of metrics query
     * @param bool $details Include instance details
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentMultiRoleMetrics($resourceGroupName, $name, $startTime = null, $endTime = null, $timeGrain = null, $details = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentMultiRoleMetricsAsync($resourceGroupName, $name, $startTime, $endTime, $timeGrain, $details, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $startTime Beginning time of metrics query
     * @param string $endTime End time of metrics query
     * @param string $timeGrain Time granularity of metrics query
     * @param bool $details Include instance details
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentMultiRoleMetricsAsync($resourceGroupName, $name, $startTime = null, $endTime = null, $timeGrain = null, $details = null, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metrics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['startTime' => $startTime, 'endTime' => $endTime, 'timeGrain' => $timeGrain, 'details' => $details, '$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param bool $details Include instance details
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentWebWorkerMetrics($resourceGroupName, $name, $workerPoolName, $details = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentWebWorkerMetricsAsync($resourceGroupName, $name, $workerPoolName, $details, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param bool $details Include instance details
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentWebWorkerMetricsAsync($resourceGroupName, $name, $workerPoolName, $details = null, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerPoolName == null) {
            Validate::notNullOrEmpty($workerPoolName, '$workerPoolName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerPoolName}' => $workerPoolName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['details' => $details, '$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentMultiRoleMetricDefinitions($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentMultiRoleMetricDefinitionsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentMultiRoleMetricDefinitionsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentWebWorkerMetricDefinitions($resourceGroupName, $name, $workerPoolName, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentWebWorkerMetricDefinitionsAsync($resourceGroupName, $name, $workerPoolName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentWebWorkerMetricDefinitionsAsync($resourceGroupName, $name, $workerPoolName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerPoolName == null) {
            Validate::notNullOrEmpty($workerPoolName, '$workerPoolName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerPoolName}' => $workerPoolName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentMultiRoleUsages($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentMultiRoleUsagesAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentMultiRoleUsagesAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentWebWorkerUsages($resourceGroupName, $name, $workerPoolName, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentWebWorkerUsagesAsync($resourceGroupName, $name, $workerPoolName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentWebWorkerUsagesAsync($resourceGroupName, $name, $workerPoolName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerPoolName == null) {
            Validate::notNullOrEmpty($workerPoolName, '$workerPoolName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerPoolName}' => $workerPoolName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $propertiesToInclude Comma separated list of site properties
     * to include
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentSites($resourceGroupName, $name, $propertiesToInclude = null, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentSitesAsync($resourceGroupName, $name, $propertiesToInclude, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $propertiesToInclude Comma separated list of site properties
     * to include
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentSitesAsync($resourceGroupName, $name, $propertiesToInclude = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['propertiesToInclude' => $propertiesToInclude, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentWebHostingPlans($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentWebHostingPlansAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentWebHostingPlansAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/webhostingplans';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getHostingEnvironmentServerFarms($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getHostingEnvironmentServerFarmsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App
     * Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getHostingEnvironmentServerFarmsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all multi role pools
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getMultiRolePools($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getMultiRolePoolsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all multi role pools
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getMultiRolePoolsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get properties of a multiRool pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getMultiRolePool($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getMultiRolePoolAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get properties of a multiRool pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getMultiRolePoolAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $multiRolePoolEnvelope Properties of multiRole pool 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function createOrUpdateMultiRolePool($resourceGroupName, $name, array $multiRolePoolEnvelope, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateMultiRolePoolAsync($resourceGroupName, $name, $multiRolePoolEnvelope, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $multiRolePoolEnvelope Properties of multiRole pool 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function beginCreateOrUpdateMultiRolePool($resourceGroupName, $name, array $multiRolePoolEnvelope, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateMultiRolePoolAsync($resourceGroupName, $name, $multiRolePoolEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a multiRole pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $multiRolePoolEnvelope Properties of multiRole pool 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateMultiRolePoolAsync($resourceGroupName, $name, array $multiRolePoolEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($multiRolePoolEnvelope == null) {
            Validate::notNullOrEmpty($multiRolePoolEnvelope, '$multiRolePoolEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default';
        $statusCodes = [200, 202, 400, 404, 409];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($multiRolePoolEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getMultiRolePoolSkus($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getMultiRolePoolSkusAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getMultiRolePoolSkusAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all worker pools
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getWorkerPools($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getWorkerPoolsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all worker pools
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getWorkerPoolsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get properties of a worker pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getWorkerPool($resourceGroupName, $name, $workerPoolName, array $customHeaders = [])
    {
        $response = $this->getWorkerPoolAsync($resourceGroupName, $name, $workerPoolName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get properties of a worker pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getWorkerPoolAsync($resourceGroupName, $name, $workerPoolName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerPoolName == null) {
            Validate::notNullOrEmpty($workerPoolName, '$workerPoolName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerPoolName}' => $workerPoolName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create or update a worker pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $workerPoolEnvelope Properties of worker pool 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function createOrUpdateWorkerPool($resourceGroupName, $name, $workerPoolName, array $workerPoolEnvelope, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateWorkerPoolAsync($resourceGroupName, $name, $workerPoolName, $workerPoolEnvelope, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a worker pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $workerPoolEnvelope Properties of worker pool 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function beginCreateOrUpdateWorkerPool($resourceGroupName, $name, $workerPoolName, array $workerPoolEnvelope, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateWorkerPoolAsync($resourceGroupName, $name, $workerPoolName, $workerPoolEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a worker pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $workerPoolEnvelope Properties of worker pool 
     * <pre>
     * [
     *    'properties' => [
     *       'workerSizeId' => '',
     *       'computeMode' => 'Shared|Dedicated|Dynamic',
     *       'workerSize' => '',
     *       'workerCount' => '',
     *       'instanceNames' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateWorkerPoolAsync($resourceGroupName, $name, $workerPoolName, array $workerPoolEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerPoolName == null) {
            Validate::notNullOrEmpty($workerPoolName, '$workerPoolName');
        }
        if ($workerPoolEnvelope == null) {
            Validate::notNullOrEmpty($workerPoolEnvelope, '$workerPoolEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}';
        $statusCodes = [200, 202, 400, 404, 409];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerPoolName}' => $workerPoolName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($workerPoolEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getWorkerPoolSkus($resourceGroupName, $name, $workerPoolName, array $customHeaders = [])
    {
        $response = $this->getWorkerPoolSkusAsync($resourceGroupName, $name, $workerPoolName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getWorkerPoolSkusAsync($resourceGroupName, $name, $workerPoolName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerPoolName == null) {
            Validate::notNullOrEmpty($workerPoolName, '$workerPoolName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerPoolName}' => $workerPoolName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get metrics for a specific instance of a worker pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param string $instance Name of instance in the worker pool
     * @param bool $details Include instance details
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getWorkerPoolInstanceMetrics($resourceGroupName, $name, $workerPoolName, $instance, $details = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->getWorkerPoolInstanceMetricsAsync($resourceGroupName, $name, $workerPoolName, $instance, $details, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get metrics for a specific instance of a worker pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param string $instance Name of instance in the worker pool
     * @param bool $details Include instance details
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getWorkerPoolInstanceMetricsAsync($resourceGroupName, $name, $workerPoolName, $instance, $details = null, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerPoolName == null) {
            Validate::notNullOrEmpty($workerPoolName, '$workerPoolName');
        }
        if ($instance == null) {
            Validate::notNullOrEmpty($instance, '$instance');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerPoolName}' => $workerPoolName, '{instance}' => $instance, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['details' => $details, '$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param string $instance Name of instance in the worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getWorkerPoolInstanceMetricDefinitions($resourceGroupName, $name, $workerPoolName, $instance, array $customHeaders = [])
    {
        $response = $this->getWorkerPoolInstanceMetricDefinitionsAsync($resourceGroupName, $name, $workerPoolName, $instance, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $workerPoolName Name of worker pool
     * @param string $instance Name of instance in the worker pool
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getWorkerPoolInstanceMetricDefinitionsAsync($resourceGroupName, $name, $workerPoolName, $instance, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerPoolName == null) {
            Validate::notNullOrEmpty($workerPoolName, '$workerPoolName');
        }
        if ($instance == null) {
            Validate::notNullOrEmpty($instance, '$instance');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerPoolName}' => $workerPoolName, '{instance}' => $instance, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $instance Name of instance in the multiRole pool
     * @param bool $details Include instance details
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getMultiRolePoolInstanceMetrics($resourceGroupName, $name, $instance, $details = null, array $customHeaders = [])
    {
        $response = $this->getMultiRolePoolInstanceMetricsAsync($resourceGroupName, $name, $instance, $details, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $instance Name of instance in the multiRole pool
     * @param bool $details Include instance details
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getMultiRolePoolInstanceMetricsAsync($resourceGroupName, $name, $instance, $details = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($instance == null) {
            Validate::notNullOrEmpty($instance, '$instance');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{instance}' => $instance, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['details' => $details, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $instance Name of instance in the multiRole pool&gt;
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getMultiRolePoolInstanceMetricDefinitions($resourceGroupName, $name, $instance, array $customHeaders = [])
    {
        $response = $this->getMultiRolePoolInstanceMetricDefinitionsAsync($resourceGroupName, $name, $instance, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param string $instance Name of instance in the multiRole pool&gt;
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getMultiRolePoolInstanceMetricDefinitionsAsync($resourceGroupName, $name, $instance, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($instance == null) {
            Validate::notNullOrEmpty($instance, '$instance');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{instance}' => $instance, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function suspendHostingEnvironment($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->beginsuspendHostingEnvironmentAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function beginSuspendHostingEnvironment($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->beginSuspendHostingEnvironmentAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginSuspendHostingEnvironmentAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function resumeHostingEnvironment($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->beginresumeHostingEnvironmentAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function beginResumeHostingEnvironment($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->beginResumeHostingEnvironmentAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of hostingEnvironment (App Service Environment)
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginResumeHostingEnvironmentAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
