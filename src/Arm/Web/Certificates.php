<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-08-01
 */

namespace MicrosoftAzure\Arm\Web;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Certificates for Use these APIs to manage Azure Websites resources through
 * the Azure Resource Manager. All task operations conform to the HTTP/1.1
 * protocol specification and each operation returns an x-ms-request-id
 * header that can be used to obtain information about the request. You must
 * make sure that requests made to these resources are secure. For more
 * information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class Certificates
{
    /**
     * The service client object for the operations.
     *
     * @var WebSiteManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Certificates.
     *
     * @param WebSiteManagementClient, Service client for Certificates
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getCertificates($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->getCertificatesAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCertificatesAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified
     * resource group.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'friendlyName' => '',
     *       'subjectName' => '',
     *       'hostNames' => '',
     *       'pfxBlob' => '',
     *       'siteName' => '',
     *       'selfLink' => '',
     *       'issuer' => '',
     *       'issueDate' => '',
     *       'expirationDate' => '',
     *       'password' => '',
     *       'thumbprint' => '',
     *       'valid' => 'false',
     *       'cerBlob' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function getCertificate($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getCertificateAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified
     * resource group.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCertificateAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates or modifies an existing certificate.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $certificateEnvelope Details of certificate if it exists already. 
     * <pre>
     * [
     *    'properties' => [
     *       'friendlyName' => '',
     *       'subjectName' => '',
     *       'hostNames' => '',
     *       'pfxBlob' => '',
     *       'siteName' => '',
     *       'selfLink' => '',
     *       'issuer' => '',
     *       'issueDate' => '',
     *       'expirationDate' => '',
     *       'password' => '',
     *       'thumbprint' => '',
     *       'valid' => 'false',
     *       'cerBlob' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'friendlyName' => '',
     *       'subjectName' => '',
     *       'hostNames' => '',
     *       'pfxBlob' => '',
     *       'siteName' => '',
     *       'selfLink' => '',
     *       'issuer' => '',
     *       'issueDate' => '',
     *       'expirationDate' => '',
     *       'password' => '',
     *       'thumbprint' => '',
     *       'valid' => 'false',
     *       'cerBlob' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateCertificate($resourceGroupName, $name, array $certificateEnvelope, array $customHeaders = [])
    {
        $response = $this->createOrUpdateCertificateAsync($resourceGroupName, $name, $certificateEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or modifies an existing certificate.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $certificateEnvelope Details of certificate if it exists already. 
     * <pre>
     * [
     *    'properties' => [
     *       'friendlyName' => '',
     *       'subjectName' => '',
     *       'hostNames' => '',
     *       'pfxBlob' => '',
     *       'siteName' => '',
     *       'selfLink' => '',
     *       'issuer' => '',
     *       'issueDate' => '',
     *       'expirationDate' => '',
     *       'password' => '',
     *       'thumbprint' => '',
     *       'valid' => 'false',
     *       'cerBlob' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateCertificateAsync($resourceGroupName, $name, array $certificateEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($certificateEnvelope == null) {
            Validate::notNullOrEmpty($certificateEnvelope, '$certificateEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($certificateEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate to be deleted.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteCertificate($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->deleteCertificateAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate to be deleted.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteCertificateAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates or modifies an existing certificate.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $certificateEnvelope Details of certificate if it exists already. 
     * <pre>
     * [
     *    'properties' => [
     *       'friendlyName' => '',
     *       'subjectName' => '',
     *       'hostNames' => '',
     *       'pfxBlob' => '',
     *       'siteName' => '',
     *       'selfLink' => '',
     *       'issuer' => '',
     *       'issueDate' => '',
     *       'expirationDate' => '',
     *       'password' => '',
     *       'thumbprint' => '',
     *       'valid' => 'false',
     *       'cerBlob' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'friendlyName' => '',
     *       'subjectName' => '',
     *       'hostNames' => '',
     *       'pfxBlob' => '',
     *       'siteName' => '',
     *       'selfLink' => '',
     *       'issuer' => '',
     *       'issueDate' => '',
     *       'expirationDate' => '',
     *       'password' => '',
     *       'thumbprint' => '',
     *       'valid' => 'false',
     *       'cerBlob' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function updateCertificate($resourceGroupName, $name, array $certificateEnvelope, array $customHeaders = [])
    {
        $response = $this->updateCertificateAsync($resourceGroupName, $name, $certificateEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or modifies an existing certificate.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $certificateEnvelope Details of certificate if it exists already. 
     * <pre>
     * [
     *    'properties' => [
     *       'friendlyName' => '',
     *       'subjectName' => '',
     *       'hostNames' => '',
     *       'pfxBlob' => '',
     *       'siteName' => '',
     *       'selfLink' => '',
     *       'issuer' => '',
     *       'issueDate' => '',
     *       'expirationDate' => '',
     *       'password' => '',
     *       'thumbprint' => '',
     *       'valid' => 'false',
     *       'cerBlob' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateCertificateAsync($resourceGroupName, $name, array $certificateEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($certificateEnvelope == null) {
            Validate::notNullOrEmpty($certificateEnvelope, '$certificateEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($certificateEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified
     * resource group
     *
     * @param string $resourceGroupName Name of the resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'distinguishedName' => '',
     *       'csrString' => '',
     *       'pfxBlob' => '',
     *       'password' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * )
     */
    public function getCsrs($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->getCsrsAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified
     * resource group
     *
     * @param string $resourceGroupName Name of the resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCsrsAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription
     * in the specified resource group
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'distinguishedName' => '',
     *       'csrString' => '',
     *       'pfxBlob' => '',
     *       'password' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getCsr($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getCsrAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription
     * in the specified resource group
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCsrAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates or modifies an existing certificate signing request.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $csrEnvelope Details of certificate signing request if it exists already. 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'distinguishedName' => '',
     *       'csrString' => '',
     *       'pfxBlob' => '',
     *       'password' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'distinguishedName' => '',
     *       'csrString' => '',
     *       'pfxBlob' => '',
     *       'password' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateCsr($resourceGroupName, $name, array $csrEnvelope, array $customHeaders = [])
    {
        $response = $this->createOrUpdateCsrAsync($resourceGroupName, $name, $csrEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or modifies an existing certificate signing request.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $csrEnvelope Details of certificate signing request if it exists already. 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'distinguishedName' => '',
     *       'csrString' => '',
     *       'pfxBlob' => '',
     *       'password' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateCsrAsync($resourceGroupName, $name, array $csrEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($csrEnvelope == null) {
            Validate::notNullOrEmpty($csrEnvelope, '$csrEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($csrEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete the certificate signing request.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate signing request.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteCsr($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->deleteCsrAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete the certificate signing request.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate signing request.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteCsrAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates or modifies an existing certificate signing request.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $csrEnvelope Details of certificate signing request if it exists already. 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'distinguishedName' => '',
     *       'csrString' => '',
     *       'pfxBlob' => '',
     *       'password' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'distinguishedName' => '',
     *       'csrString' => '',
     *       'pfxBlob' => '',
     *       'password' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateCsr($resourceGroupName, $name, array $csrEnvelope, array $customHeaders = [])
    {
        $response = $this->updateCsrAsync($resourceGroupName, $name, $csrEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or modifies an existing certificate signing request.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the certificate.
     * @param array $csrEnvelope Details of certificate signing request if it exists already. 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'distinguishedName' => '',
     *       'csrString' => '',
     *       'pfxBlob' => '',
     *       'password' => '',
     *       'publicKeyHash' => '',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateCsrAsync($resourceGroupName, $name, array $csrEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($csrEnvelope == null) {
            Validate::notNullOrEmpty($csrEnvelope, '$csrEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($csrEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
