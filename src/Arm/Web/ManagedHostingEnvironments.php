<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-08-01
 */

namespace MicrosoftAzure\Arm\Web;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * ManagedHostingEnvironments for Use these APIs to manage Azure Websites
 * resources through the Azure Resource Manager. All task operations conform
 * to the HTTP/1.1 protocol specification and each operation returns an
 * x-ms-request-id header that can be used to obtain information about the
 * request. You must make sure that requests made to these resources are
 * secure. For more information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class ManagedHostingEnvironments
{
    /**
     * The service client object for the operations.
     *
     * @var WebSiteManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for ManagedHostingEnvironments.
     *
     * @param WebSiteManagementClient, Service client for ManagedHostingEnvironments
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Get properties of a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'status' => 'Preparing|Ready|Deleting',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'ipsslAddressCount' => '',
     *       'dnsSuffix' => '',
     *       'subscriptionId' => '',
     *       'resourceGroup' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'suspended' => 'false',
     *       'apiManagementAccount' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getManagedHostingEnvironment($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getManagedHostingEnvironmentAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get properties of a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getManagedHostingEnvironmentAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $managedHostingEnvironmentEnvelope Properties of managed hosting environment 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function createOrUpdateManagedHostingEnvironment($resourceGroupName, $name, array $managedHostingEnvironmentEnvelope, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateManagedHostingEnvironmentAsync($resourceGroupName, $name, $managedHostingEnvironmentEnvelope, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $managedHostingEnvironmentEnvelope Properties of managed hosting environment 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function beginCreateOrUpdateManagedHostingEnvironment($resourceGroupName, $name, array $managedHostingEnvironmentEnvelope, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateManagedHostingEnvironmentAsync($resourceGroupName, $name, $managedHostingEnvironmentEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $managedHostingEnvironmentEnvelope Properties of managed hosting environment 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'location' => '',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' => 'Preparing|Ready|Scaling|Deleting',
     *       'vnetName' => '',
     *       'vnetResourceGroupName' => '',
     *       'vnetSubnetName' => '',
     *       'virtualNetwork' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => '',
     *          'subnet' => ''
     *       ],
     *       'internalLoadBalancingMode' => 'None|Web|Publishing',
     *       'multiSize' => '',
     *       'multiRoleCount' => '',
     *       'workerPools' => '',
     *       'ipsslAddressCount' => '',
     *       'databaseEdition' => '',
     *       'databaseServiceObjective' => '',
     *       'upgradeDomains' => '',
     *       'subscriptionId' => '',
     *       'dnsSuffix' => '',
     *       'lastAction' => '',
     *       'lastActionResult' => '',
     *       'allowedMultiSizes' => '',
     *       'allowedWorkerSizes' => '',
     *       'maximumNumberOfMachines' => '',
     *       'vipMappings' => '',
     *       'environmentCapacities' => '',
     *       'networkAccessControlList' => '',
     *       'environmentIsHealthy' => 'false',
     *       'environmentStatus' => '',
     *       'resourceGroup' => '',
     *       'apiManagementAccountId' => '',
     *       'suspended' => 'false',
     *       'clusterSettings' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateManagedHostingEnvironmentAsync($resourceGroupName, $name, array $managedHostingEnvironmentEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($managedHostingEnvironmentEnvelope == null) {
            Validate::notNullOrEmpty($managedHostingEnvironmentEnvelope, '$managedHostingEnvironmentEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}';
        $statusCodes = [202, 400, 404, 409];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($managedHostingEnvironmentEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param bool $forceDelete Delete even if the managed hosting environment
     * contains resources
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), object
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function deleteManagedHostingEnvironment($resourceGroupName, $name, $forceDelete = null, array $customHeaders = [])
    {
        $response = $this->begindeleteManagedHostingEnvironmentAsync($resourceGroupName, $name, $forceDelete, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param bool $forceDelete Delete even if the managed hosting environment
     * contains resources
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), object
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status Conflict(409).<br>
     */
    public function beginDeleteManagedHostingEnvironment($resourceGroupName, $name, $forceDelete = null, array $customHeaders = [])
    {
        $response = $this->beginDeleteManagedHostingEnvironmentAsync($resourceGroupName, $name, $forceDelete, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param bool $forceDelete Delete even if the managed hosting environment
     * contains resources
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteManagedHostingEnvironmentAsync($resourceGroupName, $name, $forceDelete = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}';
        $statusCodes = [202, 400, 404, 409];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['forceDelete' => $forceDelete, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param string $resourceGroupName Name of resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getManagedHostingEnvironments($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->getManagedHostingEnvironmentsAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @param string $resourceGroupName Name of resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getManagedHostingEnvironmentsAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'serviceIpAddress' => '',
     *    'internalIpAddress' => '',
     *    'outboundIpAddresses' => '',
     *    'vipMappings' => ''
     * ];
     * </pre>
     */
    public function getManagedHostingEnvironmentVips($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getManagedHostingEnvironmentVipsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getManagedHostingEnvironmentVipsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/capacities/virtualip';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param string $operationId operation identifier GUID
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * When the resposne status is Accepted(202), object
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status InternalServerError(500).<br>
     */
    public function getManagedHostingEnvironmentOperation($resourceGroupName, $name, $operationId, array $customHeaders = [])
    {
        $response = $this->getManagedHostingEnvironmentOperationAsync($resourceGroupName, $name, $operationId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param string $operationId operation identifier GUID
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getManagedHostingEnvironmentOperationAsync($resourceGroupName, $name, $operationId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($operationId == null) {
            Validate::notNullOrEmpty($operationId, '$operationId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/operations/{operationId}';
        $statusCodes = [200, 202, 404, 500];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{operationId}' => $operationId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param string $propertiesToInclude Comma separated list of site properties
     * to include
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getManagedHostingEnvironmentSites($resourceGroupName, $name, $propertiesToInclude = null, array $customHeaders = [])
    {
        $response = $this->getManagedHostingEnvironmentSitesAsync($resourceGroupName, $name, $propertiesToInclude, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param string $propertiesToInclude Comma separated list of site properties
     * to include
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getManagedHostingEnvironmentSitesAsync($resourceGroupName, $name, $propertiesToInclude = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/sites';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['propertiesToInclude' => $propertiesToInclude, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getManagedHostingEnvironmentWebHostingPlans($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getManagedHostingEnvironmentWebHostingPlansAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getManagedHostingEnvironmentWebHostingPlansAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/webhostingplans';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getManagedHostingEnvironmentServerFarms($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getManagedHostingEnvironmentServerFarmsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of managed hosting environment
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getManagedHostingEnvironmentServerFarmsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/serverfarms';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
