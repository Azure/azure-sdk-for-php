<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-08-01
 */

namespace MicrosoftAzure\Arm\Web;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * ServerFarms for Use these APIs to manage Azure Websites resources through
 * the Azure Resource Manager. All task operations conform to the HTTP/1.1
 * protocol specification and each operation returns an x-ms-request-id
 * header that can be used to obtain information about the request. You must
 * make sure that requests made to these resources are secure. For more
 * information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class ServerFarms
{
    /**
     * The service client object for the operations.
     *
     * @var WebSiteManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for ServerFarms.
     *
     * @param WebSiteManagementClient, Service client for ServerFarms
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Gets collection of App Service Plans in a resource group for a given
     * subscription.
     *
     * @param string $resourceGroupName Name of resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getServerFarms($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->getServerFarmsAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets collection of App Service Plans in a resource group for a given
     * subscription.
     *
     * @param string $resourceGroupName Name of resource group
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getServerFarmsAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets specified App Service Plan in a resource group
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getServerFarm($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getServerFarmAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets specified App Service Plan in a resource group
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getServerFarmAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates or updates an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $serverFarmEnvelope Details of App Service Plan 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param bool $allowPendingState OBSOLETE: If true, allow pending state for
     * App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateServerFarm($resourceGroupName, $name, array $serverFarmEnvelope, $allowPendingState = null, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateServerFarmAsync($resourceGroupName, $name, $serverFarmEnvelope, $allowPendingState, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $serverFarmEnvelope Details of App Service Plan 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param bool $allowPendingState OBSOLETE: If true, allow pending state for
     * App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginCreateOrUpdateServerFarm($resourceGroupName, $name, array $serverFarmEnvelope, $allowPendingState = null, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateServerFarmAsync($resourceGroupName, $name, $serverFarmEnvelope, $allowPendingState, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $serverFarmEnvelope Details of App Service Plan 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param bool $allowPendingState OBSOLETE: If true, allow pending state for
     * App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateServerFarmAsync($resourceGroupName, $name, array $serverFarmEnvelope, $allowPendingState = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($serverFarmEnvelope == null) {
            Validate::notNullOrEmpty($serverFarmEnvelope, '$serverFarmEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}';
        $statusCodes = [200, 202];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['allowPendingState' => $allowPendingState, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($serverFarmEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteServerFarm($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->deleteServerFarmAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteServerFarmAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Queries for App Serice Plan metrics
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param bool $details If true, metrics are broken down per App Service Plan
     * instance
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getServerFarmMetrics($resourceGroupName, $name, $details = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->getServerFarmMetricsAsync($resourceGroupName, $name, $details, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Queries for App Serice Plan metrics
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param bool $details If true, metrics are broken down per App Service Plan
     * instance
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getServerFarmMetricsAsync($resourceGroupName, $name, $details = null, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['details' => $details, '$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List of metrics that can be queried for an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getServerFarmMetricDefintions($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getServerFarmMetricDefintionsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List of metrics that can be queried for an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getServerFarmMetricDefintionsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets list of vnets associated with App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * )
     */
    public function getVnetsForServerFarm($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getVnetsForServerFarmAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets list of vnets associated with App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getVnetsForServerFarmAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a vnet associated with an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function getVnetFromServerFarm($resourceGroupName, $name, $vnetName, array $customHeaders = [])
    {
        $response = $this->getVnetFromServerFarmAsync($resourceGroupName, $name, $vnetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a vnet associated with an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getVnetFromServerFarmAsync($resourceGroupName, $name, $vnetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200, 404];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'startAddress' => '',
     *       'endAddress' => '',
     *       'routeType' => ''
     *    ]
     * ];
     * </pre>
     * )
     */
    public function getRoutesForVnet($resourceGroupName, $name, $vnetName, array $customHeaders = [])
    {
        $response = $this->getRoutesForVnetAsync($resourceGroupName, $name, $vnetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getRoutesForVnetAsync($resourceGroupName, $name, $vnetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a specific route associated with a vnet, in an app service plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param string $routeName Name of the virtual network route
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'startAddress' => '',
     *       'endAddress' => '',
     *       'routeType' => ''
     *    ]
     * ];
     * </pre>
     * )
     * Empty array with resposne status NotFound(404).<br>
     */
    public function getRouteForVnet($resourceGroupName, $name, $vnetName, $routeName, array $customHeaders = [])
    {
        $response = $this->getRouteForVnetAsync($resourceGroupName, $name, $vnetName, $routeName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a specific route associated with a vnet, in an app service plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param string $routeName Name of the virtual network route
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getRouteForVnetAsync($resourceGroupName, $name, $vnetName, $routeName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($routeName == null) {
            Validate::notNullOrEmpty($routeName, '$routeName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}';
        $statusCodes = [200, 404];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{routeName}' => $routeName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app
     * service plan.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param string $routeName Name of the virtual network route
     * @param array $route The route object 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'startAddress' => '',
     *       'endAddress' => '',
     *       'routeType' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'startAddress' => '',
     *       'endAddress' => '',
     *       'routeType' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function createOrUpdateVnetRoute($resourceGroupName, $name, $vnetName, $routeName, array $route, array $customHeaders = [])
    {
        $response = $this->createOrUpdateVnetRouteAsync($resourceGroupName, $name, $vnetName, $routeName, $route, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app
     * service plan.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param string $routeName Name of the virtual network route
     * @param array $route The route object 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'startAddress' => '',
     *       'endAddress' => '',
     *       'routeType' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateVnetRouteAsync($resourceGroupName, $name, $vnetName, $routeName, array $route, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($routeName == null) {
            Validate::notNullOrEmpty($routeName, '$routeName');
        }
        if ($route == null) {
            Validate::notNullOrEmpty($route, '$route');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}';
        $statusCodes = [200, 400, 404];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{routeName}' => $routeName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($route);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes an existing route for a vnet in an app service plan.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param string $routeName Name of the virtual network route
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * Empty array with resposne status NotFound(404).<br>
     */
    public function deleteVnetRoute($resourceGroupName, $name, $vnetName, $routeName, array $customHeaders = [])
    {
        $response = $this->deleteVnetRouteAsync($resourceGroupName, $name, $vnetName, $routeName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes an existing route for a vnet in an app service plan.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param string $routeName Name of the virtual network route
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteVnetRouteAsync($resourceGroupName, $name, $vnetName, $routeName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($routeName == null) {
            Validate::notNullOrEmpty($routeName, '$routeName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}';
        $statusCodes = [200, 404];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{routeName}' => $routeName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app
     * service plan.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param string $routeName Name of the virtual network route
     * @param array $route The route object 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'startAddress' => '',
     *       'endAddress' => '',
     *       'routeType' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'startAddress' => '',
     *       'endAddress' => '',
     *       'routeType' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status BadRequest(400).<br>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function updateVnetRoute($resourceGroupName, $name, $vnetName, $routeName, array $route, array $customHeaders = [])
    {
        $response = $this->updateVnetRouteAsync($resourceGroupName, $name, $vnetName, $routeName, $route, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app
     * service plan.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $vnetName Name of virtual network
     * @param string $routeName Name of the virtual network route
     * @param array $route The route object 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'startAddress' => '',
     *       'endAddress' => '',
     *       'routeType' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateVnetRouteAsync($resourceGroupName, $name, $vnetName, $routeName, array $route, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($routeName == null) {
            Validate::notNullOrEmpty($routeName, '$routeName');
        }
        if ($route == null) {
            Validate::notNullOrEmpty($route, '$route');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}';
        $statusCodes = [200, 400, 404];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{routeName}' => $routeName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($route);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the vnet gateway.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of the App Service Plan
     * @param string $vnetName Name of the virtual network
     * @param string $gatewayName Name of the gateway. Only the 'primary' gateway
     * is supported.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getServerFarmVnetGateway($resourceGroupName, $name, $vnetName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->getServerFarmVnetGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the vnet gateway.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of the App Service Plan
     * @param string $vnetName Name of the virtual network
     * @param string $gatewayName Name of the gateway. Only the 'primary' gateway
     * is supported.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getServerFarmVnetGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{gatewayName}' => $gatewayName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the vnet gateway
     *
     * @param string $resourceGroupName The resource group
     * @param string $name The name of the App Service Plan
     * @param string $vnetName The name of the virtual network
     * @param string $gatewayName The name of the gateway. Only 'primary' is
     * supported.
     * @param array $connectionEnvelope The gateway entity. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateServerFarmVnetGateway($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, array $customHeaders = [])
    {
        $response = $this->updateServerFarmVnetGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, $connectionEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the vnet gateway
     *
     * @param string $resourceGroupName The resource group
     * @param string $name The name of the App Service Plan
     * @param string $vnetName The name of the virtual network
     * @param string $gatewayName The name of the gateway. Only 'primary' is
     * supported.
     * @param array $connectionEnvelope The gateway entity. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateServerFarmVnetGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{gatewayName}' => $gatewayName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets list of Apps associated with an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $skipToken Skip to of web apps in a list. If specified, the
     * resulting list will contain web apps starting from (including) the
     * skipToken. Else, the resulting list contains web apps from the start of
     * the list
     * @param string $filter Supported filter: $filter=state eq running. Returns
     * only web apps that are currently running
     * @param string $top List page size. If specified, results are paged.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getServerFarmSites($resourceGroupName, $name, $skipToken = null, $filter = null, $top = null, array $customHeaders = [])
    {
        $response = $this->getServerFarmSitesAsync($resourceGroupName, $name, $skipToken, $filter, $top, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets list of Apps associated with an App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param string $skipToken Skip to of web apps in a list. If specified, the
     * resulting list will contain web apps starting from (including) the
     * skipToken. Else, the resulting list contains web apps from the start of
     * the list
     * @param string $filter Supported filter: $filter=state eq running. Returns
     * only web apps that are currently running
     * @param string $top List page size. If specified, results are paged.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getServerFarmSitesAsync($resourceGroupName, $name, $skipToken = null, $filter = null, $top = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$skipToken' => $skipToken, '$filter' => $filter, '$top' => $top, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Submit a reboot request for a worker machine in the specified server farm
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of server farm
     * @param string $workerName Name of worker machine, typically starts with RD
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function rebootWorkerForServerFarm($resourceGroupName, $name, $workerName, array $customHeaders = [])
    {
        $response = $this->rebootWorkerForServerFarmAsync($resourceGroupName, $name, $workerName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Submit a reboot request for a worker machine in the specified server farm
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of server farm
     * @param string $workerName Name of worker machine, typically starts with RD
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function rebootWorkerForServerFarmAsync($resourceGroupName, $name, $workerName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($workerName == null) {
            Validate::notNullOrEmpty($workerName, '$workerName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{workerName}' => $workerName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Restarts web apps in a specified App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param bool $softRestart Soft restart applies the configuration settings
     * and restarts the apps if necessary. Hard restart always restarts and
     * reprovisions the apps
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function restartSitesForServerFarm($resourceGroupName, $name, $softRestart = null, array $customHeaders = [])
    {
        $response = $this->restartSitesForServerFarmAsync($resourceGroupName, $name, $softRestart, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Restarts web apps in a specified App Service Plan
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of App Service Plan
     * @param bool $softRestart Soft restart applies the configuration settings
     * and restarts the apps if necessary. Hard restart always restarts and
     * reprovisions the apps
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function restartSitesForServerFarmAsync($resourceGroupName, $name, $softRestart = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['softRestart' => $softRestart, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a server farm operation
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of server farm
     * @param string $operationId Id of Server farm operation"&gt;
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'workerTierName' => '',
     *       'status' => 'Ready|Pending',
     *       'subscription' => '',
     *       'adminSiteName' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'maximumNumberOfWorkers' => '',
     *       'geoRegion' => '',
     *       'perSiteScaling' => 'false',
     *       'numberOfSites' => '',
     *       'resourceGroup' => ''
     *    ],
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getServerFarmOperation($resourceGroupName, $name, $operationId, array $customHeaders = [])
    {
        $response = $this->getServerFarmOperationAsync($resourceGroupName, $name, $operationId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a server farm operation
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of server farm
     * @param string $operationId Id of Server farm operation"&gt;
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getServerFarmOperationAsync($resourceGroupName, $name, $operationId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($operationId == null) {
            Validate::notNullOrEmpty($operationId, '$operationId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/operationresults/{operationId}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{operationId}' => $operationId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets list of Apps associated with an App Service Plan
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getServerFarmSitesNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->getServerFarmSitesNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets list of Apps associated with an App Service Plan
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getServerFarmSitesNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
