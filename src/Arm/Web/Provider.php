<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-08-01
 */

namespace MicrosoftAzure\Arm\Web;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Provider for Use these APIs to manage Azure Websites resources through the
 * Azure Resource Manager. All task operations conform to the HTTP/1.1
 * protocol specification and each operation returns an x-ms-request-id
 * header that can be used to obtain information about the request. You must
 * make sure that requests made to these resources are secure. For more
 * information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class Provider
{
    /**
     * The service client object for the operations.
     *
     * @var WebSiteManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Provider.
     *
     * @param WebSiteManagementClient, Service client for Provider
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Gets the source controls available for Azure websites
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSourceControls(array $customHeaders = [])
    {
        $response = $this->getSourceControlsAsync($customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the source controls available for Azure websites
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSourceControlsAsync(array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/providers/Microsoft.Web/sourcecontrols';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets source control token
     *
     * @param string $sourceControlType Type of source control
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'token' => '',
     *       'tokenSecret' => '',
     *       'refreshToken' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSourceControl($sourceControlType, array $customHeaders = [])
    {
        $response = $this->getSourceControlAsync($sourceControlType, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets source control token
     *
     * @param string $sourceControlType Type of source control
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSourceControlAsync($sourceControlType, array $customHeaders = [])
    {
        if ($sourceControlType == null) {
            Validate::notNullOrEmpty($sourceControlType, '$sourceControlType');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/providers/Microsoft.Web/sourcecontrols/{sourceControlType}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{sourceControlType}' => $sourceControlType]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates source control token
     *
     * @param string $sourceControlType Type of source control
     * @param array $requestMessage Source control token information 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'token' => '',
     *       'tokenSecret' => '',
     *       'refreshToken' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'token' => '',
     *       'tokenSecret' => '',
     *       'refreshToken' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSourceControl($sourceControlType, array $requestMessage, array $customHeaders = [])
    {
        $response = $this->updateSourceControlAsync($sourceControlType, $requestMessage, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates source control token
     *
     * @param string $sourceControlType Type of source control
     * @param array $requestMessage Source control token information 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'token' => '',
     *       'tokenSecret' => '',
     *       'refreshToken' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSourceControlAsync($sourceControlType, array $requestMessage, array $customHeaders = [])
    {
        if ($sourceControlType == null) {
            Validate::notNullOrEmpty($sourceControlType, '$sourceControlType');
        }
        if ($requestMessage == null) {
            Validate::notNullOrEmpty($requestMessage, '$requestMessage');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/providers/Microsoft.Web/sourcecontrols/{sourceControlType}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{sourceControlType}' => $sourceControlType]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($requestMessage);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets publishing user
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'publishingUserName' => '',
     *       'publishingPassword' => '',
     *       'scmUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getPublishingUser(array $customHeaders = [])
    {
        $response = $this->getPublishingUserAsync($customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets publishing user
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getPublishingUserAsync(array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/providers/Microsoft.Web/publishingUsers/web';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates publishing user
     *
     * @param array $requestMessage Details of publishing user 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'publishingUserName' => '',
     *       'publishingPassword' => '',
     *       'scmUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'publishingUserName' => '',
     *       'publishingPassword' => '',
     *       'scmUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updatePublishingUser(array $requestMessage, array $customHeaders = [])
    {
        $response = $this->updatePublishingUserAsync($requestMessage, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates publishing user
     *
     * @param array $requestMessage Details of publishing user 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'publishingUserName' => '',
     *       'publishingPassword' => '',
     *       'scmUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updatePublishingUserAsync(array $requestMessage, array $customHeaders = [])
    {
        if ($requestMessage == null) {
            Validate::notNullOrEmpty($requestMessage, '$requestMessage');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/providers/Microsoft.Web/publishingUsers/web';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, []);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($requestMessage);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
