<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-08-01
 */

namespace MicrosoftAzure\Arm\Web;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Sites for Use these APIs to manage Azure Websites resources through the
 * Azure Resource Manager. All task operations conform to the HTTP/1.1
 * protocol specification and each operation returns an x-ms-request-id
 * header that can be used to obtain information about the request. You must
 * make sure that requests made to these resources are secure. For more
 * information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class Sites
{
    /**
     * The service client object for the operations.
     *
     * @var WebSiteManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Sites.
     *
     * @param WebSiteManagementClient, Service client for Sites
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web
     * app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteVNETConnectionSlot($resourceGroupName, $name, $vnetName, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteVNETConnectionSlotAsync($resourceGroupName, $name, $vnetName, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web
     * app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteVNETConnectionSlotAsync($resourceGroupName, $name, $vnetName, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $connectionEnvelope The properties of this Virtual Network Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteVNETConnectionSlot($resourceGroupName, $name, $vnetName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteVNETConnectionSlotAsync($resourceGroupName, $name, $vnetName, $connectionEnvelope, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $connectionEnvelope The properties of this Virtual Network Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteVNETConnectionSlotAsync($resourceGroupName, $name, $vnetName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Removes the specified Virtual Network Connection association from this web
     * app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteVNETConnectionSlot($resourceGroupName, $name, $vnetName, $slot, array $customHeaders = [])
    {
        $response = $this->deleteSiteVNETConnectionSlotAsync($resourceGroupName, $name, $vnetName, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Removes the specified Virtual Network Connection association from this web
     * app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteVNETConnectionSlotAsync($resourceGroupName, $name, $vnetName, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $connectionEnvelope The properties of this Virtual Network Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteVNETConnectionSlot($resourceGroupName, $name, $vnetName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteVNETConnectionSlotAsync($resourceGroupName, $name, $vnetName, $connectionEnvelope, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $connectionEnvelope The properties of this Virtual Network Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteVNETConnectionSlotAsync($resourceGroupName, $name, $vnetName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web
     * app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteVNETConnection($resourceGroupName, $name, $vnetName, array $customHeaders = [])
    {
        $response = $this->getSiteVNETConnectionAsync($resourceGroupName, $name, $vnetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web
     * app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteVNETConnectionAsync($resourceGroupName, $name, $vnetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $connectionEnvelope The properties of this Virtual Network Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteVNETConnection($resourceGroupName, $name, $vnetName, array $connectionEnvelope, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteVNETConnectionAsync($resourceGroupName, $name, $vnetName, $connectionEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $connectionEnvelope The properties of this Virtual Network Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteVNETConnectionAsync($resourceGroupName, $name, $vnetName, array $connectionEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Removes the specified Virtual Network Connection association from this web
     * app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteVNETConnection($resourceGroupName, $name, $vnetName, array $customHeaders = [])
    {
        $response = $this->deleteSiteVNETConnectionAsync($resourceGroupName, $name, $vnetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Removes the specified Virtual Network Connection association from this web
     * app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteVNETConnectionAsync($resourceGroupName, $name, $vnetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $connectionEnvelope The properties of this Virtual Network Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteVNETConnection($resourceGroupName, $name, $vnetName, array $connectionEnvelope, array $customHeaders = [])
    {
        $response = $this->updateSiteVNETConnectionAsync($resourceGroupName, $name, $vnetName, $connectionEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param array $connectionEnvelope The properties of this Virtual Network Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteVNETConnectionAsync($resourceGroupName, $name, $vnetName, array $connectionEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $view The type of view. This can either be "summary" or
     * "detailed".
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'virtualNetworkName' => '',
     *       'virtualNetworkConnection' => [
     *          'properties' => [
     *             'vnetResourceId' => '',
     *             'certThumbprint' => '',
     *             'certBlob' => '',
     *             'routes' => '',
     *             'resyncRequired' => 'false',
     *             'dnsServers' => ''
     *          ]
     *       ],
     *       'hybridConnections' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function getSiteNetworkFeaturesSlot($resourceGroupName, $name, $view, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteNetworkFeaturesSlotAsync($resourceGroupName, $name, $view, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $view The type of view. This can either be "summary" or
     * "detailed".
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteNetworkFeaturesSlotAsync($resourceGroupName, $name, $view, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($view == null) {
            Validate::notNullOrEmpty($view, '$view');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}';
        $statusCodes = [200, 404];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{view}' => $view, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $view The type of view. This can either be "summary" or
     * "detailed".
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'virtualNetworkName' => '',
     *       'virtualNetworkConnection' => [
     *          'properties' => [
     *             'vnetResourceId' => '',
     *             'certThumbprint' => '',
     *             'certBlob' => '',
     *             'routes' => '',
     *             'resyncRequired' => 'false',
     *             'dnsServers' => ''
     *          ]
     *       ],
     *       'hybridConnections' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function getSiteNetworkFeatures($resourceGroupName, $name, $view, array $customHeaders = [])
    {
        $response = $this->getSiteNetworkFeaturesAsync($resourceGroupName, $name, $view, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $view The type of view. This can either be "summary" or
     * "detailed".
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteNetworkFeaturesAsync($resourceGroupName, $name, $view, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($view == null) {
            Validate::notNullOrEmpty($view, '$view');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}';
        $statusCodes = [200, 404];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{view}' => $view, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the operation for a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $operationId Id of an operation
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getSiteOperationSlot($resourceGroupName, $name, $operationId, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteOperationSlotAsync($resourceGroupName, $name, $operationId, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the operation for a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $operationId Id of an operation
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteOperationSlotAsync($resourceGroupName, $name, $operationId, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($operationId == null) {
            Validate::notNullOrEmpty($operationId, '$operationId');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/operationresults/{operationId}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{operationId}' => $operationId, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the operation for a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $operationId Id of an operation
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getSiteOperation($resourceGroupName, $name, $operationId, array $customHeaders = [])
    {
        $response = $this->getSiteOperationAsync($resourceGroupName, $name, $operationId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the operation for a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $operationId Id of an operation
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteOperationAsync($resourceGroupName, $name, $operationId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($operationId == null) {
            Validate::notNullOrEmpty($operationId, '$operationId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/operationresults/{operationId}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{operationId}' => $operationId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Swaps web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * When the resposne status is Accepted(202), object
     */
    public function swapSlotWithProduction($resourceGroupName, $name, array $slotSwapEntity, array $customHeaders = [])
    {
        $response = $this->beginswapSlotWithProductionAsync($resourceGroupName, $name, $slotSwapEntity, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Swaps web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * When the resposne status is Accepted(202), object
     */
    public function beginSwapSlotWithProduction($resourceGroupName, $name, array $slotSwapEntity, array $customHeaders = [])
    {
        $response = $this->beginSwapSlotWithProductionAsync($resourceGroupName, $name, $slotSwapEntity, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Swaps web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginSwapSlotWithProductionAsync($resourceGroupName, $name, array $slotSwapEntity, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slotSwapEntity == null) {
            Validate::notNullOrEmpty($slotSwapEntity, '$slotSwapEntity');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($slotSwapEntity);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Swaps web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param string $slot Name of source slot for the swap
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * When the resposne status is Accepted(202), object
     */
    public function swapSlotsSlot($resourceGroupName, $name, array $slotSwapEntity, $slot, array $customHeaders = [])
    {
        $response = $this->beginswapSlotsSlotAsync($resourceGroupName, $name, $slotSwapEntity, $slot, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Swaps web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param string $slot Name of source slot for the swap
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * When the resposne status is Accepted(202), object
     */
    public function beginSwapSlotsSlot($resourceGroupName, $name, array $slotSwapEntity, $slot, array $customHeaders = [])
    {
        $response = $this->beginSwapSlotsSlotAsync($resourceGroupName, $name, $slotSwapEntity, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Swaps web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param string $slot Name of source slot for the swap
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginSwapSlotsSlotAsync($resourceGroupName, $name, array $slotSwapEntity, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slotSwapEntity == null) {
            Validate::notNullOrEmpty($slotSwapEntity, '$slotSwapEntity');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($slotSwapEntity);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the difference in configuration settings between two web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSlotsDifferencesFromProduction($resourceGroupName, $name, array $slotSwapEntity, array $customHeaders = [])
    {
        $response = $this->getSlotsDifferencesFromProductionAsync($resourceGroupName, $name, $slotSwapEntity, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the difference in configuration settings between two web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSlotsDifferencesFromProductionAsync($resourceGroupName, $name, array $slotSwapEntity, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slotSwapEntity == null) {
            Validate::notNullOrEmpty($slotSwapEntity, '$slotSwapEntity');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($slotSwapEntity);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the difference in configuration settings between two web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param string $slot Name of the source slot
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSlotsDifferencesSlot($resourceGroupName, $name, array $slotSwapEntity, $slot, array $customHeaders = [])
    {
        $response = $this->getSlotsDifferencesSlotAsync($resourceGroupName, $name, $slotSwapEntity, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the difference in configuration settings between two web app slots
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param string $slot Name of the source slot
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSlotsDifferencesSlotAsync($resourceGroupName, $name, array $slotSwapEntity, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slotSwapEntity == null) {
            Validate::notNullOrEmpty($slotSwapEntity, '$slotSwapEntity');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($slotSwapEntity);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Applies the configuration settings from the target slot onto the current
     * slot
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name. Settings from
     *  that slot will be applied on the source slot 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function applySlotConfigToProduction($resourceGroupName, $name, array $slotSwapEntity, array $customHeaders = [])
    {
        $response = $this->applySlotConfigToProductionAsync($resourceGroupName, $name, $slotSwapEntity, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Applies the configuration settings from the target slot onto the current
     * slot
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name. Settings from
     *  that slot will be applied on the source slot 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function applySlotConfigToProductionAsync($resourceGroupName, $name, array $slotSwapEntity, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slotSwapEntity == null) {
            Validate::notNullOrEmpty($slotSwapEntity, '$slotSwapEntity');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($slotSwapEntity);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Applies the configuration settings from the target slot onto the current
     * slot
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name. Settings from
     *  that slot will be applied on the source slot 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param string $slot Name of the source slot. Settings from the target slot
     * will be applied onto this slot
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function applySlotConfigSlot($resourceGroupName, $name, array $slotSwapEntity, $slot, array $customHeaders = [])
    {
        $response = $this->applySlotConfigSlotAsync($resourceGroupName, $name, $slotSwapEntity, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Applies the configuration settings from the target slot onto the current
     * slot
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotSwapEntity Request body that contains the target slot name. Settings from
     *  that slot will be applied on the source slot 
     * <pre>
     * [
     *    'targetSlot' => '',
     *    'preserveVnet' => 'false'
     * ];
     * </pre>
     * @param string $slot Name of the source slot. Settings from the target slot
     * will be applied onto this slot
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function applySlotConfigSlotAsync($resourceGroupName, $name, array $slotSwapEntity, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slotSwapEntity == null) {
            Validate::notNullOrEmpty($slotSwapEntity, '$slotSwapEntity');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($slotSwapEntity);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Resets the configuration settings of the current slot if they were
     * previously modified by calling ApplySlotConfig API
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function resetProductionSlotConfig($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->resetProductionSlotConfigAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Resets the configuration settings of the current slot if they were
     * previously modified by calling ApplySlotConfig API
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function resetProductionSlotConfigAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Resets the configuration settings of the current slot if they were
     * previously modified by calling ApplySlotConfig API
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function resetSlotConfigSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->resetSlotConfigSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Resets the configuration settings of the current slot if they were
     * previously modified by calling ApplySlotConfig API
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function resetSlotConfigSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the names of application settings and connection string that remain
     * with the slot during swap operation
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'connectionStringNames' => '',
     *       'appSettingNames' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSlotConfigNames($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSlotConfigNamesAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the names of application settings and connection string that remain
     * with the slot during swap operation
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSlotConfigNamesAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the names of application settings and connection string that remain
     * with the slot during swap operation
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotConfigNames Request body containing the names of application settings and
     *  connection strings 
     * <pre>
     * [
     *    'properties' => [
     *       'connectionStringNames' => '',
     *       'appSettingNames' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'connectionStringNames' => '',
     *       'appSettingNames' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSlotConfigNames($resourceGroupName, $name, array $slotConfigNames, array $customHeaders = [])
    {
        $response = $this->updateSlotConfigNamesAsync($resourceGroupName, $name, $slotConfigNames, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the names of application settings and connection string that remain
     * with the slot during swap operation
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $slotConfigNames Request body containing the names of application settings and
     *  connection strings 
     * <pre>
     * [
     *    'properties' => [
     *       'connectionStringNames' => '',
     *       'appSettingNames' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSlotConfigNamesAsync($resourceGroupName, $name, array $slotConfigNames, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slotConfigNames == null) {
            Validate::notNullOrEmpty($slotConfigNames, '$slotConfigNames');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($slotConfigNames);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all the slots for a web apps
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $propertiesToInclude List of app properties to include in the
     * response
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteSlots($resourceGroupName, $name, $propertiesToInclude = null, array $customHeaders = [])
    {
        $response = $this->getSiteSlotsAsync($resourceGroupName, $name, $propertiesToInclude, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all the slots for a web apps
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $propertiesToInclude List of app properties to include in the
     * response
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteSlotsAsync($resourceGroupName, $name, $propertiesToInclude = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['propertiesToInclude' => $propertiesToInclude, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the web apps for a subscription in the specified resource group
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $propertiesToInclude Additional web app properties included
     * in the response
     * @param string $includeSiteTypes Types of apps included in the response
     * @param bool $includeSlots Whether or not to include deployments slots in
     * results
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSites($resourceGroupName, $propertiesToInclude = null, $includeSiteTypes = null, $includeSlots = null, array $customHeaders = [])
    {
        $response = $this->getSitesAsync($resourceGroupName, $propertiesToInclude, $includeSiteTypes, $includeSlots, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web apps for a subscription in the specified resource group
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $propertiesToInclude Additional web app properties included
     * in the response
     * @param string $includeSiteTypes Types of apps included in the response
     * @param bool $includeSlots Whether or not to include deployments slots in
     * results
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSitesAsync($resourceGroupName, $propertiesToInclude = null, $includeSiteTypes = null, $includeSlots = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['propertiesToInclude' => $propertiesToInclude, 'includeSiteTypes' => $includeSiteTypes, 'includeSlots' => $includeSlots, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get details of a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $propertiesToInclude Additional web app properties included
     * in the response
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSite($resourceGroupName, $name, $propertiesToInclude = null, array $customHeaders = [])
    {
        $response = $this->getSiteAsync($resourceGroupName, $name, $propertiesToInclude, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get details of a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $propertiesToInclude Additional web app properties included
     * in the response
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteAsync($resourceGroupName, $name, $propertiesToInclude = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['propertiesToInclude' => $propertiesToInclude, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param array $siteEnvelope Details of web app if it exists already 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $skipDnsRegistration If true web app hostname is not
     * registered with DNS on creation. This parameter is
     * only used for app creation
     * @param string $skipCustomDomainVerification If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * @param string $forceDnsRegistration If true, web app hostname is force
     * registered with DNS
     * @param string $ttlInSeconds Time to live in seconds for web app's default
     * domain name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSite($resourceGroupName, $name, array $siteEnvelope, $skipDnsRegistration = null, $skipCustomDomainVerification = null, $forceDnsRegistration = null, $ttlInSeconds = null, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateSiteAsync($resourceGroupName, $name, $siteEnvelope, $skipDnsRegistration, $skipCustomDomainVerification, $forceDnsRegistration, $ttlInSeconds, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param array $siteEnvelope Details of web app if it exists already 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $skipDnsRegistration If true web app hostname is not
     * registered with DNS on creation. This parameter is
     * only used for app creation
     * @param string $skipCustomDomainVerification If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * @param string $forceDnsRegistration If true, web app hostname is force
     * registered with DNS
     * @param string $ttlInSeconds Time to live in seconds for web app's default
     * domain name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginCreateOrUpdateSite($resourceGroupName, $name, array $siteEnvelope, $skipDnsRegistration = null, $skipCustomDomainVerification = null, $forceDnsRegistration = null, $ttlInSeconds = null, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateSiteAsync($resourceGroupName, $name, $siteEnvelope, $skipDnsRegistration, $skipCustomDomainVerification, $forceDnsRegistration, $ttlInSeconds, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param array $siteEnvelope Details of web app if it exists already 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $skipDnsRegistration If true web app hostname is not
     * registered with DNS on creation. This parameter is
     * only used for app creation
     * @param string $skipCustomDomainVerification If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * @param string $forceDnsRegistration If true, web app hostname is force
     * registered with DNS
     * @param string $ttlInSeconds Time to live in seconds for web app's default
     * domain name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateSiteAsync($resourceGroupName, $name, array $siteEnvelope, $skipDnsRegistration = null, $skipCustomDomainVerification = null, $forceDnsRegistration = null, $ttlInSeconds = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteEnvelope == null) {
            Validate::notNullOrEmpty($siteEnvelope, '$siteEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}';
        $statusCodes = [200, 202];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['skipDnsRegistration' => $skipDnsRegistration, 'skipCustomDomainVerification' => $skipCustomDomainVerification, 'forceDnsRegistration' => $forceDnsRegistration, 'ttlInSeconds' => $ttlInSeconds, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $deleteMetrics If true, web app metrics are also deleted
     * @param string $deleteEmptyServerFarm If true and App Service Plan is empty
     * after web app deletion, App Service Plan is also deleted
     * @param string $skipDnsRegistration If true, DNS registration is skipped
     * @param string $deleteAllSlots If true, all slots associated with web app
     * are also deleted
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSite($resourceGroupName, $name, $deleteMetrics = null, $deleteEmptyServerFarm = null, $skipDnsRegistration = null, $deleteAllSlots = null, array $customHeaders = [])
    {
        $response = $this->deleteSiteAsync($resourceGroupName, $name, $deleteMetrics, $deleteEmptyServerFarm, $skipDnsRegistration, $deleteAllSlots, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $deleteMetrics If true, web app metrics are also deleted
     * @param string $deleteEmptyServerFarm If true and App Service Plan is empty
     * after web app deletion, App Service Plan is also deleted
     * @param string $skipDnsRegistration If true, DNS registration is skipped
     * @param string $deleteAllSlots If true, all slots associated with web app
     * are also deleted
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteAsync($resourceGroupName, $name, $deleteMetrics = null, $deleteEmptyServerFarm = null, $skipDnsRegistration = null, $deleteAllSlots = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['deleteMetrics' => $deleteMetrics, 'deleteEmptyServerFarm' => $deleteEmptyServerFarm, 'skipDnsRegistration' => $skipDnsRegistration, 'deleteAllSlots' => $deleteAllSlots, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get details of a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $propertiesToInclude Additional web app properties included
     * in the response
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteSlot($resourceGroupName, $name, $slot, $propertiesToInclude = null, array $customHeaders = [])
    {
        $response = $this->getSiteSlotAsync($resourceGroupName, $name, $slot, $propertiesToInclude, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get details of a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $propertiesToInclude Additional web app properties included
     * in the response
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteSlotAsync($resourceGroupName, $name, $slot, $propertiesToInclude = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['propertiesToInclude' => $propertiesToInclude, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param array $siteEnvelope Details of web app if it exists already 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $skipDnsRegistration If true web app hostname is not
     * registered with DNS on creation. This parameter is
     * only used for app creation
     * @param string $skipCustomDomainVerification If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * @param string $forceDnsRegistration If true, web app hostname is force
     * registered with DNS
     * @param string $ttlInSeconds Time to live in seconds for web app's default
     * domain name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteSlot($resourceGroupName, $name, array $siteEnvelope, $slot, $skipDnsRegistration = null, $skipCustomDomainVerification = null, $forceDnsRegistration = null, $ttlInSeconds = null, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateSiteSlotAsync($resourceGroupName, $name, $siteEnvelope, $slot, $skipDnsRegistration, $skipCustomDomainVerification, $forceDnsRegistration, $ttlInSeconds, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param array $siteEnvelope Details of web app if it exists already 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $skipDnsRegistration If true web app hostname is not
     * registered with DNS on creation. This parameter is
     * only used for app creation
     * @param string $skipCustomDomainVerification If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * @param string $forceDnsRegistration If true, web app hostname is force
     * registered with DNS
     * @param string $ttlInSeconds Time to live in seconds for web app's default
     * domain name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginCreateOrUpdateSiteSlot($resourceGroupName, $name, array $siteEnvelope, $slot, $skipDnsRegistration = null, $skipCustomDomainVerification = null, $forceDnsRegistration = null, $ttlInSeconds = null, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateSiteSlotAsync($resourceGroupName, $name, $siteEnvelope, $slot, $skipDnsRegistration, $skipCustomDomainVerification, $forceDnsRegistration, $ttlInSeconds, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param array $siteEnvelope Details of web app if it exists already 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $skipDnsRegistration If true web app hostname is not
     * registered with DNS on creation. This parameter is
     * only used for app creation
     * @param string $skipCustomDomainVerification If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * @param string $forceDnsRegistration If true, web app hostname is force
     * registered with DNS
     * @param string $ttlInSeconds Time to live in seconds for web app's default
     * domain name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateSiteSlotAsync($resourceGroupName, $name, array $siteEnvelope, $slot, $skipDnsRegistration = null, $skipCustomDomainVerification = null, $forceDnsRegistration = null, $ttlInSeconds = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteEnvelope == null) {
            Validate::notNullOrEmpty($siteEnvelope, '$siteEnvelope');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}';
        $statusCodes = [200, 202];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['skipDnsRegistration' => $skipDnsRegistration, 'skipCustomDomainVerification' => $skipCustomDomainVerification, 'forceDnsRegistration' => $forceDnsRegistration, 'ttlInSeconds' => $ttlInSeconds, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $deleteMetrics If true, web app metrics are also deleted
     * @param string $deleteEmptyServerFarm If true and App Service Plan is empty
     * after web app deletion, App Service Plan is also deleted
     * @param string $skipDnsRegistration If true, DNS registration is skipped
     * @param string $deleteAllSlots If true, all slots associated with web app
     * are also deleted
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteSlot($resourceGroupName, $name, $slot, $deleteMetrics = null, $deleteEmptyServerFarm = null, $skipDnsRegistration = null, $deleteAllSlots = null, array $customHeaders = [])
    {
        $response = $this->deleteSiteSlotAsync($resourceGroupName, $name, $slot, $deleteMetrics, $deleteEmptyServerFarm, $skipDnsRegistration, $deleteAllSlots, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $deleteMetrics If true, web app metrics are also deleted
     * @param string $deleteEmptyServerFarm If true and App Service Plan is empty
     * after web app deletion, App Service Plan is also deleted
     * @param string $skipDnsRegistration If true, DNS registration is skipped
     * @param string $deleteAllSlots If true, all slots associated with web app
     * are also deleted
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteSlotAsync($resourceGroupName, $name, $slot, $deleteMetrics = null, $deleteEmptyServerFarm = null, $skipDnsRegistration = null, $deleteAllSlots = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['deleteMetrics' => $deleteMetrics, 'deleteEmptyServerFarm' => $deleteEmptyServerFarm, 'skipDnsRegistration' => $skipDnsRegistration, 'deleteAllSlots' => $deleteAllSlots, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'result' => 'Cloneable|PartiallyCloneable|NotCloneable',
     *    'blockingFeatures' => '',
     *    'unsupportedFeatures' => '',
     *    'blockingCharacteristics' => ''
     * ];
     * </pre>
     */
    public function isSiteCloneable($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->isSiteCloneableAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function isSiteCloneableAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'result' => 'Cloneable|PartiallyCloneable|NotCloneable',
     *    'blockingFeatures' => '',
     *    'unsupportedFeatures' => '',
     *    'blockingCharacteristics' => ''
     * ];
     * </pre>
     */
    public function isSiteCloneableSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->isSiteCloneableSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @param string $resourceGroupName Name of the resource group
     * @param string $name Name of the web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function isSiteCloneableSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Recovers a deleted web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $recoveryEntity Snapshot data used for web app recovery. Snapshot information can
     *  be obtained by calling GetDeletedSites or GetSiteSnapshots API. 
     * <pre>
     * [
     *    'snapshotTime' => '',
     *    'recoverConfig' => 'false',
     *    'siteName' => '',
     *    'slotName' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function recoverSite($resourceGroupName, $name, array $recoveryEntity, array $customHeaders = [])
    {
        $response = $this->beginrecoverSiteAsync($resourceGroupName, $name, $recoveryEntity, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Recovers a deleted web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $recoveryEntity Snapshot data used for web app recovery. Snapshot information can
     *  be obtained by calling GetDeletedSites or GetSiteSnapshots API. 
     * <pre>
     * [
     *    'snapshotTime' => '',
     *    'recoverConfig' => 'false',
     *    'siteName' => '',
     *    'slotName' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function beginRecoverSite($resourceGroupName, $name, array $recoveryEntity, array $customHeaders = [])
    {
        $response = $this->beginRecoverSiteAsync($resourceGroupName, $name, $recoveryEntity, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Recovers a deleted web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $recoveryEntity Snapshot data used for web app recovery. Snapshot information can
     *  be obtained by calling GetDeletedSites or GetSiteSnapshots API. 
     * <pre>
     * [
     *    'snapshotTime' => '',
     *    'recoverConfig' => 'false',
     *    'siteName' => '',
     *    'slotName' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRecoverSiteAsync($resourceGroupName, $name, array $recoveryEntity, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($recoveryEntity == null) {
            Validate::notNullOrEmpty($recoveryEntity, '$recoveryEntity');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover';
        $statusCodes = [202, 404];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($recoveryEntity);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Recovers a deleted web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $recoveryEntity Snapshot data used for web app recovery. Snapshot information can
     *  be obtained by calling GetDeletedSites or GetSiteSnapshots API. 
     * <pre>
     * [
     *    'snapshotTime' => '',
     *    'recoverConfig' => 'false',
     *    'siteName' => '',
     *    'slotName' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function recoverSiteSlot($resourceGroupName, $name, array $recoveryEntity, $slot, array $customHeaders = [])
    {
        $response = $this->beginrecoverSiteSlotAsync($resourceGroupName, $name, $recoveryEntity, $slot, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Recovers a deleted web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $recoveryEntity Snapshot data used for web app recovery. Snapshot information can
     *  be obtained by calling GetDeletedSites or GetSiteSnapshots API. 
     * <pre>
     * [
     *    'snapshotTime' => '',
     *    'recoverConfig' => 'false',
     *    'siteName' => '',
     *    'slotName' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'state' => '',
     *       'hostNames' => '',
     *       'repositorySiteName' => '',
     *       'usageState' => 'Normal|Exceeded',
     *       'enabled' => 'false',
     *       'enabledHostNames' => '',
     *       'availabilityState' => 'Normal|Limited|DisasterRecoveryMode',
     *       'hostNameSslStates' => '',
     *       'serverFarmId' => '',
     *       'lastModifiedTimeUtc' => '',
     *       'siteConfig' => [
     *          'properties' => [
     *             'numberOfWorkers' => '',
     *             'defaultDocuments' => '',
     *             'netFrameworkVersion' => '',
     *             'phpVersion' => '',
     *             'pythonVersion' => '',
     *             'requestTracingEnabled' => 'false',
     *             'requestTracingExpirationTime' => '',
     *             'remoteDebuggingEnabled' => 'false',
     *             'remoteDebuggingVersion' => '',
     *             'httpLoggingEnabled' => 'false',
     *             'logsDirectorySizeLimit' => '',
     *             'detailedErrorLoggingEnabled' => 'false',
     *             'publishingUsername' => '',
     *             'publishingPassword' => '',
     *             'appSettings' => '',
     *             'metadata' => '',
     *             'connectionStrings' => '',
     *             'handlerMappings' => '',
     *             'documentRoot' => '',
     *             'scmType' => '',
     *             'use32BitWorkerProcess' => 'false',
     *             'webSocketsEnabled' => 'false',
     *             'alwaysOn' => 'false',
     *             'javaVersion' => '',
     *             'javaContainer' => '',
     *             'javaContainerVersion' => '',
     *             'managedPipelineMode' => 'Integrated|Classic',
     *             'virtualApplications' => '',
     *             'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *             'experiments' => [
     *                'rampUpRules' => ''
     *             ],
     *             'limits' => [
     *                'maxPercentageCpu' => '',
     *                'maxMemoryInMb' => '',
     *                'maxDiskSizeInMb' => ''
     *             ],
     *             'autoHealEnabled' => 'false',
     *             'autoHealRules' => [
     *                'triggers' => ,
     *                'actions' => 
     *             ],
     *             'tracingOptions' => '',
     *             'vnetName' => '',
     *             'cors' => [
     *                'allowedOrigins' => ''
     *             ],
     *             'apiDefinition' => [
     *                'url' => ''
     *             ],
     *             'autoSwapSlotName' => '',
     *             'localMySqlEnabled' => 'false',
     *             'ipSecurityRestrictions' => ''
     *          ]
     *       ],
     *       'trafficManagerHostNames' => '',
     *       'premiumAppDeployed' => 'false',
     *       'scmSiteAlsoStopped' => 'false',
     *       'targetSwapSlot' => '',
     *       'hostingEnvironmentProfile' => [
     *          'id' => '',
     *          'name' => '',
     *          'type' => ''
     *       ],
     *       'microService' => '',
     *       'gatewaySiteName' => '',
     *       'clientAffinityEnabled' => 'false',
     *       'clientCertEnabled' => 'false',
     *       'hostNamesDisabled' => 'false',
     *       'outboundIpAddresses' => '',
     *       'containerSize' => '',
     *       'maxNumberOfWorkers' => '',
     *       'cloningInfo' => [
     *          'correlationId' => '',
     *          'overwrite' => 'false',
     *          'cloneCustomHostNames' => 'false',
     *          'cloneSourceControl' => 'false',
     *          'sourceWebAppId' => '',
     *          'hostingEnvironment' => '',
     *          'appSettingsOverrides' => '',
     *          'configureLoadBalancing' => 'false',
     *          'trafficManagerProfileId' => '',
     *          'trafficManagerProfileName' => ''
     *       ],
     *       'resourceGroup' => '',
     *       'isDefaultContainer' => 'false',
     *       'defaultHostName' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function beginRecoverSiteSlot($resourceGroupName, $name, array $recoveryEntity, $slot, array $customHeaders = [])
    {
        $response = $this->beginRecoverSiteSlotAsync($resourceGroupName, $name, $recoveryEntity, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Recovers a deleted web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $recoveryEntity Snapshot data used for web app recovery. Snapshot information can
     *  be obtained by calling GetDeletedSites or GetSiteSnapshots API. 
     * <pre>
     * [
     *    'snapshotTime' => '',
     *    'recoverConfig' => 'false',
     *    'siteName' => '',
     *    'slotName' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRecoverSiteSlotAsync($resourceGroupName, $name, array $recoveryEntity, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($recoveryEntity == null) {
            Validate::notNullOrEmpty($recoveryEntity, '$recoveryEntity');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover';
        $statusCodes = [202, 404];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($recoveryEntity);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param string $resourceGroupName Webspace
     * @param string $name Website Name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getSiteSnapshots($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteSnapshotsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param string $resourceGroupName Webspace
     * @param string $name Website Name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteSnapshotsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param string $resourceGroupName Webspace
     * @param string $name Website Name
     * @param string $slot Website Slot
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getSiteSnapshotsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteSnapshotsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @param string $resourceGroupName Webspace
     * @param string $name Website Name
     * @param string $slot Website Slot
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteSnapshotsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets deleted web apps in subscription
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $propertiesToInclude Additional web app properties included
     * in the response
     * @param string $includeSiteTypes Types of apps included in the response
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getDeletedSites($resourceGroupName, $propertiesToInclude = null, $includeSiteTypes = null, array $customHeaders = [])
    {
        $response = $this->getDeletedSitesAsync($resourceGroupName, $propertiesToInclude, $includeSiteTypes, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets deleted web apps in subscription
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $propertiesToInclude Additional web app properties included
     * in the response
     * @param string $includeSiteTypes Types of apps included in the response
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getDeletedSitesAsync($resourceGroupName, $propertiesToInclude = null, $includeSiteTypes = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/deletedSites';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['propertiesToInclude' => $propertiesToInclude, 'includeSiteTypes' => $includeSiteTypes, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List deployments
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getDeployments($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getDeploymentsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List deployments
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getDeploymentsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List deployments
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getDeploymentsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getDeploymentsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List deployments
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getDeploymentsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List deployments
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getInstanceDeployments($resourceGroupName, $name, $instanceId, array $customHeaders = [])
    {
        $response = $this->getInstanceDeploymentsAsync($resourceGroupName, $name, $instanceId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List deployments
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getInstanceDeploymentsAsync($resourceGroupName, $name, $instanceId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($instanceId == null) {
            Validate::notNullOrEmpty($instanceId, '$instanceId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{instanceId}' => $instanceId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List deployments
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getInstanceDeploymentsSlot($resourceGroupName, $name, $slot, $instanceId, array $customHeaders = [])
    {
        $response = $this->getInstanceDeploymentsSlotAsync($resourceGroupName, $name, $slot, $instanceId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List deployments
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getInstanceDeploymentsSlotAsync($resourceGroupName, $name, $slot, $instanceId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($instanceId == null) {
            Validate::notNullOrEmpty($instanceId, '$instanceId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{instanceId}' => $instanceId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getInstanceDeployment($resourceGroupName, $name, $id, $instanceId, array $customHeaders = [])
    {
        $response = $this->getInstanceDeploymentAsync($resourceGroupName, $name, $id, $instanceId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getInstanceDeploymentAsync($resourceGroupName, $name, $id, $instanceId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($instanceId == null) {
            Validate::notNullOrEmpty($instanceId, '$instanceId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{instanceId}' => $instanceId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create a deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $instanceId Id of web app instance
     * @param array $deployment Details of deployment 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createInstanceDeployment($resourceGroupName, $name, $id, $instanceId, array $deployment, array $customHeaders = [])
    {
        $response = $this->createInstanceDeploymentAsync($resourceGroupName, $name, $id, $instanceId, $deployment, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create a deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $instanceId Id of web app instance
     * @param array $deployment Details of deployment 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createInstanceDeploymentAsync($resourceGroupName, $name, $id, $instanceId, array $deployment, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($instanceId == null) {
            Validate::notNullOrEmpty($instanceId, '$instanceId');
        }
        if ($deployment == null) {
            Validate::notNullOrEmpty($deployment, '$deployment');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{instanceId}' => $instanceId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($deployment);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteInstanceDeployment($resourceGroupName, $name, $id, $instanceId, array $customHeaders = [])
    {
        $response = $this->deleteInstanceDeploymentAsync($resourceGroupName, $name, $id, $instanceId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteInstanceDeploymentAsync($resourceGroupName, $name, $id, $instanceId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($instanceId == null) {
            Validate::notNullOrEmpty($instanceId, '$instanceId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{instanceId}' => $instanceId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getDeployment($resourceGroupName, $name, $id, array $customHeaders = [])
    {
        $response = $this->getDeploymentAsync($resourceGroupName, $name, $id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getDeploymentAsync($resourceGroupName, $name, $id, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create a deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param array $deployment Details of deployment 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createDeployment($resourceGroupName, $name, $id, array $deployment, array $customHeaders = [])
    {
        $response = $this->createDeploymentAsync($resourceGroupName, $name, $id, $deployment, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create a deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param array $deployment Details of deployment 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createDeploymentAsync($resourceGroupName, $name, $id, array $deployment, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($deployment == null) {
            Validate::notNullOrEmpty($deployment, '$deployment');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($deployment);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteDeployment($resourceGroupName, $name, $id, array $customHeaders = [])
    {
        $response = $this->deleteDeploymentAsync($resourceGroupName, $name, $id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteDeploymentAsync($resourceGroupName, $name, $id, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getDeploymentSlot($resourceGroupName, $name, $id, $slot, array $customHeaders = [])
    {
        $response = $this->getDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create a deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $deployment Details of deployment 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createDeploymentSlot($resourceGroupName, $name, $id, $slot, array $deployment, array $customHeaders = [])
    {
        $response = $this->createDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $deployment, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create a deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $deployment Details of deployment 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, array $deployment, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($deployment == null) {
            Validate::notNullOrEmpty($deployment, '$deployment');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($deployment);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteDeploymentSlot($resourceGroupName, $name, $id, $slot, array $customHeaders = [])
    {
        $response = $this->deleteDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getInstanceDeploymentSlot($resourceGroupName, $name, $id, $slot, $instanceId, array $customHeaders = [])
    {
        $response = $this->getInstanceDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $instanceId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getInstanceDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $instanceId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($instanceId == null) {
            Validate::notNullOrEmpty($instanceId, '$instanceId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{slot}' => $slot, '{instanceId}' => $instanceId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create a deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $instanceId Id of web app instance
     * @param array $deployment Details of deployment 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createInstanceDeploymentSlot($resourceGroupName, $name, $id, $slot, $instanceId, array $deployment, array $customHeaders = [])
    {
        $response = $this->createInstanceDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $instanceId, $deployment, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create a deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $instanceId Id of web app instance
     * @param array $deployment Details of deployment 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'status' => '',
     *       'message' => '',
     *       'author' => '',
     *       'deployer' => '',
     *       'author_email' => '',
     *       'start_time' => '',
     *       'end_time' => '',
     *       'active' => 'false',
     *       'details' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createInstanceDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $instanceId, array $deployment, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($instanceId == null) {
            Validate::notNullOrEmpty($instanceId, '$instanceId');
        }
        if ($deployment == null) {
            Validate::notNullOrEmpty($deployment, '$deployment');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{slot}' => $slot, '{instanceId}' => $instanceId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($deployment);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteInstanceDeploymentSlot($resourceGroupName, $name, $id, $slot, $instanceId, array $customHeaders = [])
    {
        $response = $this->deleteInstanceDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $instanceId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete the deployment
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $id Id of the deployment
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $instanceId Id of web app instance
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteInstanceDeploymentSlotAsync($resourceGroupName, $name, $id, $slot, $instanceId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($instanceId == null) {
            Validate::notNullOrEmpty($instanceId, '$instanceId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{id}' => $id, '{slot}' => $slot, '{instanceId}' => $instanceId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all instance of a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteInstanceIdentifiers($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteInstanceIdentifiersAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all instance of a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteInstanceIdentifiersAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all instance of a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteInstanceIdentifiersSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteInstanceIdentifiersSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all instance of a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteInstanceIdentifiersSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get web app hostname bindings
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteHostNameBindings($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteHostNameBindingsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get web app hostname bindings
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteHostNameBindingsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get web app hostname bindings
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteHostNameBindingsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteHostNameBindingsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get web app hostname bindings
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteHostNameBindingsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get web app binding for a hostname
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $hostName Name of host
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'siteName' => '',
     *       'domainId' => '',
     *       'azureResourceName' => '',
     *       'azureResourceType' => 'Website|TrafficManager',
     *       'customHostNameDnsRecordType' => 'CName|A',
     *       'hostNameType' => 'Verified|Managed'
     *    ]
     * ];
     * </pre>
     */
    public function getSiteHostNameBinding($resourceGroupName, $name, $hostName, array $customHeaders = [])
    {
        $response = $this->getSiteHostNameBindingAsync($resourceGroupName, $name, $hostName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get web app binding for a hostname
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $hostName Name of host
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteHostNameBindingAsync($resourceGroupName, $name, $hostName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($hostName == null) {
            Validate::notNullOrEmpty($hostName, '$hostName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{hostName}' => $hostName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a web app hostname binding
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $hostName Name of host
     * @param array $hostNameBinding Host name binding information 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'siteName' => '',
     *       'domainId' => '',
     *       'azureResourceName' => '',
     *       'azureResourceType' => 'Website|TrafficManager',
     *       'customHostNameDnsRecordType' => 'CName|A',
     *       'hostNameType' => 'Verified|Managed'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'siteName' => '',
     *       'domainId' => '',
     *       'azureResourceName' => '',
     *       'azureResourceType' => 'Website|TrafficManager',
     *       'customHostNameDnsRecordType' => 'CName|A',
     *       'hostNameType' => 'Verified|Managed'
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteHostNameBinding($resourceGroupName, $name, $hostName, array $hostNameBinding, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteHostNameBindingAsync($resourceGroupName, $name, $hostName, $hostNameBinding, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a web app hostname binding
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $hostName Name of host
     * @param array $hostNameBinding Host name binding information 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'siteName' => '',
     *       'domainId' => '',
     *       'azureResourceName' => '',
     *       'azureResourceType' => 'Website|TrafficManager',
     *       'customHostNameDnsRecordType' => 'CName|A',
     *       'hostNameType' => 'Verified|Managed'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteHostNameBindingAsync($resourceGroupName, $name, $hostName, array $hostNameBinding, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($hostName == null) {
            Validate::notNullOrEmpty($hostName, '$hostName');
        }
        if ($hostNameBinding == null) {
            Validate::notNullOrEmpty($hostNameBinding, '$hostNameBinding');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{hostName}' => $hostName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($hostNameBinding);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a host name binding
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $hostName Name of host
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteHostNameBinding($resourceGroupName, $name, $hostName, array $customHeaders = [])
    {
        $response = $this->deleteSiteHostNameBindingAsync($resourceGroupName, $name, $hostName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a host name binding
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $hostName Name of host
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteHostNameBindingAsync($resourceGroupName, $name, $hostName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($hostName == null) {
            Validate::notNullOrEmpty($hostName, '$hostName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{hostName}' => $hostName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get web app binding for a hostname
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $hostName Name of host
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'siteName' => '',
     *       'domainId' => '',
     *       'azureResourceName' => '',
     *       'azureResourceType' => 'Website|TrafficManager',
     *       'customHostNameDnsRecordType' => 'CName|A',
     *       'hostNameType' => 'Verified|Managed'
     *    ]
     * ];
     * </pre>
     */
    public function getSiteHostNameBindingSlot($resourceGroupName, $name, $slot, $hostName, array $customHeaders = [])
    {
        $response = $this->getSiteHostNameBindingSlotAsync($resourceGroupName, $name, $slot, $hostName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get web app binding for a hostname
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $hostName Name of host
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteHostNameBindingSlotAsync($resourceGroupName, $name, $slot, $hostName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($hostName == null) {
            Validate::notNullOrEmpty($hostName, '$hostName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{hostName}' => $hostName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a web app hostname binding
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $hostName Name of host
     * @param array $hostNameBinding Host name binding information 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'siteName' => '',
     *       'domainId' => '',
     *       'azureResourceName' => '',
     *       'azureResourceType' => 'Website|TrafficManager',
     *       'customHostNameDnsRecordType' => 'CName|A',
     *       'hostNameType' => 'Verified|Managed'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'siteName' => '',
     *       'domainId' => '',
     *       'azureResourceName' => '',
     *       'azureResourceType' => 'Website|TrafficManager',
     *       'customHostNameDnsRecordType' => 'CName|A',
     *       'hostNameType' => 'Verified|Managed'
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteHostNameBindingSlot($resourceGroupName, $name, $hostName, array $hostNameBinding, $slot, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteHostNameBindingSlotAsync($resourceGroupName, $name, $hostName, $hostNameBinding, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a web app hostname binding
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $hostName Name of host
     * @param array $hostNameBinding Host name binding information 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'siteName' => '',
     *       'domainId' => '',
     *       'azureResourceName' => '',
     *       'azureResourceType' => 'Website|TrafficManager',
     *       'customHostNameDnsRecordType' => 'CName|A',
     *       'hostNameType' => 'Verified|Managed'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteHostNameBindingSlotAsync($resourceGroupName, $name, $hostName, array $hostNameBinding, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($hostName == null) {
            Validate::notNullOrEmpty($hostName, '$hostName');
        }
        if ($hostNameBinding == null) {
            Validate::notNullOrEmpty($hostNameBinding, '$hostNameBinding');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{hostName}' => $hostName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($hostNameBinding);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a host name binding
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $hostName Name of host
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteHostNameBindingSlot($resourceGroupName, $name, $slot, $hostName, array $customHeaders = [])
    {
        $response = $this->deleteSiteHostNameBindingSlotAsync($resourceGroupName, $name, $slot, $hostName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a host name binding
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $hostName Name of host
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteHostNameBindingSlotAsync($resourceGroupName, $name, $slot, $hostName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($hostName == null) {
            Validate::notNullOrEmpty($hostName, '$hostName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{hostName}' => $hostName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the configuration of the web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteConfig($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteConfigAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the configuration of the web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteConfigAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteConfig Request body that contains the configuraiton setting for the web app 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteConfig($resourceGroupName, $name, array $siteConfig, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteConfigAsync($resourceGroupName, $name, $siteConfig, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteConfig Request body that contains the configuraiton setting for the web app 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteConfigAsync($resourceGroupName, $name, array $siteConfig, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteConfig == null) {
            Validate::notNullOrEmpty($siteConfig, '$siteConfig');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteConfig);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteConfig Request body that contains the configuraiton setting for the web app 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteConfig($resourceGroupName, $name, array $siteConfig, array $customHeaders = [])
    {
        $response = $this->updateSiteConfigAsync($resourceGroupName, $name, $siteConfig, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteConfig Request body that contains the configuraiton setting for the web app 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteConfigAsync($resourceGroupName, $name, array $siteConfig, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteConfig == null) {
            Validate::notNullOrEmpty($siteConfig, '$siteConfig');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteConfig);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the configuration of the web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteConfigSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteConfigSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the configuration of the web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteConfigSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteConfig Request body that contains the configuraiton setting for the web app 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteConfigSlot($resourceGroupName, $name, array $siteConfig, $slot, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteConfigSlotAsync($resourceGroupName, $name, $siteConfig, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteConfig Request body that contains the configuraiton setting for the web app 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteConfigSlotAsync($resourceGroupName, $name, array $siteConfig, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteConfig == null) {
            Validate::notNullOrEmpty($siteConfig, '$siteConfig');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteConfig);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteConfig Request body that contains the configuraiton setting for the web app 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteConfigSlot($resourceGroupName, $name, array $siteConfig, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteConfigSlotAsync($resourceGroupName, $name, $siteConfig, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteConfig Request body that contains the configuraiton setting for the web app 
     * <pre>
     * [
     *    'properties' => [
     *       'numberOfWorkers' => '',
     *       'defaultDocuments' => '',
     *       'netFrameworkVersion' => '',
     *       'phpVersion' => '',
     *       'pythonVersion' => '',
     *       'requestTracingEnabled' => 'false',
     *       'requestTracingExpirationTime' => '',
     *       'remoteDebuggingEnabled' => 'false',
     *       'remoteDebuggingVersion' => '',
     *       'httpLoggingEnabled' => 'false',
     *       'logsDirectorySizeLimit' => '',
     *       'detailedErrorLoggingEnabled' => 'false',
     *       'publishingUsername' => '',
     *       'publishingPassword' => '',
     *       'appSettings' => '',
     *       'metadata' => '',
     *       'connectionStrings' => '',
     *       'handlerMappings' => '',
     *       'documentRoot' => '',
     *       'scmType' => '',
     *       'use32BitWorkerProcess' => 'false',
     *       'webSocketsEnabled' => 'false',
     *       'alwaysOn' => 'false',
     *       'javaVersion' => '',
     *       'javaContainer' => '',
     *       'javaContainerVersion' => '',
     *       'managedPipelineMode' => 'Integrated|Classic',
     *       'virtualApplications' => '',
     *       'loadBalancing' =>
     *  'WeightedRoundRobin|LeastRequests|LeastResponseTime|WeightedTotalTraffic|RequestHash',
     *       'experiments' => [
     *          'rampUpRules' => ''
     *       ],
     *       'limits' => [
     *          'maxPercentageCpu' => '',
     *          'maxMemoryInMb' => '',
     *          'maxDiskSizeInMb' => ''
     *       ],
     *       'autoHealEnabled' => 'false',
     *       'autoHealRules' => [
     *          'triggers' => [
     *             'requests' => [
     *                'count' => '',
     *                'timeInterval' => ''
     *             ],
     *             'privateBytesInKB' => '',
     *             'statusCodes' => '',
     *             'slowRequests' => [
     *                'timeTaken' => '',
     *                'count' => '',
     *                'timeInterval' => ''
     *             ]
     *          ],
     *          'actions' => [
     *             'actionType' => 'Recycle|LogEvent|CustomAction',
     *             'customAction' => [
     *                'exe' => '',
     *                'parameters' => ''
     *             ],
     *             'minProcessExecutionTime' => ''
     *          ]
     *       ],
     *       'tracingOptions' => '',
     *       'vnetName' => '',
     *       'cors' => [
     *          'allowedOrigins' => ''
     *       ],
     *       'apiDefinition' => [
     *          'url' => ''
     *       ],
     *       'autoSwapSlotName' => '',
     *       'localMySqlEnabled' => 'false',
     *       'ipSecurityRestrictions' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteConfigSlotAsync($resourceGroupName, $name, array $siteConfig, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteConfig == null) {
            Validate::notNullOrEmpty($siteConfig, '$siteConfig');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteConfig);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function getSiteSourceControl($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteSourceControlAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteSourceControlAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteSourceControl Request body that contains the source control parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteSourceControl($resourceGroupName, $name, array $siteSourceControl, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteSourceControlAsync($resourceGroupName, $name, $siteSourceControl, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteSourceControl Request body that contains the source control parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteSourceControlAsync($resourceGroupName, $name, array $siteSourceControl, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteSourceControl == null) {
            Validate::notNullOrEmpty($siteSourceControl, '$siteSourceControl');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteSourceControl);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteSourceControl($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->deleteSiteSourceControlAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteSourceControlAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteSourceControl Request body that contains the source control parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteSourceControl($resourceGroupName, $name, array $siteSourceControl, array $customHeaders = [])
    {
        $response = $this->updateSiteSourceControlAsync($resourceGroupName, $name, $siteSourceControl, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteSourceControl Request body that contains the source control parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteSourceControlAsync($resourceGroupName, $name, array $siteSourceControl, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteSourceControl == null) {
            Validate::notNullOrEmpty($siteSourceControl, '$siteSourceControl');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteSourceControl);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function getSiteSourceControlSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteSourceControlSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteSourceControlSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteSourceControl Request body that contains the source control parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteSourceControlSlot($resourceGroupName, $name, array $siteSourceControl, $slot, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteSourceControlSlotAsync($resourceGroupName, $name, $siteSourceControl, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteSourceControl Request body that contains the source control parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteSourceControlSlotAsync($resourceGroupName, $name, array $siteSourceControl, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteSourceControl == null) {
            Validate::notNullOrEmpty($siteSourceControl, '$siteSourceControl');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteSourceControl);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteSourceControlSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->deleteSiteSourceControlSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteSourceControlSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteSourceControl Request body that contains the source control parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteSourceControlSlot($resourceGroupName, $name, array $siteSourceControl, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteSourceControlSlotAsync($resourceGroupName, $name, $siteSourceControl, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the source control configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteSourceControl Request body that contains the source control parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'repoUrl' => '',
     *       'branch' => '',
     *       'isManualIntegration' => 'false',
     *       'deploymentRollbackEnabled' => 'false',
     *       'isMercurial' => 'false'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteSourceControlSlotAsync($resourceGroupName, $name, array $siteSourceControl, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteSourceControl == null) {
            Validate::notNullOrEmpty($siteSourceControl, '$siteSourceControl');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteSourceControl);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the application settings of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function listSiteAppSettingsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->listSiteAppSettingsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the application settings of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteAppSettingsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the application settings of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function listSiteAppSettings($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->listSiteAppSettingsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the application settings of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteAppSettingsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the application settings of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $appSettings Application settings of web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function updateSiteAppSettings($resourceGroupName, $name, array $appSettings, array $customHeaders = [])
    {
        $response = $this->updateSiteAppSettingsAsync($resourceGroupName, $name, $appSettings, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the application settings of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $appSettings Application settings of web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteAppSettingsAsync($resourceGroupName, $name, array $appSettings, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($appSettings == null) {
            Validate::notNullOrEmpty($appSettings, '$appSettings');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($appSettings);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the application settings of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $appSettings Application settings of web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function updateSiteAppSettingsSlot($resourceGroupName, $name, array $appSettings, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteAppSettingsSlotAsync($resourceGroupName, $name, $appSettings, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the application settings of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $appSettings Application settings of web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteAppSettingsSlotAsync($resourceGroupName, $name, array $appSettings, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($appSettings == null) {
            Validate::notNullOrEmpty($appSettings, '$appSettings');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($appSettings);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the connection strings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function listSiteConnectionStrings($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->listSiteConnectionStringsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the connection strings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteConnectionStringsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the connection strings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function listSiteConnectionStringsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->listSiteConnectionStringsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the connection strings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteConnectionStringsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the connection strings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $connectionStrings Connection strings associated with web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function updateSiteConnectionStrings($resourceGroupName, $name, array $connectionStrings, array $customHeaders = [])
    {
        $response = $this->updateSiteConnectionStringsAsync($resourceGroupName, $name, $connectionStrings, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the connection strings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $connectionStrings Connection strings associated with web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteConnectionStringsAsync($resourceGroupName, $name, array $connectionStrings, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($connectionStrings == null) {
            Validate::notNullOrEmpty($connectionStrings, '$connectionStrings');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionStrings);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the connection strings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $connectionStrings Connection strings associated with web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function updateSiteConnectionStringsSlot($resourceGroupName, $name, array $connectionStrings, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteConnectionStringsSlotAsync($resourceGroupName, $name, $connectionStrings, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the connection strings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $connectionStrings Connection strings associated with web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteConnectionStringsSlotAsync($resourceGroupName, $name, array $connectionStrings, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($connectionStrings == null) {
            Validate::notNullOrEmpty($connectionStrings, '$connectionStrings');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionStrings);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'enabled' => 'false',
     *    'httpApiPrefixPath' => '',
     *    'unauthenticatedClientAction' => 'RedirectToLoginPage|AllowAnonymous',
     *    'tokenStoreEnabled' => 'false',
     *    'allowedExternalRedirectUrls' => '',
     *    'defaultProvider' => 'AzureActiveDirectory|Facebook|Google|MicrosoftAccount|Twitter',
     *    'tokenRefreshExtensionHours' => '',
     *    'clientId' => '',
     *    'clientSecret' => '',
     *    'issuer' => '',
     *    'allowedAudiences' => '',
     *    'additionalLoginParams' => '',
     *    'aadClientId' => '',
     *    'openIdIssuer' => '',
     *    'googleClientId' => '',
     *    'googleClientSecret' => '',
     *    'googleOAuthScopes' => '',
     *    'facebookAppId' => '',
     *    'facebookAppSecret' => '',
     *    'facebookOAuthScopes' => '',
     *    'twitterConsumerKey' => '',
     *    'twitterConsumerSecret' => '',
     *    'microsoftAccountClientId' => '',
     *    'microsoftAccountClientSecret' => '',
     *    'microsoftAccountOAuthScopes' => ''
     * ];
     * </pre>
     */
    public function listSiteAuthSettings($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->listSiteAuthSettingsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteAuthSettingsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'enabled' => 'false',
     *    'httpApiPrefixPath' => '',
     *    'unauthenticatedClientAction' => 'RedirectToLoginPage|AllowAnonymous',
     *    'tokenStoreEnabled' => 'false',
     *    'allowedExternalRedirectUrls' => '',
     *    'defaultProvider' => 'AzureActiveDirectory|Facebook|Google|MicrosoftAccount|Twitter',
     *    'tokenRefreshExtensionHours' => '',
     *    'clientId' => '',
     *    'clientSecret' => '',
     *    'issuer' => '',
     *    'allowedAudiences' => '',
     *    'additionalLoginParams' => '',
     *    'aadClientId' => '',
     *    'openIdIssuer' => '',
     *    'googleClientId' => '',
     *    'googleClientSecret' => '',
     *    'googleOAuthScopes' => '',
     *    'facebookAppId' => '',
     *    'facebookAppSecret' => '',
     *    'facebookOAuthScopes' => '',
     *    'twitterConsumerKey' => '',
     *    'twitterConsumerSecret' => '',
     *    'microsoftAccountClientId' => '',
     *    'microsoftAccountClientSecret' => '',
     *    'microsoftAccountOAuthScopes' => ''
     * ];
     * </pre>
     */
    public function listSiteAuthSettingsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->listSiteAuthSettingsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteAuthSettingsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteAuthSettings Auth settings associated with web app 
     * <pre>
     * [
     *    'enabled' => 'false',
     *    'httpApiPrefixPath' => '',
     *    'unauthenticatedClientAction' => 'RedirectToLoginPage|AllowAnonymous',
     *    'tokenStoreEnabled' => 'false',
     *    'allowedExternalRedirectUrls' => '',
     *    'defaultProvider' => 'AzureActiveDirectory|Facebook|Google|MicrosoftAccount|Twitter',
     *    'tokenRefreshExtensionHours' => '',
     *    'clientId' => '',
     *    'clientSecret' => '',
     *    'issuer' => '',
     *    'allowedAudiences' => '',
     *    'additionalLoginParams' => '',
     *    'aadClientId' => '',
     *    'openIdIssuer' => '',
     *    'googleClientId' => '',
     *    'googleClientSecret' => '',
     *    'googleOAuthScopes' => '',
     *    'facebookAppId' => '',
     *    'facebookAppSecret' => '',
     *    'facebookOAuthScopes' => '',
     *    'twitterConsumerKey' => '',
     *    'twitterConsumerSecret' => '',
     *    'microsoftAccountClientId' => '',
     *    'microsoftAccountClientSecret' => '',
     *    'microsoftAccountOAuthScopes' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'enabled' => 'false',
     *    'httpApiPrefixPath' => '',
     *    'unauthenticatedClientAction' => 'RedirectToLoginPage|AllowAnonymous',
     *    'tokenStoreEnabled' => 'false',
     *    'allowedExternalRedirectUrls' => '',
     *    'defaultProvider' => 'AzureActiveDirectory|Facebook|Google|MicrosoftAccount|Twitter',
     *    'tokenRefreshExtensionHours' => '',
     *    'clientId' => '',
     *    'clientSecret' => '',
     *    'issuer' => '',
     *    'allowedAudiences' => '',
     *    'additionalLoginParams' => '',
     *    'aadClientId' => '',
     *    'openIdIssuer' => '',
     *    'googleClientId' => '',
     *    'googleClientSecret' => '',
     *    'googleOAuthScopes' => '',
     *    'facebookAppId' => '',
     *    'facebookAppSecret' => '',
     *    'facebookOAuthScopes' => '',
     *    'twitterConsumerKey' => '',
     *    'twitterConsumerSecret' => '',
     *    'microsoftAccountClientId' => '',
     *    'microsoftAccountClientSecret' => '',
     *    'microsoftAccountOAuthScopes' => ''
     * ];
     * </pre>
     */
    public function updateSiteAuthSettings($resourceGroupName, $name, array $siteAuthSettings, array $customHeaders = [])
    {
        $response = $this->updateSiteAuthSettingsAsync($resourceGroupName, $name, $siteAuthSettings, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteAuthSettings Auth settings associated with web app 
     * <pre>
     * [
     *    'enabled' => 'false',
     *    'httpApiPrefixPath' => '',
     *    'unauthenticatedClientAction' => 'RedirectToLoginPage|AllowAnonymous',
     *    'tokenStoreEnabled' => 'false',
     *    'allowedExternalRedirectUrls' => '',
     *    'defaultProvider' => 'AzureActiveDirectory|Facebook|Google|MicrosoftAccount|Twitter',
     *    'tokenRefreshExtensionHours' => '',
     *    'clientId' => '',
     *    'clientSecret' => '',
     *    'issuer' => '',
     *    'allowedAudiences' => '',
     *    'additionalLoginParams' => '',
     *    'aadClientId' => '',
     *    'openIdIssuer' => '',
     *    'googleClientId' => '',
     *    'googleClientSecret' => '',
     *    'googleOAuthScopes' => '',
     *    'facebookAppId' => '',
     *    'facebookAppSecret' => '',
     *    'facebookOAuthScopes' => '',
     *    'twitterConsumerKey' => '',
     *    'twitterConsumerSecret' => '',
     *    'microsoftAccountClientId' => '',
     *    'microsoftAccountClientSecret' => '',
     *    'microsoftAccountOAuthScopes' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteAuthSettingsAsync($resourceGroupName, $name, array $siteAuthSettings, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteAuthSettings == null) {
            Validate::notNullOrEmpty($siteAuthSettings, '$siteAuthSettings');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteAuthSettings);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteAuthSettings Auth settings associated with web app 
     * <pre>
     * [
     *    'enabled' => 'false',
     *    'httpApiPrefixPath' => '',
     *    'unauthenticatedClientAction' => 'RedirectToLoginPage|AllowAnonymous',
     *    'tokenStoreEnabled' => 'false',
     *    'allowedExternalRedirectUrls' => '',
     *    'defaultProvider' => 'AzureActiveDirectory|Facebook|Google|MicrosoftAccount|Twitter',
     *    'tokenRefreshExtensionHours' => '',
     *    'clientId' => '',
     *    'clientSecret' => '',
     *    'issuer' => '',
     *    'allowedAudiences' => '',
     *    'additionalLoginParams' => '',
     *    'aadClientId' => '',
     *    'openIdIssuer' => '',
     *    'googleClientId' => '',
     *    'googleClientSecret' => '',
     *    'googleOAuthScopes' => '',
     *    'facebookAppId' => '',
     *    'facebookAppSecret' => '',
     *    'facebookOAuthScopes' => '',
     *    'twitterConsumerKey' => '',
     *    'twitterConsumerSecret' => '',
     *    'microsoftAccountClientId' => '',
     *    'microsoftAccountClientSecret' => '',
     *    'microsoftAccountOAuthScopes' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'enabled' => 'false',
     *    'httpApiPrefixPath' => '',
     *    'unauthenticatedClientAction' => 'RedirectToLoginPage|AllowAnonymous',
     *    'tokenStoreEnabled' => 'false',
     *    'allowedExternalRedirectUrls' => '',
     *    'defaultProvider' => 'AzureActiveDirectory|Facebook|Google|MicrosoftAccount|Twitter',
     *    'tokenRefreshExtensionHours' => '',
     *    'clientId' => '',
     *    'clientSecret' => '',
     *    'issuer' => '',
     *    'allowedAudiences' => '',
     *    'additionalLoginParams' => '',
     *    'aadClientId' => '',
     *    'openIdIssuer' => '',
     *    'googleClientId' => '',
     *    'googleClientSecret' => '',
     *    'googleOAuthScopes' => '',
     *    'facebookAppId' => '',
     *    'facebookAppSecret' => '',
     *    'facebookOAuthScopes' => '',
     *    'twitterConsumerKey' => '',
     *    'twitterConsumerSecret' => '',
     *    'microsoftAccountClientId' => '',
     *    'microsoftAccountClientSecret' => '',
     *    'microsoftAccountOAuthScopes' => ''
     * ];
     * </pre>
     */
    public function updateSiteAuthSettingsSlot($resourceGroupName, $name, array $siteAuthSettings, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteAuthSettingsSlotAsync($resourceGroupName, $name, $siteAuthSettings, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteAuthSettings Auth settings associated with web app 
     * <pre>
     * [
     *    'enabled' => 'false',
     *    'httpApiPrefixPath' => '',
     *    'unauthenticatedClientAction' => 'RedirectToLoginPage|AllowAnonymous',
     *    'tokenStoreEnabled' => 'false',
     *    'allowedExternalRedirectUrls' => '',
     *    'defaultProvider' => 'AzureActiveDirectory|Facebook|Google|MicrosoftAccount|Twitter',
     *    'tokenRefreshExtensionHours' => '',
     *    'clientId' => '',
     *    'clientSecret' => '',
     *    'issuer' => '',
     *    'allowedAudiences' => '',
     *    'additionalLoginParams' => '',
     *    'aadClientId' => '',
     *    'openIdIssuer' => '',
     *    'googleClientId' => '',
     *    'googleClientSecret' => '',
     *    'googleOAuthScopes' => '',
     *    'facebookAppId' => '',
     *    'facebookAppSecret' => '',
     *    'facebookOAuthScopes' => '',
     *    'twitterConsumerKey' => '',
     *    'twitterConsumerSecret' => '',
     *    'microsoftAccountClientId' => '',
     *    'microsoftAccountClientSecret' => '',
     *    'microsoftAccountOAuthScopes' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteAuthSettingsSlotAsync($resourceGroupName, $name, array $siteAuthSettings, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteAuthSettings == null) {
            Validate::notNullOrEmpty($siteAuthSettings, '$siteAuthSettings');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteAuthSettings);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the web app publishing credentials
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'publishingUserName' => '',
     *       'publishingPassword' => '',
     *       'scmUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function listSitePublishingCredentials($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->beginlistSitePublishingCredentialsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web app publishing credentials
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'publishingUserName' => '',
     *       'publishingPassword' => '',
     *       'scmUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginListSitePublishingCredentials($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->beginListSitePublishingCredentialsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web app publishing credentials
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginListSitePublishingCredentialsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the web app publishing credentials
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'publishingUserName' => '',
     *       'publishingPassword' => '',
     *       'scmUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function listSitePublishingCredentialsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->beginlistSitePublishingCredentialsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web app publishing credentials
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'publishingUserName' => '',
     *       'publishingPassword' => '',
     *       'scmUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginListSitePublishingCredentialsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->beginListSitePublishingCredentialsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web app publishing credentials
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginListSitePublishingCredentialsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the web app meta data.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function listSiteMetadata($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->listSiteMetadataAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web app meta data.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteMetadataAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the web app meta data.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function listSiteMetadataSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->listSiteMetadataSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web app meta data.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteMetadataSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the meta data for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $metadata Meta data of web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function updateSiteMetadata($resourceGroupName, $name, array $metadata, array $customHeaders = [])
    {
        $response = $this->updateSiteMetadataAsync($resourceGroupName, $name, $metadata, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the meta data for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $metadata Meta data of web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteMetadataAsync($resourceGroupName, $name, array $metadata, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($metadata == null) {
            Validate::notNullOrEmpty($metadata, '$metadata');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($metadata);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the meta data for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $metadata Meta data of web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     */
    public function updateSiteMetadataSlot($resourceGroupName, $name, array $metadata, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteMetadataSlotAsync($resourceGroupName, $name, $metadata, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the meta data for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $metadata Meta data of web app 
     * <pre>
     * [
     *    'properties' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteMetadataSlotAsync($resourceGroupName, $name, array $metadata, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($metadata == null) {
            Validate::notNullOrEmpty($metadata, '$metadata');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($metadata);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the web app logs configuration
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'applicationLogs' => [
     *          'fileSystem' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error'
     *          ],
     *          'azureTableStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => ''
     *          ],
     *          'azureBlobStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => '',
     *             'retentionInDays' => ''
     *          ]
     *       ],
     *       'httpLogs' => [
     *          'fileSystem' => [
     *             'retentionInMb' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ],
     *          'azureBlobStorage' => [
     *             'sasUrl' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ]
     *       ],
     *       'failedRequestsTracing' => [
     *          'enabled' => 'false'
     *       ],
     *       'detailedErrorMessages' => [
     *          'enabled' => 'false'
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function getSiteLogsConfig($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteLogsConfigAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web app logs configuration
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteLogsConfigAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the meta data for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteLogsConfig Site logs configuration 
     * <pre>
     * [
     *    'properties' => [
     *       'applicationLogs' => [
     *          'fileSystem' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error'
     *          ],
     *          'azureTableStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => ''
     *          ],
     *          'azureBlobStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => '',
     *             'retentionInDays' => ''
     *          ]
     *       ],
     *       'httpLogs' => [
     *          'fileSystem' => [
     *             'retentionInMb' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ],
     *          'azureBlobStorage' => [
     *             'sasUrl' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ]
     *       ],
     *       'failedRequestsTracing' => [
     *          'enabled' => 'false'
     *       ],
     *       'detailedErrorMessages' => [
     *          'enabled' => 'false'
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'applicationLogs' => [
     *          'fileSystem' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error'
     *          ],
     *          'azureTableStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => ''
     *          ],
     *          'azureBlobStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => '',
     *             'retentionInDays' => ''
     *          ]
     *       ],
     *       'httpLogs' => [
     *          'fileSystem' => [
     *             'retentionInMb' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ],
     *          'azureBlobStorage' => [
     *             'sasUrl' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ]
     *       ],
     *       'failedRequestsTracing' => [
     *          'enabled' => 'false'
     *       ],
     *       'detailedErrorMessages' => [
     *          'enabled' => 'false'
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteLogsConfig($resourceGroupName, $name, array $siteLogsConfig, array $customHeaders = [])
    {
        $response = $this->updateSiteLogsConfigAsync($resourceGroupName, $name, $siteLogsConfig, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the meta data for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteLogsConfig Site logs configuration 
     * <pre>
     * [
     *    'properties' => [
     *       'applicationLogs' => [
     *          'fileSystem' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error'
     *          ],
     *          'azureTableStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => ''
     *          ],
     *          'azureBlobStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => '',
     *             'retentionInDays' => ''
     *          ]
     *       ],
     *       'httpLogs' => [
     *          'fileSystem' => [
     *             'retentionInMb' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ],
     *          'azureBlobStorage' => [
     *             'sasUrl' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ]
     *       ],
     *       'failedRequestsTracing' => [
     *          'enabled' => 'false'
     *       ],
     *       'detailedErrorMessages' => [
     *          'enabled' => 'false'
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteLogsConfigAsync($resourceGroupName, $name, array $siteLogsConfig, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteLogsConfig == null) {
            Validate::notNullOrEmpty($siteLogsConfig, '$siteLogsConfig');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteLogsConfig);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the web app logs configuration
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'applicationLogs' => [
     *          'fileSystem' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error'
     *          ],
     *          'azureTableStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => ''
     *          ],
     *          'azureBlobStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => '',
     *             'retentionInDays' => ''
     *          ]
     *       ],
     *       'httpLogs' => [
     *          'fileSystem' => [
     *             'retentionInMb' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ],
     *          'azureBlobStorage' => [
     *             'sasUrl' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ]
     *       ],
     *       'failedRequestsTracing' => [
     *          'enabled' => 'false'
     *       ],
     *       'detailedErrorMessages' => [
     *          'enabled' => 'false'
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function getSiteLogsConfigSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteLogsConfigSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the web app logs configuration
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteLogsConfigSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the meta data for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteLogsConfig Site logs configuration 
     * <pre>
     * [
     *    'properties' => [
     *       'applicationLogs' => [
     *          'fileSystem' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error'
     *          ],
     *          'azureTableStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => ''
     *          ],
     *          'azureBlobStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => '',
     *             'retentionInDays' => ''
     *          ]
     *       ],
     *       'httpLogs' => [
     *          'fileSystem' => [
     *             'retentionInMb' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ],
     *          'azureBlobStorage' => [
     *             'sasUrl' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ]
     *       ],
     *       'failedRequestsTracing' => [
     *          'enabled' => 'false'
     *       ],
     *       'detailedErrorMessages' => [
     *          'enabled' => 'false'
     *       ]
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'applicationLogs' => [
     *          'fileSystem' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error'
     *          ],
     *          'azureTableStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => ''
     *          ],
     *          'azureBlobStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => '',
     *             'retentionInDays' => ''
     *          ]
     *       ],
     *       'httpLogs' => [
     *          'fileSystem' => [
     *             'retentionInMb' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ],
     *          'azureBlobStorage' => [
     *             'sasUrl' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ]
     *       ],
     *       'failedRequestsTracing' => [
     *          'enabled' => 'false'
     *       ],
     *       'detailedErrorMessages' => [
     *          'enabled' => 'false'
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteLogsConfigSlot($resourceGroupName, $name, array $siteLogsConfig, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteLogsConfigSlotAsync($resourceGroupName, $name, $siteLogsConfig, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the meta data for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $siteLogsConfig Site logs configuration 
     * <pre>
     * [
     *    'properties' => [
     *       'applicationLogs' => [
     *          'fileSystem' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error'
     *          ],
     *          'azureTableStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => ''
     *          ],
     *          'azureBlobStorage' => [
     *             'level' => 'Off|Verbose|Information|Warning|Error',
     *             'sasUrl' => '',
     *             'retentionInDays' => ''
     *          ]
     *       ],
     *       'httpLogs' => [
     *          'fileSystem' => [
     *             'retentionInMb' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ],
     *          'azureBlobStorage' => [
     *             'sasUrl' => '',
     *             'retentionInDays' => '',
     *             'enabled' => 'false'
     *          ]
     *       ],
     *       'failedRequestsTracing' => [
     *          'enabled' => 'false'
     *       ],
     *       'detailedErrorMessages' => [
     *          'enabled' => 'false'
     *       ]
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteLogsConfigSlotAsync($resourceGroupName, $name, array $siteLogsConfig, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($siteLogsConfig == null) {
            Validate::notNullOrEmpty($siteLogsConfig, '$siteLogsConfig');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($siteLogsConfig);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function listSitePremierAddOns($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->listSitePremierAddOnsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSitePremierAddOnsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function listSitePremierAddOnsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->listSitePremierAddOnsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSitePremierAddOnsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getSitePremierAddOn($resourceGroupName, $name, $premierAddOnName, array $customHeaders = [])
    {
        $response = $this->getSitePremierAddOnAsync($resourceGroupName, $name, $premierAddOnName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSitePremierAddOnAsync($resourceGroupName, $name, $premierAddOnName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($premierAddOnName == null) {
            Validate::notNullOrEmpty($premierAddOnName, '$premierAddOnName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{premierAddOnName}' => $premierAddOnName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param array $premierAddOn  
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => '',
     *       'version' => ''
     *    ],
     *    'properties' => '',
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function addSitePremierAddOn($resourceGroupName, $name, $premierAddOnName, array $premierAddOn, array $customHeaders = [])
    {
        $response = $this->addSitePremierAddOnAsync($resourceGroupName, $name, $premierAddOnName, $premierAddOn, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param array $premierAddOn  
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => '',
     *       'version' => ''
     *    ],
     *    'properties' => '',
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function addSitePremierAddOnAsync($resourceGroupName, $name, $premierAddOnName, array $premierAddOn, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($premierAddOnName == null) {
            Validate::notNullOrEmpty($premierAddOnName, '$premierAddOnName');
        }
        if ($premierAddOn == null) {
            Validate::notNullOrEmpty($premierAddOn, '$premierAddOn');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{premierAddOnName}' => $premierAddOnName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($premierAddOn);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSitePremierAddOn($resourceGroupName, $name, $premierAddOnName, array $customHeaders = [])
    {
        $response = $this->deleteSitePremierAddOnAsync($resourceGroupName, $name, $premierAddOnName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSitePremierAddOnAsync($resourceGroupName, $name, $premierAddOnName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($premierAddOnName == null) {
            Validate::notNullOrEmpty($premierAddOnName, '$premierAddOnName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{premierAddOnName}' => $premierAddOnName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function getSitePremierAddOnSlot($resourceGroupName, $name, $premierAddOnName, $slot, array $customHeaders = [])
    {
        $response = $this->getSitePremierAddOnSlotAsync($resourceGroupName, $name, $premierAddOnName, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSitePremierAddOnSlotAsync($resourceGroupName, $name, $premierAddOnName, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($premierAddOnName == null) {
            Validate::notNullOrEmpty($premierAddOnName, '$premierAddOnName');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{premierAddOnName}' => $premierAddOnName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param array $premierAddOn  
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => '',
     *       'version' => ''
     *    ],
     *    'properties' => '',
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function addSitePremierAddOnSlot($resourceGroupName, $name, $premierAddOnName, array $premierAddOn, $slot, array $customHeaders = [])
    {
        $response = $this->addSitePremierAddOnSlotAsync($resourceGroupName, $name, $premierAddOnName, $premierAddOn, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param array $premierAddOn  
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => '',
     *       'version' => ''
     *    ],
     *    'properties' => '',
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'size' => '',
     *       'family' => '',
     *       'capacity' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function addSitePremierAddOnSlotAsync($resourceGroupName, $name, $premierAddOnName, array $premierAddOn, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($premierAddOnName == null) {
            Validate::notNullOrEmpty($premierAddOnName, '$premierAddOnName');
        }
        if ($premierAddOn == null) {
            Validate::notNullOrEmpty($premierAddOn, '$premierAddOn');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{premierAddOnName}' => $premierAddOnName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($premierAddOn);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSitePremierAddOnSlot($resourceGroupName, $name, $premierAddOnName, $slot, array $customHeaders = [])
    {
        $response = $this->deleteSitePremierAddOnSlotAsync($resourceGroupName, $name, $premierAddOnName, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $premierAddOnName
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSitePremierAddOnSlotAsync($resourceGroupName, $name, $premierAddOnName, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($premierAddOnName == null) {
            Validate::notNullOrEmpty($premierAddOnName, '$premierAddOnName');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{premierAddOnName}' => $premierAddOnName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the backup configuration for a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     */
    public function getSiteBackupConfiguration($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteBackupConfigurationAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the backup configuration for a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteBackupConfigurationAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the backup configuration for a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     */
    public function getSiteBackupConfigurationSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteBackupConfigurationSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the backup configuration for a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteBackupConfigurationSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates backup configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteBackupConfiguration($resourceGroupName, $name, array $request, array $customHeaders = [])
    {
        $response = $this->updateSiteBackupConfigurationAsync($resourceGroupName, $name, $request, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates backup configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteBackupConfigurationAsync($resourceGroupName, $name, array $request, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates backup configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteBackupConfigurationSlot($resourceGroupName, $name, array $request, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteBackupConfigurationSlotAsync($resourceGroupName, $name, $request, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates backup configuration of web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteBackupConfigurationSlotAsync($resourceGroupName, $name, array $request, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates web app backup
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'name' => '',
     *       'status' =>
     *  'InProgress|Failed|Succeeded|TimedOut|Created|Skipped|PartiallySucceeded|DeleteInProgress|DeleteFailed|Deleted',
     *       'sizeInBytes' => '',
     *       'created' => '',
     *       'log' => '',
     *       'databases' => '',
     *       'scheduled' => 'false',
     *       'lastRestoreTimeStamp' => '',
     *       'finishedTimeStamp' => '',
     *       'correlationId' => '',
     *       'websiteSizeInBytes' => ''
     *    ]
     * ];
     * </pre>
     */
    public function backupSite($resourceGroupName, $name, array $request, array $customHeaders = [])
    {
        $response = $this->backupSiteAsync($resourceGroupName, $name, $request, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates web app backup
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function backupSiteAsync($resourceGroupName, $name, array $request, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates web app backup
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'name' => '',
     *       'status' =>
     *  'InProgress|Failed|Succeeded|TimedOut|Created|Skipped|PartiallySucceeded|DeleteInProgress|DeleteFailed|Deleted',
     *       'sizeInBytes' => '',
     *       'created' => '',
     *       'log' => '',
     *       'databases' => '',
     *       'scheduled' => 'false',
     *       'lastRestoreTimeStamp' => '',
     *       'finishedTimeStamp' => '',
     *       'correlationId' => '',
     *       'websiteSizeInBytes' => ''
     *    ]
     * ];
     * </pre>
     */
    public function backupSiteSlot($resourceGroupName, $name, array $request, $slot, array $customHeaders = [])
    {
        $response = $this->backupSiteSlotAsync($resourceGroupName, $name, $request, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates web app backup
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function backupSiteSlotAsync($resourceGroupName, $name, array $request, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Discovers existing web app backups that can be restored
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     */
    public function discoverSiteRestore($resourceGroupName, $name, array $request, array $customHeaders = [])
    {
        $response = $this->discoverSiteRestoreAsync($resourceGroupName, $name, $request, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Discovers existing web app backups that can be restored
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function discoverSiteRestoreAsync($resourceGroupName, $name, array $request, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Discovers existing web app backups that can be restored
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     */
    public function discoverSiteRestoreSlot($resourceGroupName, $name, array $request, $slot, array $customHeaders = [])
    {
        $response = $this->discoverSiteRestoreSlotAsync($resourceGroupName, $name, $request, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Discovers existing web app backups that can be restored
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function discoverSiteRestoreSlotAsync($resourceGroupName, $name, array $request, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all available backups for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listSiteBackups($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->listSiteBackupsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all available backups for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteBackupsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all available backups for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listSiteBackupsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->listSiteBackupsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all available backups for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteBackupsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'name' => '',
     *       'status' =>
     *  'InProgress|Failed|Succeeded|TimedOut|Created|Skipped|PartiallySucceeded|DeleteInProgress|DeleteFailed|Deleted',
     *       'sizeInBytes' => '',
     *       'created' => '',
     *       'log' => '',
     *       'databases' => '',
     *       'scheduled' => 'false',
     *       'lastRestoreTimeStamp' => '',
     *       'finishedTimeStamp' => '',
     *       'correlationId' => '',
     *       'websiteSizeInBytes' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteBackupStatus($resourceGroupName, $name, $backupId, array $customHeaders = [])
    {
        $response = $this->getSiteBackupStatusAsync($resourceGroupName, $name, $backupId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteBackupStatusAsync($resourceGroupName, $name, $backupId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($backupId == null) {
            Validate::notNullOrEmpty($backupId, '$backupId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{backupId}' => $backupId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a backup from Azure Storage
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'name' => '',
     *       'status' =>
     *  'InProgress|Failed|Succeeded|TimedOut|Created|Skipped|PartiallySucceeded|DeleteInProgress|DeleteFailed|Deleted',
     *       'sizeInBytes' => '',
     *       'created' => '',
     *       'log' => '',
     *       'databases' => '',
     *       'scheduled' => 'false',
     *       'lastRestoreTimeStamp' => '',
     *       'finishedTimeStamp' => '',
     *       'correlationId' => '',
     *       'websiteSizeInBytes' => ''
     *    ]
     * ];
     * </pre>
     */
    public function deleteBackup($resourceGroupName, $name, $backupId, array $customHeaders = [])
    {
        $response = $this->deleteBackupAsync($resourceGroupName, $name, $backupId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a backup from Azure Storage
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteBackupAsync($resourceGroupName, $name, $backupId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($backupId == null) {
            Validate::notNullOrEmpty($backupId, '$backupId');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{backupId}' => $backupId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'name' => '',
     *       'status' =>
     *  'InProgress|Failed|Succeeded|TimedOut|Created|Skipped|PartiallySucceeded|DeleteInProgress|DeleteFailed|Deleted',
     *       'sizeInBytes' => '',
     *       'created' => '',
     *       'log' => '',
     *       'databases' => '',
     *       'scheduled' => 'false',
     *       'lastRestoreTimeStamp' => '',
     *       'finishedTimeStamp' => '',
     *       'correlationId' => '',
     *       'websiteSizeInBytes' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteBackupStatusSlot($resourceGroupName, $name, $backupId, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteBackupStatusSlotAsync($resourceGroupName, $name, $backupId, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteBackupStatusSlotAsync($resourceGroupName, $name, $backupId, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($backupId == null) {
            Validate::notNullOrEmpty($backupId, '$backupId');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{backupId}' => $backupId, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a backup from Azure Storage
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'name' => '',
     *       'status' =>
     *  'InProgress|Failed|Succeeded|TimedOut|Created|Skipped|PartiallySucceeded|DeleteInProgress|DeleteFailed|Deleted',
     *       'sizeInBytes' => '',
     *       'created' => '',
     *       'log' => '',
     *       'databases' => '',
     *       'scheduled' => 'false',
     *       'lastRestoreTimeStamp' => '',
     *       'finishedTimeStamp' => '',
     *       'correlationId' => '',
     *       'websiteSizeInBytes' => ''
     *    ]
     * ];
     * </pre>
     */
    public function deleteBackupSlot($resourceGroupName, $name, $backupId, $slot, array $customHeaders = [])
    {
        $response = $this->deleteBackupSlotAsync($resourceGroupName, $name, $backupId, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a backup from Azure Storage
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteBackupSlotAsync($resourceGroupName, $name, $backupId, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($backupId == null) {
            Validate::notNullOrEmpty($backupId, '$backupId');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{backupId}' => $backupId, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets
     * associated with the backup, such as the Azure Storage SAS URL. Also can be
     * used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'name' => '',
     *       'status' =>
     *  'InProgress|Failed|Succeeded|TimedOut|Created|Skipped|PartiallySucceeded|DeleteInProgress|DeleteFailed|Deleted',
     *       'sizeInBytes' => '',
     *       'created' => '',
     *       'log' => '',
     *       'databases' => '',
     *       'scheduled' => 'false',
     *       'lastRestoreTimeStamp' => '',
     *       'finishedTimeStamp' => '',
     *       'correlationId' => '',
     *       'websiteSizeInBytes' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteBackupStatusSecretsSlot($resourceGroupName, $name, $backupId, array $request, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteBackupStatusSecretsSlotAsync($resourceGroupName, $name, $backupId, $request, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets
     * associated with the backup, such as the Azure Storage SAS URL. Also can be
     * used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteBackupStatusSecretsSlotAsync($resourceGroupName, $name, $backupId, array $request, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($backupId == null) {
            Validate::notNullOrEmpty($backupId, '$backupId');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{backupId}' => $backupId, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets
     * associated with the backup, such as the Azure Storage SAS URL. Also can be
     * used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'id' => '',
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'name' => '',
     *       'status' =>
     *  'InProgress|Failed|Succeeded|TimedOut|Created|Skipped|PartiallySucceeded|DeleteInProgress|DeleteFailed|Deleted',
     *       'sizeInBytes' => '',
     *       'created' => '',
     *       'log' => '',
     *       'databases' => '',
     *       'scheduled' => 'false',
     *       'lastRestoreTimeStamp' => '',
     *       'finishedTimeStamp' => '',
     *       'correlationId' => '',
     *       'websiteSizeInBytes' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteBackupStatusSecrets($resourceGroupName, $name, $backupId, array $request, array $customHeaders = [])
    {
        $response = $this->getSiteBackupStatusSecretsAsync($resourceGroupName, $name, $backupId, $request, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets
     * associated with the backup, such as the Azure Storage SAS URL. Also can be
     * used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup
     * @param array $request Information on backup request 
     * <pre>
     * [
     *    'properties' => [
     *       'name' => '',
     *       'enabled' => 'false',
     *       'storageAccountUrl' => '',
     *       'backupSchedule' => [
     *          'frequencyInterval' => '',
     *          'frequencyUnit' => 'Day|Hour',
     *          'keepAtLeastOneBackup' => 'false',
     *          'retentionPeriodInDays' => '',
     *          'startTime' => '',
     *          'lastExecutionTime' => ''
     *       ],
     *       'databases' => '',
     *       'type' => 'Default|Clone|Relocation'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteBackupStatusSecretsAsync($resourceGroupName, $name, $backupId, array $request, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($backupId == null) {
            Validate::notNullOrEmpty($backupId, '$backupId');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{backupId}' => $backupId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Restores a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup to restore
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'operationId' => ''
     *    ]
     * ];
     * </pre>
     */
    public function restoreSite($resourceGroupName, $name, $backupId, array $request, array $customHeaders = [])
    {
        $response = $this->beginrestoreSiteAsync($resourceGroupName, $name, $backupId, $request, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Restores a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup to restore
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'operationId' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginRestoreSite($resourceGroupName, $name, $backupId, array $request, array $customHeaders = [])
    {
        $response = $this->beginRestoreSiteAsync($resourceGroupName, $name, $backupId, $request, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Restores a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup to restore
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRestoreSiteAsync($resourceGroupName, $name, $backupId, array $request, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($backupId == null) {
            Validate::notNullOrEmpty($backupId, '$backupId');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{backupId}' => $backupId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Restores a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup to restore
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'operationId' => ''
     *    ]
     * ];
     * </pre>
     */
    public function restoreSiteSlot($resourceGroupName, $name, $backupId, array $request, $slot, array $customHeaders = [])
    {
        $response = $this->beginrestoreSiteSlotAsync($resourceGroupName, $name, $backupId, $request, $slot, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Restores a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup to restore
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'operationId' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginRestoreSiteSlot($resourceGroupName, $name, $backupId, array $request, $slot, array $customHeaders = [])
    {
        $response = $this->beginRestoreSiteSlotAsync($resourceGroupName, $name, $backupId, $request, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Restores a web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $backupId Id of backup to restore
     * @param array $request Information on restore request 
     * <pre>
     * [
     *    'properties' => [
     *       'storageAccountUrl' => '',
     *       'blobName' => '',
     *       'overwrite' => 'false',
     *       'siteName' => '',
     *       'databases' => '',
     *       'ignoreConflictingHostNames' => 'false',
     *       'operationType' => 'Default|Clone|Relocation',
     *       'adjustConnectionStrings' => 'false',
     *       'hostingEnvironment' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRestoreSiteSlotAsync($resourceGroupName, $name, $backupId, array $request, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($backupId == null) {
            Validate::notNullOrEmpty($backupId, '$backupId');
        }
        if ($request == null) {
            Validate::notNullOrEmpty($request, '$request');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{backupId}' => $backupId, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($request);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the quota usage numbers for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $filter Return only usages specified in the filter. Filter is
     * specified by using OData syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteUsages($resourceGroupName, $name, $filter = null, array $customHeaders = [])
    {
        $response = $this->getSiteUsagesAsync($resourceGroupName, $name, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the quota usage numbers for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $filter Return only usages specified in the filter. Filter is
     * specified by using OData syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteUsagesAsync($resourceGroupName, $name, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the quota usage numbers for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $filter Return only usages specified in the filter. Filter is
     * specified by using OData syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteUsagesSlot($resourceGroupName, $name, $slot, $filter = null, array $customHeaders = [])
    {
        $response = $this->getSiteUsagesSlotAsync($resourceGroupName, $name, $slot, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the quota usage numbers for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param string $filter Return only usages specified in the filter. Filter is
     * specified by using OData syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteUsagesSlotAsync($resourceGroupName, $name, $slot, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets metrics for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param bool $details If true, metric details are included in response
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteMetrics($resourceGroupName, $name, $details = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->getSiteMetricsAsync($resourceGroupName, $name, $details, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets metrics for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param bool $details If true, metric details are included in response
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteMetricsAsync($resourceGroupName, $name, $details = null, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['details' => $details, '$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets metrics for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param bool $details If true, metric details are included in response
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteMetricsSlot($resourceGroupName, $name, $slot, $details = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->getSiteMetricsSlotAsync($resourceGroupName, $name, $slot, $details, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets metrics for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param bool $details If true, metric details are included in response
     * @param string $filter Return only usages/metrics specified in the filter.
     * Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and
     * endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteMetricsSlotAsync($resourceGroupName, $name, $slot, $details = null, $filter = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['details' => $details, '$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets metric definitions for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteMetricDefinitionsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteMetricDefinitionsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets metric definitions for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteMetricDefinitionsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets metric definitions for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getSiteMetricDefinitions($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteMetricDefinitionsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets metric definitions for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteMetricDefinitionsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the publishing profile for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $options Specifies options for publishing profile. Pass
     *  CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format. 
     * <pre>
     * [
     *    'format' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function listSitePublishingProfileXml($resourceGroupName, $name, array $options, array $customHeaders = [])
    {
        $response = $this->listSitePublishingProfileXmlAsync($resourceGroupName, $name, $options, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the publishing profile for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $options Specifies options for publishing profile. Pass
     *  CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format. 
     * <pre>
     * [
     *    'format' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSitePublishingProfileXmlAsync($resourceGroupName, $name, array $options, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($options == null) {
            Validate::notNullOrEmpty($options, '$options');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($options);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the publishing profile for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $options Specifies options for publishing profile. Pass
     *  CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format. 
     * <pre>
     * [
     *    'format' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function listSitePublishingProfileXmlSlot($resourceGroupName, $name, array $options, $slot, array $customHeaders = [])
    {
        $response = $this->listSitePublishingProfileXmlSlotAsync($resourceGroupName, $name, $options, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the publishing profile for web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $options Specifies options for publishing profile. Pass
     *  CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format. 
     * <pre>
     * [
     *    'format' => ''
     * ];
     * </pre>
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSitePublishingProfileXmlSlotAsync($resourceGroupName, $name, array $options, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($options == null) {
            Validate::notNullOrEmpty($options, '$options');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($options);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Restarts web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param bool $softRestart Soft restart applies the configuration settings
     * and restarts the app if necessary. Hard restart always restarts and
     * reprovisions the app
     * @param bool $synchronous If true then the API will block until the app has
     * been restarted
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function restartSiteSlot($resourceGroupName, $name, $slot, $softRestart = null, $synchronous = null, array $customHeaders = [])
    {
        $response = $this->restartSiteSlotAsync($resourceGroupName, $name, $slot, $softRestart, $synchronous, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Restarts web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param bool $softRestart Soft restart applies the configuration settings
     * and restarts the app if necessary. Hard restart always restarts and
     * reprovisions the app
     * @param bool $synchronous If true then the API will block until the app has
     * been restarted
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function restartSiteSlotAsync($resourceGroupName, $name, $slot, $softRestart = null, $synchronous = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['softRestart' => $softRestart, 'synchronous' => $synchronous, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Restarts web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param bool $softRestart Soft restart applies the configuration settings
     * and restarts the app if necessary. Hard restart always restarts and
     * reprovisions the app
     * @param bool $synchronous If true then the API will block until the app has
     * been restarted
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function restartSite($resourceGroupName, $name, $softRestart = null, $synchronous = null, array $customHeaders = [])
    {
        $response = $this->restartSiteAsync($resourceGroupName, $name, $softRestart, $synchronous, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Restarts web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param bool $softRestart Soft restart applies the configuration settings
     * and restarts the app if necessary. Hard restart always restarts and
     * reprovisions the app
     * @param bool $synchronous If true then the API will block until the app has
     * been restarted
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function restartSiteAsync($resourceGroupName, $name, $softRestart = null, $synchronous = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['softRestart' => $softRestart, 'synchronous' => $synchronous, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Starts web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function startSite($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->startSiteAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Starts web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function startSiteAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Starts web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function startSiteSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->startSiteSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Starts web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function startSiteSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Stops web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function stopSite($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->stopSiteAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Stops web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function stopSiteAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Stops web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function stopSiteSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->stopSiteSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Stops web app
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function stopSiteSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function syncSiteRepository($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->syncSiteRepositoryAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function syncSiteRepositoryAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function syncSiteRepositorySlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->syncSiteRepositorySlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * @param string $resourceGroupName
     * @param string $name
     * @param string $slot
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function syncSiteRepositorySlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Generates new random app publishing password
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function generateNewSitePublishingPasswordSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->generateNewSitePublishingPasswordSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Generates new random app publishing password
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param string $slot Name of web app slot. If not specified then will
     * default to production slot.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function generateNewSitePublishingPasswordSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Generates new random app publishing password
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function generateNewSitePublishingPassword($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->generateNewSitePublishingPasswordAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Generates new random app publishing password
     *
     * @param string $resourceGroupName Name of resource group
     * @param string $name Name of web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function generateNewSitePublishingPasswordAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a Biztalk Hybrid Connection identified by its entity name.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteRelayServiceConnection($resourceGroupName, $name, $entityName, array $customHeaders = [])
    {
        $response = $this->getSiteRelayServiceConnectionAsync($resourceGroupName, $name, $entityName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a Biztalk Hybrid Connection identified by its entity name.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteRelayServiceConnectionAsync($resourceGroupName, $name, $entityName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($entityName == null) {
            Validate::notNullOrEmpty($entityName, '$entityName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{entityName}' => $entityName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new association to a Biztalk Hybrid Connection, or updates an
     * existing one.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $connectionEnvelope The details of the Hybrid Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteRelayServiceConnection($resourceGroupName, $name, $entityName, array $connectionEnvelope, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteRelayServiceConnectionAsync($resourceGroupName, $name, $entityName, $connectionEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new association to a Biztalk Hybrid Connection, or updates an
     * existing one.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $connectionEnvelope The details of the Hybrid Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteRelayServiceConnectionAsync($resourceGroupName, $name, $entityName, array $connectionEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($entityName == null) {
            Validate::notNullOrEmpty($entityName, '$entityName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{entityName}' => $entityName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Removes the association to a Biztalk Hybrid Connection, identified by its
     * entity name.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteRelayServiceConnection($resourceGroupName, $name, $entityName, array $customHeaders = [])
    {
        $response = $this->deleteSiteRelayServiceConnectionAsync($resourceGroupName, $name, $entityName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Removes the association to a Biztalk Hybrid Connection, identified by its
     * entity name.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteRelayServiceConnectionAsync($resourceGroupName, $name, $entityName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($entityName == null) {
            Validate::notNullOrEmpty($entityName, '$entityName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{entityName}' => $entityName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new association to a Biztalk Hybrid Connection, or updates an
     * existing one.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $connectionEnvelope The details of the Hybrid Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteRelayServiceConnection($resourceGroupName, $name, $entityName, array $connectionEnvelope, array $customHeaders = [])
    {
        $response = $this->updateSiteRelayServiceConnectionAsync($resourceGroupName, $name, $entityName, $connectionEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new association to a Biztalk Hybrid Connection, or updates an
     * existing one.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $connectionEnvelope The details of the Hybrid Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteRelayServiceConnectionAsync($resourceGroupName, $name, $entityName, array $connectionEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($entityName == null) {
            Validate::notNullOrEmpty($entityName, '$entityName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{entityName}' => $entityName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a Biztalk Hybrid Connection identified by its entity name.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getSiteRelayServiceConnectionSlot($resourceGroupName, $name, $entityName, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteRelayServiceConnectionSlotAsync($resourceGroupName, $name, $entityName, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a Biztalk Hybrid Connection identified by its entity name.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteRelayServiceConnectionSlotAsync($resourceGroupName, $name, $entityName, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($entityName == null) {
            Validate::notNullOrEmpty($entityName, '$entityName');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{entityName}' => $entityName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new association to a Biztalk Hybrid Connection, or updates an
     * existing one.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $connectionEnvelope The details of the Hybrid Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteRelayServiceConnectionSlot($resourceGroupName, $name, $entityName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteRelayServiceConnectionSlotAsync($resourceGroupName, $name, $entityName, $connectionEnvelope, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new association to a Biztalk Hybrid Connection, or updates an
     * existing one.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $connectionEnvelope The details of the Hybrid Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteRelayServiceConnectionSlotAsync($resourceGroupName, $name, $entityName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($entityName == null) {
            Validate::notNullOrEmpty($entityName, '$entityName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{entityName}' => $entityName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Removes the association to a Biztalk Hybrid Connection, identified by its
     * entity name.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteSiteRelayServiceConnectionSlot($resourceGroupName, $name, $entityName, $slot, array $customHeaders = [])
    {
        $response = $this->deleteSiteRelayServiceConnectionSlotAsync($resourceGroupName, $name, $entityName, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Removes the association to a Biztalk Hybrid Connection, identified by its
     * entity name.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSiteRelayServiceConnectionSlotAsync($resourceGroupName, $name, $entityName, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($entityName == null) {
            Validate::notNullOrEmpty($entityName, '$entityName');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{entityName}' => $entityName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new association to a Biztalk Hybrid Connection, or updates an
     * existing one.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $connectionEnvelope The details of the Hybrid Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteRelayServiceConnectionSlot($resourceGroupName, $name, $entityName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteRelayServiceConnectionSlotAsync($resourceGroupName, $name, $entityName, $connectionEnvelope, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new association to a Biztalk Hybrid Connection, or updates an
     * existing one.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $entityName The name by which the Hybrid Connection is
     * identified
     * @param array $connectionEnvelope The details of the Hybrid Connection 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteRelayServiceConnectionSlotAsync($resourceGroupName, $name, $entityName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($entityName == null) {
            Validate::notNullOrEmpty($entityName, '$entityName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{entityName}' => $entityName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves all Biztalk Hybrid Connections associated with this web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function listSiteRelayServiceConnectionsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->listSiteRelayServiceConnectionsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves all Biztalk Hybrid Connections associated with this web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $slot The name of the slot for the web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteRelayServiceConnectionsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves all Biztalk Hybrid Connections associated with this web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'entityName' => '',
     *       'entityConnectionString' => '',
     *       'resourceType' => '',
     *       'resourceConnectionString' => '',
     *       'hostname' => '',
     *       'port' => '',
     *       'biztalkUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function listSiteRelayServiceConnections($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->listSiteRelayServiceConnectionsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves all Biztalk Hybrid Connections associated with this web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSiteRelayServiceConnectionsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app
     * and virtual network.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * Empty array with resposne status NotFound(404).<br>
     */
    public function getSiteVnetGatewaySlot($resourceGroupName, $name, $vnetName, $gatewayName, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteVnetGatewaySlotAsync($resourceGroupName, $name, $vnetName, $gatewayName, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app
     * and virtual network.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteVnetGatewaySlotAsync($resourceGroupName, $name, $vnetName, $gatewayName, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}';
        $statusCodes = [200, 404];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{gatewayName}' => $gatewayName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $connectionEnvelope The properties to update this gateway with. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteVNETConnectionGatewaySlot($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteVNETConnectionGatewaySlotAsync($resourceGroupName, $name, $vnetName, $gatewayName, $connectionEnvelope, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $connectionEnvelope The properties to update this gateway with. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteVNETConnectionGatewaySlotAsync($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{gatewayName}' => $gatewayName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $connectionEnvelope The properties to update this gateway with. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteVNETConnectionGatewaySlot($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        $response = $this->updateSiteVNETConnectionGatewaySlotAsync($resourceGroupName, $name, $vnetName, $gatewayName, $connectionEnvelope, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $connectionEnvelope The properties to update this gateway with. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteVNETConnectionGatewaySlotAsync($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{gatewayName}' => $gatewayName, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app
     * and virtual network.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     * Empty array with resposne status NotFound(404).<br>
     */
    public function getSiteVnetGateway($resourceGroupName, $name, $vnetName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->getSiteVnetGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app
     * and virtual network.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteVnetGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}';
        $statusCodes = [200, 404];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{gatewayName}' => $gatewayName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $connectionEnvelope The properties to update this gateway with. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateSiteVNETConnectionGateway($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, array $customHeaders = [])
    {
        $response = $this->createOrUpdateSiteVNETConnectionGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, $connectionEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $connectionEnvelope The properties to update this gateway with. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateSiteVNETConnectionGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{gatewayName}' => $gatewayName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $connectionEnvelope The properties to update this gateway with. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateSiteVNETConnectionGateway($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, array $customHeaders = [])
    {
        $response = $this->updateSiteVNETConnectionGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, $connectionEnvelope, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $vnetName The name of the Virtual Network
     * @param string $gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * @param array $connectionEnvelope The properties to update this gateway with. 
     * <pre>
     * [
     *    'properties' => [
     *       'vnetName' => '',
     *       'vpnPackageUri' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSiteVNETConnectionGatewayAsync($resourceGroupName, $name, $vnetName, $gatewayName, array $connectionEnvelope, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($vnetName == null) {
            Validate::notNullOrEmpty($vnetName, '$vnetName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($connectionEnvelope == null) {
            Validate::notNullOrEmpty($connectionEnvelope, '$connectionEnvelope');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{vnetName}' => $vnetName, '{gatewayName}' => $gatewayName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($connectionEnvelope);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this
     * web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * )
     */
    public function getSiteVNETConnections($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getSiteVNETConnectionsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this
     * web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteVNETConnectionsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this
     * web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'vnetResourceId' => '',
     *       'certThumbprint' => '',
     *       'certBlob' => '',
     *       'routes' => '',
     *       'resyncRequired' => 'false',
     *       'dnsServers' => ''
     *    ]
     * ];
     * </pre>
     * )
     */
    public function getSiteVNETConnectionsSlot($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        $response = $this->getSiteVNETConnectionsSlotAsync($resourceGroupName, $name, $slot, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this
     * web app.
     *
     * @param string $resourceGroupName The resource group name
     * @param string $name The name of the web app
     * @param string $slot The name of the slot for this web app.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSiteVNETConnectionsSlotAsync($resourceGroupName, $name, $slot, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($slot == null) {
            Validate::notNullOrEmpty($slot, '$slot');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{slot}' => $slot, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
