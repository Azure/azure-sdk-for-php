<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-08-01
 */

namespace MicrosoftAzure\Arm\Web;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * CertificateOrders for Use these APIs to manage Azure Websites resources
 * through the Azure Resource Manager. All task operations conform to the
 * HTTP/1.1 protocol specification and each operation returns an
 * x-ms-request-id header that can be used to obtain information about the
 * request. You must make sure that requests made to these resources are
 * secure. For more information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class CertificateOrders
{
    /**
     * The service client object for the operations.
     *
     * @var WebSiteManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for CertificateOrders.
     *
     * @param WebSiteManagementClient, Service client for CertificateOrders
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Get certificate associated with the certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param string $name Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'keyVaultId' => '',
     *       'keyVaultSecretName' => '',
     *       'provisioningState' =>
     *  'Initialized|WaitingOnCertificateOrder|Succeeded|CertificateOrderFailed|OperationNotPermittedOnKeyVault|AzureServiceUnauthorizedToAccessKeyVault|KeyVaultDoesNotExist|KeyVaultSecretDoesNotExist|UnknownError|Unknown'
     *    ]
     * ];
     * </pre>
     */
    public function getCertificate($resourceGroupName, $certificateOrderName, $name, array $customHeaders = [])
    {
        $response = $this->getCertificateAsync($resourceGroupName, $certificateOrderName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get certificate associated with the certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param string $name Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCertificateAsync($resourceGroupName, $certificateOrderName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($certificateOrderName == null) {
            Validate::notNullOrEmpty($certificateOrderName, '$certificateOrderName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{certificateOrderName}' => $certificateOrderName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for
     * storing the certificate once it's ready
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param string $name Certificate name
     * @param array $keyVaultCertificate Key Vault secret csm Id 
     * <pre>
     * [
     *    'properties' => [
     *       'keyVaultId' => '',
     *       'keyVaultSecretName' => '',
     *       'provisioningState' =>
     *  'Initialized|WaitingOnCertificateOrder|Succeeded|CertificateOrderFailed|OperationNotPermittedOnKeyVault|AzureServiceUnauthorizedToAccessKeyVault|KeyVaultDoesNotExist|KeyVaultSecretDoesNotExist|UnknownError|Unknown'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'keyVaultId' => '',
     *       'keyVaultSecretName' => '',
     *       'provisioningState' =>
     *  'Initialized|WaitingOnCertificateOrder|Succeeded|CertificateOrderFailed|OperationNotPermittedOnKeyVault|AzureServiceUnauthorizedToAccessKeyVault|KeyVaultDoesNotExist|KeyVaultSecretDoesNotExist|UnknownError|Unknown'
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateCertificate($resourceGroupName, $certificateOrderName, $name, array $keyVaultCertificate, array $customHeaders = [])
    {
        $response = $this->createOrUpdateCertificateAsync($resourceGroupName, $certificateOrderName, $name, $keyVaultCertificate, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for
     * storing the certificate once it's ready
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param string $name Certificate name
     * @param array $keyVaultCertificate Key Vault secret csm Id 
     * <pre>
     * [
     *    'properties' => [
     *       'keyVaultId' => '',
     *       'keyVaultSecretName' => '',
     *       'provisioningState' =>
     *  'Initialized|WaitingOnCertificateOrder|Succeeded|CertificateOrderFailed|OperationNotPermittedOnKeyVault|AzureServiceUnauthorizedToAccessKeyVault|KeyVaultDoesNotExist|KeyVaultSecretDoesNotExist|UnknownError|Unknown'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateCertificateAsync($resourceGroupName, $certificateOrderName, $name, array $keyVaultCertificate, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($certificateOrderName == null) {
            Validate::notNullOrEmpty($certificateOrderName, '$certificateOrderName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($keyVaultCertificate == null) {
            Validate::notNullOrEmpty($keyVaultCertificate, '$keyVaultCertificate');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{certificateOrderName}' => $certificateOrderName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($keyVaultCertificate);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes the certificate associated with the certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param string $name Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteCertificate($resourceGroupName, $certificateOrderName, $name, array $customHeaders = [])
    {
        $response = $this->deleteCertificateAsync($resourceGroupName, $certificateOrderName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes the certificate associated with the certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param string $name Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteCertificateAsync($resourceGroupName, $certificateOrderName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($certificateOrderName == null) {
            Validate::notNullOrEmpty($certificateOrderName, '$certificateOrderName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{certificateOrderName}' => $certificateOrderName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for
     * storing the certificate once it's ready
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param string $name Certificate name
     * @param array $keyVaultCertificate Key Vault secret csm Id 
     * <pre>
     * [
     *    'properties' => [
     *       'keyVaultId' => '',
     *       'keyVaultSecretName' => '',
     *       'provisioningState' =>
     *  'Initialized|WaitingOnCertificateOrder|Succeeded|CertificateOrderFailed|OperationNotPermittedOnKeyVault|AzureServiceUnauthorizedToAccessKeyVault|KeyVaultDoesNotExist|KeyVaultSecretDoesNotExist|UnknownError|Unknown'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'keyVaultId' => '',
     *       'keyVaultSecretName' => '',
     *       'provisioningState' =>
     *  'Initialized|WaitingOnCertificateOrder|Succeeded|CertificateOrderFailed|OperationNotPermittedOnKeyVault|AzureServiceUnauthorizedToAccessKeyVault|KeyVaultDoesNotExist|KeyVaultSecretDoesNotExist|UnknownError|Unknown'
     *    ]
     * ];
     * </pre>
     */
    public function updateCertificate($resourceGroupName, $certificateOrderName, $name, array $keyVaultCertificate, array $customHeaders = [])
    {
        $response = $this->updateCertificateAsync($resourceGroupName, $certificateOrderName, $name, $keyVaultCertificate, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for
     * storing the certificate once it's ready
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param string $name Certificate name
     * @param array $keyVaultCertificate Key Vault secret csm Id 
     * <pre>
     * [
     *    'properties' => [
     *       'keyVaultId' => '',
     *       'keyVaultSecretName' => '',
     *       'provisioningState' =>
     *  'Initialized|WaitingOnCertificateOrder|Succeeded|CertificateOrderFailed|OperationNotPermittedOnKeyVault|AzureServiceUnauthorizedToAccessKeyVault|KeyVaultDoesNotExist|KeyVaultSecretDoesNotExist|UnknownError|Unknown'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateCertificateAsync($resourceGroupName, $certificateOrderName, $name, array $keyVaultCertificate, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($certificateOrderName == null) {
            Validate::notNullOrEmpty($certificateOrderName, '$certificateOrderName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($keyVaultCertificate == null) {
            Validate::notNullOrEmpty($keyVaultCertificate, '$keyVaultCertificate');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{certificateOrderName}' => $certificateOrderName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($keyVaultCertificate);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get a certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'certificates' => '',
     *       'distinguishedName' => '',
     *       'domainVerificationToken' => '',
     *       'validityInYears' => '',
     *       'keySize' => '',
     *       'productType' => 'StandardDomainValidatedSsl|StandardDomainValidatedWildCardSsl',
     *       'autoRenew' => 'false',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' =>
     *  'Pendingissuance|Issued|Revoked|Canceled|Denied|Pendingrevocation|PendingRekey|Unused|Expired|NotSubmitted',
     *       'signedCertificate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'csr' => '',
     *       'intermediate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'root' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'serialNumber' => '',
     *       'lastCertificateIssuanceTime' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getCertificateOrder($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->getCertificateOrderAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get a certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCertificateOrderAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create or update a certificate purchase order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $certificateDistinguishedName Distinguished name to be used for purchasing
     *  certificate 
     * <pre>
     * [
     *    'properties' => [
     *       'certificates' => '',
     *       'distinguishedName' => '',
     *       'domainVerificationToken' => '',
     *       'validityInYears' => '',
     *       'keySize' => '',
     *       'productType' => 'StandardDomainValidatedSsl|StandardDomainValidatedWildCardSsl',
     *       'autoRenew' => 'false',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' =>
     *  'Pendingissuance|Issued|Revoked|Canceled|Denied|Pendingrevocation|PendingRekey|Unused|Expired|NotSubmitted',
     *       'signedCertificate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'csr' => '',
     *       'intermediate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'root' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'serialNumber' => '',
     *       'lastCertificateIssuanceTime' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'certificates' => '',
     *       'distinguishedName' => '',
     *       'domainVerificationToken' => '',
     *       'validityInYears' => '',
     *       'keySize' => '',
     *       'productType' => 'StandardDomainValidatedSsl|StandardDomainValidatedWildCardSsl',
     *       'autoRenew' => 'false',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' =>
     *  'Pendingissuance|Issued|Revoked|Canceled|Denied|Pendingrevocation|PendingRekey|Unused|Expired|NotSubmitted',
     *       'signedCertificate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'csr' => '',
     *       'intermediate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'root' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'serialNumber' => '',
     *       'lastCertificateIssuanceTime' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateCertificateOrder($resourceGroupName, $name, array $certificateDistinguishedName, array $customHeaders = [])
    {
        $response = $this->createOrUpdateCertificateOrderAsync($resourceGroupName, $name, $certificateDistinguishedName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a certificate purchase order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $certificateDistinguishedName Distinguished name to be used for purchasing
     *  certificate 
     * <pre>
     * [
     *    'properties' => [
     *       'certificates' => '',
     *       'distinguishedName' => '',
     *       'domainVerificationToken' => '',
     *       'validityInYears' => '',
     *       'keySize' => '',
     *       'productType' => 'StandardDomainValidatedSsl|StandardDomainValidatedWildCardSsl',
     *       'autoRenew' => 'false',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' =>
     *  'Pendingissuance|Issued|Revoked|Canceled|Denied|Pendingrevocation|PendingRekey|Unused|Expired|NotSubmitted',
     *       'signedCertificate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'csr' => '',
     *       'intermediate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'root' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'serialNumber' => '',
     *       'lastCertificateIssuanceTime' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateCertificateOrderAsync($resourceGroupName, $name, array $certificateDistinguishedName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($certificateDistinguishedName == null) {
            Validate::notNullOrEmpty($certificateDistinguishedName, '$certificateDistinguishedName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($certificateDistinguishedName);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete an existing certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function deleteCertificateOrder($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->deleteCertificateOrderAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete an existing certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteCertificateOrderAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create or update a certificate purchase order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $certificateDistinguishedName Distinguished name to be used for purchasing
     *  certificate 
     * <pre>
     * [
     *    'properties' => [
     *       'certificates' => '',
     *       'distinguishedName' => '',
     *       'domainVerificationToken' => '',
     *       'validityInYears' => '',
     *       'keySize' => '',
     *       'productType' => 'StandardDomainValidatedSsl|StandardDomainValidatedWildCardSsl',
     *       'autoRenew' => 'false',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' =>
     *  'Pendingissuance|Issued|Revoked|Canceled|Denied|Pendingrevocation|PendingRekey|Unused|Expired|NotSubmitted',
     *       'signedCertificate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'csr' => '',
     *       'intermediate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'root' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'serialNumber' => '',
     *       'lastCertificateIssuanceTime' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'certificates' => '',
     *       'distinguishedName' => '',
     *       'domainVerificationToken' => '',
     *       'validityInYears' => '',
     *       'keySize' => '',
     *       'productType' => 'StandardDomainValidatedSsl|StandardDomainValidatedWildCardSsl',
     *       'autoRenew' => 'false',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' =>
     *  'Pendingissuance|Issued|Revoked|Canceled|Denied|Pendingrevocation|PendingRekey|Unused|Expired|NotSubmitted',
     *       'signedCertificate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'csr' => '',
     *       'intermediate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'root' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'serialNumber' => '',
     *       'lastCertificateIssuanceTime' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     */
    public function updateCertificateOrder($resourceGroupName, $name, array $certificateDistinguishedName, array $customHeaders = [])
    {
        $response = $this->updateCertificateOrderAsync($resourceGroupName, $name, $certificateDistinguishedName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a certificate purchase order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $certificateDistinguishedName Distinguished name to be used for purchasing
     *  certificate 
     * <pre>
     * [
     *    'properties' => [
     *       'certificates' => '',
     *       'distinguishedName' => '',
     *       'domainVerificationToken' => '',
     *       'validityInYears' => '',
     *       'keySize' => '',
     *       'productType' => 'StandardDomainValidatedSsl|StandardDomainValidatedWildCardSsl',
     *       'autoRenew' => 'false',
     *       'provisioningState' => 'Succeeded|Failed|Canceled|InProgress|Deleting',
     *       'status' =>
     *  'Pendingissuance|Issued|Revoked|Canceled|Denied|Pendingrevocation|PendingRekey|Unused|Expired|NotSubmitted',
     *       'signedCertificate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'csr' => '',
     *       'intermediate' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'root' => [
     *          'properties' => [
     *             'version' => '',
     *             'serialNumber' => '',
     *             'thumbprint' => '',
     *             'subject' => '',
     *             'notBefore' => '',
     *             'notAfter' => '',
     *             'signatureAlgorithm' => '',
     *             'issuer' => '',
     *             'rawData' => ''
     *          ]
     *       ],
     *       'serialNumber' => '',
     *       'lastCertificateIssuanceTime' => '',
     *       'expirationTime' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateCertificateOrderAsync($resourceGroupName, $name, array $certificateDistinguishedName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($certificateDistinguishedName == null) {
            Validate::notNullOrEmpty($certificateDistinguishedName, '$certificateDistinguishedName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($certificateDistinguishedName);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get certificate orders in a resource group
     *
     * @param string $resourceGroupName Azure resource group name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getCertificateOrders($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->getCertificateOrdersAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get certificate orders in a resource group
     *
     * @param string $resourceGroupName Azure resource group name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCertificateOrdersAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List all certificates associated with a certificate order (only one
     * certificate can be associated with an order at a time)
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function getCertificates($resourceGroupName, $certificateOrderName, array $customHeaders = [])
    {
        $response = $this->getCertificatesAsync($resourceGroupName, $certificateOrderName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List all certificates associated with a certificate order (only one
     * certificate can be associated with an order at a time)
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $certificateOrderName Certificate name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCertificatesAsync($resourceGroupName, $certificateOrderName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($certificateOrderName == null) {
            Validate::notNullOrEmpty($certificateOrderName, '$certificateOrderName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{certificateOrderName}' => $certificateOrderName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Reissue an existing certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $reissueCertificateOrderRequest Reissue parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'keySize' => '',
     *       'delayExistingRevokeInHours' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function reissueCertificateOrder($resourceGroupName, $name, array $reissueCertificateOrderRequest, array $customHeaders = [])
    {
        $response = $this->reissueCertificateOrderAsync($resourceGroupName, $name, $reissueCertificateOrderRequest, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Reissue an existing certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $reissueCertificateOrderRequest Reissue parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'keySize' => '',
     *       'delayExistingRevokeInHours' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function reissueCertificateOrderAsync($resourceGroupName, $name, array $reissueCertificateOrderRequest, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($reissueCertificateOrderRequest == null) {
            Validate::notNullOrEmpty($reissueCertificateOrderRequest, '$reissueCertificateOrderRequest');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($reissueCertificateOrderRequest);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Renew an existing certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $renewCertificateOrderRequest Renew parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'keySize' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function renewCertificateOrder($resourceGroupName, $name, array $renewCertificateOrderRequest, array $customHeaders = [])
    {
        $response = $this->renewCertificateOrderAsync($resourceGroupName, $name, $renewCertificateOrderRequest, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Renew an existing certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate name
     * @param array $renewCertificateOrderRequest Renew parameters 
     * <pre>
     * [
     *    'properties' => [
     *       'keySize' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function renewCertificateOrderAsync($resourceGroupName, $name, array $renewCertificateOrderRequest, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($renewCertificateOrderRequest == null) {
            Validate::notNullOrEmpty($renewCertificateOrderRequest, '$renewCertificateOrderRequest');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($renewCertificateOrderRequest);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieve the list of certificate actions
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate order name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'type' =>
     *  'CertificateIssued|CertificateOrderCanceled|CertificateOrderCreated|CertificateRevoked|DomainValidationComplete|FraudDetected|OrgNameChange|OrgValidationComplete|SanDrop',
     *       'createdAt' => ''
     *    ]
     * ];
     * </pre>
     * )
     */
    public function retrieveCertificateActions($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->retrieveCertificateActionsAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieve the list of certificate actions
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate order name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function retrieveCertificateActionsAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrive email history
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate order name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'emailId' => '',
     *       'timeStamp' => ''
     *    ]
     * ];
     * </pre>
     * )
     */
    public function retrieveCertificateEmailHistory($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->retrieveCertificateEmailHistoryAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrive email history
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate order name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function retrieveCertificateEmailHistoryAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Resend certificate email
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate order name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function resendCertificateEmail($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->resendCertificateEmailAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Resend certificate email
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate order name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function resendCertificateEmailAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/resendEmail';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Verify domain ownership for this certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate order name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), object
     */
    public function verifyDomainOwnership($resourceGroupName, $name, array $customHeaders = [])
    {
        $response = $this->verifyDomainOwnershipAsync($resourceGroupName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Verify domain ownership for this certificate order
     *
     * @param string $resourceGroupName Azure resource group name
     * @param string $name Certificate order name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function verifyDomainOwnershipAsync($resourceGroupName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/verifyDomainOwnership';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
