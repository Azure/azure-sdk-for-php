<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-08-01
 */

namespace MicrosoftAzure\Arm\Web;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Recommendations for Use these APIs to manage Azure Websites resources
 * through the Azure Resource Manager. All task operations conform to the
 * HTTP/1.1 protocol specification and each operation returns an
 * x-ms-request-id header that can be used to obtain information about the
 * request. You must make sure that requests made to these resources are
 * secure. For more information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class Recommendations
{
    /**
     * The service client object for the operations.
     *
     * @var WebSiteManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Recommendations.
     *
     * @param WebSiteManagementClient, Service client for Recommendations
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @param bool $featured If set, this API returns only the most critical
     * recommendation among the others. Otherwise this API returns all
     * recommendations available
     * @param string $filter Return only channels specified in the filter. Filter
     * is specified by using OData syntax. Example: $filter=channels eq 'Api' or
     * channel eq 'Notification'
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'creationTime' => '',
     *    'recommendationId' => '',
     *    'resourceId' => '',
     *    'resourceScope' => '',
     *    'ruleName' => '',
     *    'displayName' => '',
     *    'message' => '',
     *    'level' => 'Critical|Warning|Information|NonUrgentSuggestion',
     *    'channels' => 'Notification|Api|Email|All',
     *    'tags' => '',
     *    'actionName' => '',
     *    'enabled' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'nextNotificationTime' => '',
     *    'notificationExpirationTime' => '',
     *    'notifiedTime' => '',
     *    'score' => ''
     * ];
     * </pre>
     * )
     */
    public function getRecommendationBySubscription($featured = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->getRecommendationBySubscriptionAsync($featured, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @param bool $featured If set, this API returns only the most critical
     * recommendation among the others. Otherwise this API returns all
     * recommendations available
     * @param string $filter Return only channels specified in the filter. Filter
     * is specified by using OData syntax. Example: $filter=channels eq 'Api' or
     * channel eq 'Notification'
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getRecommendationBySubscriptionAsync($featured = null, $filter = null, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['featured' => $featured, '$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the detailed properties of the recommendation object for the specified
     * web site.
     *
     * @param string $resourceGroupName Resource group name
     * @param string $siteName Site name
     * @param string $name Recommendation rule name
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'name' => '',
     *    'displayName' => '',
     *    'message' => '',
     *    'recommendationId' => '',
     *    'description' => '',
     *    'actionName' => '',
     *    'enabled' => '',
     *    'level' => 'Critical|Warning|Information|NonUrgentSuggestion',
     *    'channels' => 'Notification|Api|Email|All',
     *    'tags' => ''
     * ];
     * </pre>
     */
    public function getRuleDetailsBySiteName($resourceGroupName, $siteName, $name, array $customHeaders = [])
    {
        $response = $this->getRuleDetailsBySiteNameAsync($resourceGroupName, $siteName, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the detailed properties of the recommendation object for the specified
     * web site.
     *
     * @param string $resourceGroupName Resource group name
     * @param string $siteName Site name
     * @param string $name Recommendation rule name
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getRuleDetailsBySiteNameAsync($resourceGroupName, $siteName, $name, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($siteName == null) {
            Validate::notNullOrEmpty($siteName, '$siteName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{siteName}' => $siteName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @param string $resourceGroupName Resource group name
     * @param string $siteName Site name
     * @param bool $featured If set, this API returns only the most critical
     * recommendation among the others. Otherwise this API returns all
     * recommendations available
     * @param string $siteSku The name of site SKU.
     * @param int $numSlots The number of site slots associated to the site
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'creationTime' => '',
     *    'recommendationId' => '',
     *    'resourceId' => '',
     *    'resourceScope' => '',
     *    'ruleName' => '',
     *    'displayName' => '',
     *    'message' => '',
     *    'level' => 'Critical|Warning|Information|NonUrgentSuggestion',
     *    'channels' => 'Notification|Api|Email|All',
     *    'tags' => '',
     *    'actionName' => '',
     *    'enabled' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'nextNotificationTime' => '',
     *    'notificationExpirationTime' => '',
     *    'notifiedTime' => '',
     *    'score' => ''
     * ];
     * </pre>
     * )
     */
    public function getRecommendedRulesForSite($resourceGroupName, $siteName, $featured = null, $siteSku = null, $numSlots = null, array $customHeaders = [])
    {
        $response = $this->getRecommendedRulesForSiteAsync($resourceGroupName, $siteName, $featured, $siteSku, $numSlots, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @param string $resourceGroupName Resource group name
     * @param string $siteName Site name
     * @param bool $featured If set, this API returns only the most critical
     * recommendation among the others. Otherwise this API returns all
     * recommendations available
     * @param string $siteSku The name of site SKU.
     * @param int $numSlots The number of site slots associated to the site
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getRecommendedRulesForSiteAsync($resourceGroupName, $siteName, $featured = null, $siteSku = null, $numSlots = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($siteName == null) {
            Validate::notNullOrEmpty($siteName, '$siteName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{siteName}' => $siteName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['featured' => $featured, 'siteSku' => $siteSku, 'numSlots' => $numSlots, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the list of past recommendations optionally specified by the time
     * range.
     *
     * @param string $resourceGroupName Resource group name
     * @param string $siteName Site name
     * @param string $startTime The start time of a time range to query, e.g.
     * $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq
     * '2015-01-02T00:00:00Z'
     * @param string $endTime The end time of a time range to query, e.g.
     * $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq
     * '2015-01-02T00:00:00Z'
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'creationTime' => '',
     *    'recommendationId' => '',
     *    'resourceId' => '',
     *    'resourceScope' => '',
     *    'ruleName' => '',
     *    'displayName' => '',
     *    'message' => '',
     *    'level' => 'Critical|Warning|Information|NonUrgentSuggestion',
     *    'channels' => 'Notification|Api|Email|All',
     *    'tags' => '',
     *    'actionName' => '',
     *    'enabled' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'nextNotificationTime' => '',
     *    'notificationExpirationTime' => '',
     *    'notifiedTime' => '',
     *    'score' => ''
     * ];
     * </pre>
     * )
     */
    public function getRecommendationHistoryForSite($resourceGroupName, $siteName, $startTime = null, $endTime = null, array $customHeaders = [])
    {
        $response = $this->getRecommendationHistoryForSiteAsync($resourceGroupName, $siteName, $startTime, $endTime, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the list of past recommendations optionally specified by the time
     * range.
     *
     * @param string $resourceGroupName Resource group name
     * @param string $siteName Site name
     * @param string $startTime The start time of a time range to query, e.g.
     * $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq
     * '2015-01-02T00:00:00Z'
     * @param string $endTime The end time of a time range to query, e.g.
     * $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq
     * '2015-01-02T00:00:00Z'
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getRecommendationHistoryForSiteAsync($resourceGroupName, $siteName, $startTime = null, $endTime = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($siteName == null) {
            Validate::notNullOrEmpty($siteName, '$siteName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{siteName}' => $siteName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['startTime' => $startTime, 'endTime' => $endTime, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
