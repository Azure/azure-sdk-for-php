<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-01-01
 */

namespace MicrosoftAzure\Arm\Locks;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * ManagementLocks.
 */
class ManagementLocks
{
    /**
     * The service client object for the operations.
     *
     * @var ManagementLockClient
     */
    private $_client;

    /**
     * Creates a new instance for ManagementLocks.
     *
     * @param ManagementLockClient, Service client for ManagementLocks
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Create or update a management lock at the resource group level.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $lockName The lock name.
     * @param array $parameters The management lock parameters. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     */
    public function createOrUpdateAtResourceGroupLevel($resourceGroupName, $lockName, array $parameters, array $customHeaders = [])
    {
        $response = $this->createOrUpdateAtResourceGroupLevelAsync($resourceGroupName, $lockName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a management lock at the resource group level.
     *
     * @param string $resourceGroupName The resource group name.
     * @param string $lockName The lock name.
     * @param array $parameters The management lock parameters. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateAtResourceGroupLevelAsync($resourceGroupName, $lockName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($lockName == null) {
            Validate::notNullOrEmpty($lockName, '$lockName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{lockName}' => $lockName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create or update a management lock at the resource level or any level below
     * resource.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $resourceProviderNamespace Resource identity.
     * @param string $parentResourcePath Resource identity.
     * @param string $resourceType Resource identity.
     * @param string $resourceName Resource identity.
     * @param string $lockName The name of lock.
     * @param array $parameters Create or update management lock parameters. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     */
    public function createOrUpdateAtResourceLevel($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, $lockName, array $parameters, array $customHeaders = [])
    {
        $response = $this->createOrUpdateAtResourceLevelAsync($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, $lockName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a management lock at the resource level or any level below
     * resource.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $resourceProviderNamespace Resource identity.
     * @param string $parentResourcePath Resource identity.
     * @param string $resourceType Resource identity.
     * @param string $resourceName Resource identity.
     * @param string $lockName The name of lock.
     * @param array $parameters Create or update management lock parameters. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateAtResourceLevelAsync($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, $lockName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($resourceProviderNamespace == null) {
            Validate::notNullOrEmpty($resourceProviderNamespace, '$resourceProviderNamespace');
        }
        if ($parentResourcePath == null) {
            Validate::notNullOrEmpty($parentResourcePath, '$parentResourcePath');
        }
        if ($resourceType == null) {
            Validate::notNullOrEmpty($resourceType, '$resourceType');
        }
        if ($resourceName == null) {
            Validate::notNullOrEmpty($resourceName, '$resourceName');
        }
        if ($lockName == null) {
            Validate::notNullOrEmpty($lockName, '$lockName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{resourceProviderNamespace}' => $resourceProviderNamespace, '{resourceName}' => $resourceName, '{lockName}' => $lockName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes the management lock of a resource or any level below resource.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $resourceProviderNamespace Resource identity.
     * @param string $parentResourcePath Resource identity.
     * @param string $resourceType Resource identity.
     * @param string $resourceName Resource identity.
     * @param string $lockName The name of lock.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function deleteAtResourceLevel($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, $lockName, array $customHeaders = [])
    {
        $response = $this->deleteAtResourceLevelAsync($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, $lockName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes the management lock of a resource or any level below resource.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $resourceProviderNamespace Resource identity.
     * @param string $parentResourcePath Resource identity.
     * @param string $resourceType Resource identity.
     * @param string $resourceName Resource identity.
     * @param string $lockName The name of lock.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAtResourceLevelAsync($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, $lockName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($resourceProviderNamespace == null) {
            Validate::notNullOrEmpty($resourceProviderNamespace, '$resourceProviderNamespace');
        }
        if ($parentResourcePath == null) {
            Validate::notNullOrEmpty($parentResourcePath, '$parentResourcePath');
        }
        if ($resourceType == null) {
            Validate::notNullOrEmpty($resourceType, '$resourceType');
        }
        if ($resourceName == null) {
            Validate::notNullOrEmpty($resourceName, '$resourceName');
        }
        if ($lockName == null) {
            Validate::notNullOrEmpty($lockName, '$lockName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}';
        $statusCodes = [204, 200, 202];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{resourceProviderNamespace}' => $resourceProviderNamespace, '{resourceName}' => $resourceName, '{lockName}' => $lockName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create or update a management lock at the subscription level.
     *
     * @param string $lockName The name of lock.
     * @param array $parameters The management lock parameters. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     */
    public function createOrUpdateAtSubscriptionLevel($lockName, array $parameters, array $customHeaders = [])
    {
        $response = $this->createOrUpdateAtSubscriptionLevelAsync($lockName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create or update a management lock at the subscription level.
     *
     * @param string $lockName The name of lock.
     * @param array $parameters The management lock parameters. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateAtSubscriptionLevelAsync($lockName, array $parameters, array $customHeaders = [])
    {
        if ($lockName == null) {
            Validate::notNullOrEmpty($lockName, '$lockName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}';
        $statusCodes = [201, 200];
        $method = 'PUT';

        $path = strtr($path, ['{lockName}' => $lockName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes the management lock of a subscription.
     *
     * @param string $lockName The name of lock.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function deleteAtSubscriptionLevel($lockName, array $customHeaders = [])
    {
        $response = $this->deleteAtSubscriptionLevelAsync($lockName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes the management lock of a subscription.
     *
     * @param string $lockName The name of lock.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAtSubscriptionLevelAsync($lockName, array $customHeaders = [])
    {
        if ($lockName == null) {
            Validate::notNullOrEmpty($lockName, '$lockName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}';
        $statusCodes = [204, 200, 202];
        $method = 'DELETE';

        $path = strtr($path, ['{lockName}' => $lockName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the management lock of a scope.
     *
     * @param string $lockName Name of the management lock.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * When the resposne status is NoContent(204), 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     */
    public function get($lockName, array $customHeaders = [])
    {
        $response = $this->getAsync($lockName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the management lock of a scope.
     *
     * @param string $lockName Name of the management lock.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($lockName, array $customHeaders = [])
    {
        if ($lockName == null) {
            Validate::notNullOrEmpty($lockName, '$lockName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}';
        $statusCodes = [200, 204];
        $method = 'GET';

        $path = strtr($path, ['{lockName}' => $lockName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes the management lock of a resource group.
     *
     * @param string $resourceGroup The resource group names.
     * @param string $lockName The name of lock.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function deleteAtResourceGroupLevel($resourceGroup, $lockName, array $customHeaders = [])
    {
        $response = $this->deleteAtResourceGroupLevelAsync($resourceGroup, $lockName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes the management lock of a resource group.
     *
     * @param string $resourceGroup The resource group names.
     * @param string $lockName The name of lock.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAtResourceGroupLevelAsync($resourceGroup, $lockName, array $customHeaders = [])
    {
        if ($resourceGroup == null) {
            Validate::notNullOrEmpty($resourceGroup, '$resourceGroup');
        }
        if ($lockName == null) {
            Validate::notNullOrEmpty($lockName, '$lockName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Authorization/locks/{lockName}';
        $statusCodes = [204, 200, 202];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroup}' => $resourceGroup, '{lockName}' => $lockName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all the management locks of a resource group.
     *
     * @param string $resourceGroupName Resource group name.
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAtResourceGroupLevel($resourceGroupName, array $filter, array $customHeaders = [])
    {
        $response = $this->listAtResourceGroupLevelAsync($resourceGroupName, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all the management locks of a resource group.
     *
     * @param string $resourceGroupName Resource group name.
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAtResourceGroupLevelAsync($resourceGroupName, array $filter, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all the management locks of a resource or any level below resource.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $resourceProviderNamespace Resource identity.
     * @param string $parentResourcePath Resource identity.
     * @param string $resourceType Resource identity.
     * @param string $resourceName Resource identity.
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAtResourceLevel($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, array $filter, array $customHeaders = [])
    {
        $response = $this->listAtResourceLevelAsync($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all the management locks of a resource or any level below resource.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $resourceProviderNamespace Resource identity.
     * @param string $parentResourcePath Resource identity.
     * @param string $resourceType Resource identity.
     * @param string $resourceName Resource identity.
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAtResourceLevelAsync($resourceGroupName, $resourceProviderNamespace, $parentResourcePath, $resourceType, $resourceName, array $filter, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($resourceProviderNamespace == null) {
            Validate::notNullOrEmpty($resourceProviderNamespace, '$resourceProviderNamespace');
        }
        if ($parentResourcePath == null) {
            Validate::notNullOrEmpty($parentResourcePath, '$parentResourcePath');
        }
        if ($resourceType == null) {
            Validate::notNullOrEmpty($resourceType, '$resourceType');
        }
        if ($resourceName == null) {
            Validate::notNullOrEmpty($resourceName, '$resourceName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{resourceProviderNamespace}' => $resourceProviderNamespace, '{resourceName}' => $resourceName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get a list of management locks at resource level or below.
     *
     * @param string $nextLink NextLink from the previous successful call to List
     * operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get a list of management locks at resource level or below.
     *
     * @param string $nextLink NextLink from the previous successful call to List
     * operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextLink, array $customHeaders = [])
    {
        if ($nextLink == null) {
            Validate::notNullOrEmpty($nextLink, '$nextLink');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all the management locks of a subscription.
     *
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAtSubscriptionLevel(array $filter, array $customHeaders = [])
    {
        $response = $this->listAtSubscriptionLevelAsync($filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all the management locks of a subscription.
     *
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'level' => 'NotSpecified|CanNotDelete|ReadOnly',
     *       'notes' => ''
     *    ],
     *    'id' => '',
     *    'type' => '',
     *    'name' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAtSubscriptionLevelAsync(array $filter, array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all the management locks of a resource group.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAtResourceGroupLevelNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAtResourceGroupLevelNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all the management locks of a resource group.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAtResourceGroupLevelNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all the management locks of a resource or any level below resource.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAtResourceLevelNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAtResourceLevelNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all the management locks of a resource or any level below resource.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAtResourceLevelNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get a list of management locks at resource level or below.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNextNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get a list of management locks at resource level or below.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets all the management locks of a subscription.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAtSubscriptionLevelNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAtSubscriptionLevelNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets all the management locks of a subscription.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAtSubscriptionLevelNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
