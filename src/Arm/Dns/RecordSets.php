<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-04-01
 */

namespace MicrosoftAzure\Arm\Dns;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * RecordSets.
 */
class RecordSets
{
    /**
     * The service client object for the operations.
     *
     * @var DnsManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for RecordSets.
     *
     * @param DnsManagementClient, Service client for RecordSets
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $zoneName The name of the zone without a terminating dot.
     * @param string $relativeRecordSetName The name of the RecordSet, relative to
     * the name of the zone.
     * @param RecordType $recordType The type of DNS record. Possible values
     * include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param array $parameters Parameters supplied to the Update operation. 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => '',
     *    'type' => '',
     *    'etag' => '',
     *    'properties' => [
     *       'metadata' => '',
     *       'TTL' => '',
     *       'ARecords' => '',
     *       'AAAARecords' => '',
     *       'MXRecords' => '',
     *       'NSRecords' => '',
     *       'PTRRecords' => '',
     *       'SRVRecords' => '',
     *       'TXTRecords' => '',
     *       'CNAMERecord' => [
     *          'cname' => ''
     *       ],
     *       'SOARecord' => [
     *          'host' => '',
     *          'email' => '',
     *          'serialNumber' => '',
     *          'refreshTime' => '',
     *          'retryTime' => '',
     *          'expireTime' => '',
     *          'minimumTTL' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param string $ifMatch The etag of Zone.
     * @param string $ifNoneMatch Defines the If-None-Match condition. Set to '*'
     * to force Create-If-Not-Exist. Other values will be ignored.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => '',
     *    'type' => '',
     *    'etag' => '',
     *    'properties' => [
     *       'metadata' => '',
     *       'TTL' => '',
     *       'ARecords' => '',
     *       'AAAARecords' => '',
     *       'MXRecords' => '',
     *       'NSRecords' => '',
     *       'PTRRecords' => '',
     *       'SRVRecords' => '',
     *       'TXTRecords' => '',
     *       'CNAMERecord' => [
     *          'cname' => ''
     *       ],
     *       'SOARecord' => [
     *          'host' => '',
     *          'email' => '',
     *          'serialNumber' => '',
     *          'refreshTime' => '',
     *          'retryTime' => '',
     *          'expireTime' => '',
     *          'minimumTTL' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function update($resourceGroupName, $zoneName, $relativeRecordSetName, array $recordType, array $parameters, $ifMatch = null, $ifNoneMatch = null, array $customHeaders = [])
    {
        $response = $this->updateAsync($resourceGroupName, $zoneName, $relativeRecordSetName, $recordType, $parameters, $ifMatch, $ifNoneMatch, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $zoneName The name of the zone without a terminating dot.
     * @param string $relativeRecordSetName The name of the RecordSet, relative to
     * the name of the zone.
     * @param RecordType $recordType The type of DNS record. Possible values
     * include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param array $parameters Parameters supplied to the Update operation. 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => '',
     *    'type' => '',
     *    'etag' => '',
     *    'properties' => [
     *       'metadata' => '',
     *       'TTL' => '',
     *       'ARecords' => '',
     *       'AAAARecords' => '',
     *       'MXRecords' => '',
     *       'NSRecords' => '',
     *       'PTRRecords' => '',
     *       'SRVRecords' => '',
     *       'TXTRecords' => '',
     *       'CNAMERecord' => [
     *          'cname' => ''
     *       ],
     *       'SOARecord' => [
     *          'host' => '',
     *          'email' => '',
     *          'serialNumber' => '',
     *          'refreshTime' => '',
     *          'retryTime' => '',
     *          'expireTime' => '',
     *          'minimumTTL' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param string $ifMatch The etag of Zone.
     * @param string $ifNoneMatch Defines the If-None-Match condition. Set to '*'
     * to force Create-If-Not-Exist. Other values will be ignored.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateAsync($resourceGroupName, $zoneName, $relativeRecordSetName, array $recordType, array $parameters, $ifMatch = null, $ifNoneMatch = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($zoneName == null) {
            Validate::notNullOrEmpty($zoneName, '$zoneName');
        }
        if ($relativeRecordSetName == null) {
            Validate::notNullOrEmpty($relativeRecordSetName, '$relativeRecordSetName');
        }
        if ($recordType == null) {
            Validate::notNullOrEmpty($recordType, '$recordType');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}/{relativeRecordSetName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{zoneName}' => $zoneName, '{recordType}' => $recordType, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($ifMatch != null) {
            $headers['If-Match'] = $ifMatch;
        }
        if ($ifNoneMatch != null) {
            $headers['If-None-Match'] = $ifNoneMatch;
        }
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $zoneName The name of the zone without a terminating dot.
     * @param string $relativeRecordSetName The name of the RecordSet, relative to
     * the name of the zone.
     * @param RecordType $recordType The type of DNS record. Possible values
     * include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param array $parameters Parameters supplied to the CreateOrUpdate operation. 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => '',
     *    'type' => '',
     *    'etag' => '',
     *    'properties' => [
     *       'metadata' => '',
     *       'TTL' => '',
     *       'ARecords' => '',
     *       'AAAARecords' => '',
     *       'MXRecords' => '',
     *       'NSRecords' => '',
     *       'PTRRecords' => '',
     *       'SRVRecords' => '',
     *       'TXTRecords' => '',
     *       'CNAMERecord' => [
     *          'cname' => ''
     *       ],
     *       'SOARecord' => [
     *          'host' => '',
     *          'email' => '',
     *          'serialNumber' => '',
     *          'refreshTime' => '',
     *          'retryTime' => '',
     *          'expireTime' => '',
     *          'minimumTTL' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param string $ifMatch The etag of Recordset.
     * @param string $ifNoneMatch Defines the If-None-Match condition. Set to '*'
     * to force Create-If-Not-Exist. Other values will be ignored.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => '',
     *    'type' => '',
     *    'etag' => '',
     *    'properties' => [
     *       'metadata' => '',
     *       'TTL' => '',
     *       'ARecords' => '',
     *       'AAAARecords' => '',
     *       'MXRecords' => '',
     *       'NSRecords' => '',
     *       'PTRRecords' => '',
     *       'SRVRecords' => '',
     *       'TXTRecords' => '',
     *       'CNAMERecord' => [
     *          'cname' => ''
     *       ],
     *       'SOARecord' => [
     *          'host' => '',
     *          'email' => '',
     *          'serialNumber' => '',
     *          'refreshTime' => '',
     *          'retryTime' => '',
     *          'expireTime' => '',
     *          'minimumTTL' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => '',
     *    'type' => '',
     *    'etag' => '',
     *    'properties' => [
     *       'metadata' => '',
     *       'TTL' => '',
     *       'ARecords' => '',
     *       'AAAARecords' => '',
     *       'MXRecords' => '',
     *       'NSRecords' => '',
     *       'PTRRecords' => '',
     *       'SRVRecords' => '',
     *       'TXTRecords' => '',
     *       'CNAMERecord' => [
     *          'cname' => ''
     *       ],
     *       'SOARecord' => [
     *          'host' => '',
     *          'email' => '',
     *          'serialNumber' => '',
     *          'refreshTime' => '',
     *          'retryTime' => '',
     *          'expireTime' => '',
     *          'minimumTTL' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdate($resourceGroupName, $zoneName, $relativeRecordSetName, array $recordType, array $parameters, $ifMatch = null, $ifNoneMatch = null, array $customHeaders = [])
    {
        $response = $this->createOrUpdateAsync($resourceGroupName, $zoneName, $relativeRecordSetName, $recordType, $parameters, $ifMatch, $ifNoneMatch, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $zoneName The name of the zone without a terminating dot.
     * @param string $relativeRecordSetName The name of the RecordSet, relative to
     * the name of the zone.
     * @param RecordType $recordType The type of DNS record. Possible values
     * include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param array $parameters Parameters supplied to the CreateOrUpdate operation. 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => '',
     *    'type' => '',
     *    'etag' => '',
     *    'properties' => [
     *       'metadata' => '',
     *       'TTL' => '',
     *       'ARecords' => '',
     *       'AAAARecords' => '',
     *       'MXRecords' => '',
     *       'NSRecords' => '',
     *       'PTRRecords' => '',
     *       'SRVRecords' => '',
     *       'TXTRecords' => '',
     *       'CNAMERecord' => [
     *          'cname' => ''
     *       ],
     *       'SOARecord' => [
     *          'host' => '',
     *          'email' => '',
     *          'serialNumber' => '',
     *          'refreshTime' => '',
     *          'retryTime' => '',
     *          'expireTime' => '',
     *          'minimumTTL' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param string $ifMatch The etag of Recordset.
     * @param string $ifNoneMatch Defines the If-None-Match condition. Set to '*'
     * to force Create-If-Not-Exist. Other values will be ignored.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateAsync($resourceGroupName, $zoneName, $relativeRecordSetName, array $recordType, array $parameters, $ifMatch = null, $ifNoneMatch = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($zoneName == null) {
            Validate::notNullOrEmpty($zoneName, '$zoneName');
        }
        if ($relativeRecordSetName == null) {
            Validate::notNullOrEmpty($relativeRecordSetName, '$relativeRecordSetName');
        }
        if ($recordType == null) {
            Validate::notNullOrEmpty($recordType, '$recordType');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}/{relativeRecordSetName}';
        $statusCodes = [201, 200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{zoneName}' => $zoneName, '{recordType}' => $recordType, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($ifMatch != null) {
            $headers['If-Match'] = $ifMatch;
        }
        if ($ifNoneMatch != null) {
            $headers['If-None-Match'] = $ifNoneMatch;
        }
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $zoneName The name of the zone without a terminating dot.
     * @param string $relativeRecordSetName The name of the RecordSet, relative to
     * the name of the zone.
     * @param RecordType $recordType The type of DNS record. Possible values
     * include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param string $ifMatch Defines the If-Match condition. The delete operation
     * will be performed only if the ETag of the zone on the server matches this
     * value.
     * @param string $ifNoneMatch Defines the If-None-Match condition. The delete
     * operation will be performed only if the ETag of the zone on the server
     * does not match this value.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status OK(200).<br>
     */
    public function delete($resourceGroupName, $zoneName, $relativeRecordSetName, array $recordType, $ifMatch = null, $ifNoneMatch = null, array $customHeaders = [])
    {
        $response = $this->deleteAsync($resourceGroupName, $zoneName, $relativeRecordSetName, $recordType, $ifMatch, $ifNoneMatch, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $zoneName The name of the zone without a terminating dot.
     * @param string $relativeRecordSetName The name of the RecordSet, relative to
     * the name of the zone.
     * @param RecordType $recordType The type of DNS record. Possible values
     * include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param string $ifMatch Defines the If-Match condition. The delete operation
     * will be performed only if the ETag of the zone on the server matches this
     * value.
     * @param string $ifNoneMatch Defines the If-None-Match condition. The delete
     * operation will be performed only if the ETag of the zone on the server
     * does not match this value.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAsync($resourceGroupName, $zoneName, $relativeRecordSetName, array $recordType, $ifMatch = null, $ifNoneMatch = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($zoneName == null) {
            Validate::notNullOrEmpty($zoneName, '$zoneName');
        }
        if ($relativeRecordSetName == null) {
            Validate::notNullOrEmpty($relativeRecordSetName, '$relativeRecordSetName');
        }
        if ($recordType == null) {
            Validate::notNullOrEmpty($recordType, '$recordType');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}/{relativeRecordSetName}';
        $statusCodes = [204, 200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{zoneName}' => $zoneName, '{recordType}' => $recordType, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($ifMatch != null) {
            $headers['If-Match'] = $ifMatch;
        }
        if ($ifNoneMatch != null) {
            $headers['If-None-Match'] = $ifNoneMatch;
        }
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a RecordSet.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $zoneName The name of the zone without a terminating dot.
     * @param string $relativeRecordSetName The name of the RecordSet, relative to
     * the name of the zone.
     * @param RecordType $recordType The type of DNS record. Possible values
     * include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => '',
     *    'type' => '',
     *    'etag' => '',
     *    'properties' => [
     *       'metadata' => '',
     *       'TTL' => '',
     *       'ARecords' => '',
     *       'AAAARecords' => '',
     *       'MXRecords' => '',
     *       'NSRecords' => '',
     *       'PTRRecords' => '',
     *       'SRVRecords' => '',
     *       'TXTRecords' => '',
     *       'CNAMERecord' => [
     *          'cname' => ''
     *       ],
     *       'SOARecord' => [
     *          'host' => '',
     *          'email' => '',
     *          'serialNumber' => '',
     *          'refreshTime' => '',
     *          'retryTime' => '',
     *          'expireTime' => '',
     *          'minimumTTL' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $zoneName, $relativeRecordSetName, array $recordType, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $zoneName, $relativeRecordSetName, $recordType, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a RecordSet.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $zoneName The name of the zone without a terminating dot.
     * @param string $relativeRecordSetName The name of the RecordSet, relative to
     * the name of the zone.
     * @param RecordType $recordType The type of DNS record. Possible values
     * include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $zoneName, $relativeRecordSetName, array $recordType, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($zoneName == null) {
            Validate::notNullOrEmpty($zoneName, '$zoneName');
        }
        if ($relativeRecordSetName == null) {
            Validate::notNullOrEmpty($relativeRecordSetName, '$relativeRecordSetName');
        }
        if ($recordType == null) {
            Validate::notNullOrEmpty($recordType, '$recordType');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}/{relativeRecordSetName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{zoneName}' => $zoneName, '{recordType}' => $recordType, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the zone.
     * @param string $zoneName The name of the zone from which to enumerate
     * RecordsSets.
     * @param RecordType $recordType The type of record sets to enumerate.
     * Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA',
     * 'SRV', 'TXT'
     * @param string $top Query parameters. If null is passed returns the default
     * number of zones.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listByType($resourceGroupName, $zoneName, array $recordType, $top = null, array $customHeaders = [])
    {
        $response = $this->listByTypeAsync($resourceGroupName, $zoneName, $recordType, $top, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the zone.
     * @param string $zoneName The name of the zone from which to enumerate
     * RecordsSets.
     * @param RecordType $recordType The type of record sets to enumerate.
     * Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA',
     * 'SRV', 'TXT'
     * @param string $top Query parameters. If null is passed returns the default
     * number of zones.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByTypeAsync($resourceGroupName, $zoneName, array $recordType, $top = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($zoneName == null) {
            Validate::notNullOrEmpty($zoneName, '$zoneName');
        }
        if ($recordType == null) {
            Validate::notNullOrEmpty($recordType, '$recordType');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{zoneName}' => $zoneName, '{recordType}' => $recordType, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$top' => $top, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the zone.
     * @param string $zoneName The name of the zone from which to enumerate
     * RecordSets.
     * @param string $top Query parameters. If null is passed returns the default
     * number of zones.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAllInResourceGroup($resourceGroupName, $zoneName, $top = null, array $customHeaders = [])
    {
        $response = $this->listAllInResourceGroupAsync($resourceGroupName, $zoneName, $top, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the zone.
     * @param string $zoneName The name of the zone from which to enumerate
     * RecordSets.
     * @param string $top Query parameters. If null is passed returns the default
     * number of zones.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAllInResourceGroupAsync($resourceGroupName, $zoneName, $top = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($zoneName == null) {
            Validate::notNullOrEmpty($zoneName, '$zoneName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/recordsets';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{zoneName}' => $zoneName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$top' => $top, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listByTypeNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listByTypeNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByTypeNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAllInResourceGroupNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAllInResourceGroupNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAllInResourceGroupNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
