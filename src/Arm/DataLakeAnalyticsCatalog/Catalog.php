<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-10-01-preview
 */

namespace MicrosoftAzure\Arm\DataLakeAnalyticsCatalog;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Catalog for Creates an Azure Data Lake Analytics catalog client.
 */
class Catalog
{
    /**
     * The service client object for the operations.
     *
     * @var DataLakeAnalyticsCatalogManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Catalog.
     *
     * @param DataLakeAnalyticsCatalogManagementClient, Service client for Catalog
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Creates the specified secret for use with external data sources in the
     * specified database.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database in which to create the
     * secret.
     * @param string $secretName The name of the secret.
     * @param array $parameters The parameters required to create the secret (name and password) 
     * <pre>
     * [
     *    'password' => 'requiredPassword',
     *    'uri' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'secretName' => '',
     *    'creationTime' => '',
     *    'uri' => '',
     *    'password' => ''
     * ];
     * </pre>
     */
    public function createSecret($accountName, $databaseName, $secretName, array $parameters, array $customHeaders = [])
    {
        $response = $this->createSecretAsync($accountName, $databaseName, $secretName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates the specified secret for use with external data sources in the
     * specified database.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database in which to create the
     * secret.
     * @param string $secretName The name of the secret.
     * @param array $parameters The parameters required to create the secret (name and password) 
     * <pre>
     * [
     *    'password' => 'requiredPassword',
     *    'uri' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createSecretAsync($accountName, $databaseName, $secretName, array $parameters, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($secretName == null) {
            Validate::notNullOrEmpty($secretName, '$secretName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/secrets/{secretName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{secretName}' => $secretName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Modifies the specified secret for use with external data sources in the
     * specified database
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the secret.
     * @param string $secretName The name of the secret.
     * @param array $parameters The parameters required to modify the secret (name and password) 
     * <pre>
     * [
     *    'password' => 'requiredPassword',
     *    'uri' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'secretName' => '',
     *    'creationTime' => '',
     *    'uri' => '',
     *    'password' => ''
     * ];
     * </pre>
     */
    public function updateSecret($accountName, $databaseName, $secretName, array $parameters, array $customHeaders = [])
    {
        $response = $this->updateSecretAsync($accountName, $databaseName, $secretName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Modifies the specified secret for use with external data sources in the
     * specified database
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the secret.
     * @param string $secretName The name of the secret.
     * @param array $parameters The parameters required to modify the secret (name and password) 
     * <pre>
     * [
     *    'password' => 'requiredPassword',
     *    'uri' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateSecretAsync($accountName, $databaseName, $secretName, array $parameters, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($secretName == null) {
            Validate::notNullOrEmpty($secretName, '$secretName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/secrets/{secretName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{secretName}' => $secretName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the specified secret in the specified database
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the secret.
     * @param string $secretName The name of the secret to get
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'secretName' => '',
     *    'creationTime' => '',
     *    'uri' => '',
     *    'password' => ''
     * ];
     * </pre>
     */
    public function getSecret($accountName, $databaseName, $secretName, array $customHeaders = [])
    {
        $response = $this->getSecretAsync($accountName, $databaseName, $secretName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the specified secret in the specified database
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the secret.
     * @param string $secretName The name of the secret to get
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSecretAsync($accountName, $databaseName, $secretName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($secretName == null) {
            Validate::notNullOrEmpty($secretName, '$secretName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/secrets/{secretName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{secretName}' => $secretName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes the specified secret in the specified database
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the secret.
     * @param string $secretName The name of the secret to delete
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function deleteSecret($accountName, $databaseName, $secretName, array $customHeaders = [])
    {
        $response = $this->deleteSecretAsync($accountName, $databaseName, $secretName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes the specified secret in the specified database
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the secret.
     * @param string $secretName The name of the secret to delete
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteSecretAsync($accountName, $databaseName, $secretName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($secretName == null) {
            Validate::notNullOrEmpty($secretName, '$secretName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/secrets/{secretName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{secretName}' => $secretName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes all secrets in the specified database
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the secret.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function deleteAllSecrets($accountName, $databaseName, array $customHeaders = [])
    {
        $response = $this->deleteAllSecretsAsync($accountName, $databaseName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes all secrets in the specified database
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the secret.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAllSecretsAsync($accountName, $databaseName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/secrets';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{databaseName}' => $databaseName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified external data source from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * external data source.
     * @param string $externalDataSourceName The name of the external data source.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'externalDataSourceName' => '',
     *    'provider' => '',
     *    'providerString' => '',
     *    'pushdownTypes' => ''
     * ];
     * </pre>
     */
    public function getExternalDataSource($accountName, $databaseName, $externalDataSourceName, array $customHeaders = [])
    {
        $response = $this->getExternalDataSourceAsync($accountName, $databaseName, $externalDataSourceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified external data source from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * external data source.
     * @param string $externalDataSourceName The name of the external data source.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getExternalDataSourceAsync($accountName, $databaseName, $externalDataSourceName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($externalDataSourceName == null) {
            Validate::notNullOrEmpty($externalDataSourceName, '$externalDataSourceName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/externaldatasources/{externalDataSourceName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{externalDataSourceName}' => $externalDataSourceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of external data sources from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * external data sources.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'externalDataSourceName' => '',
     *    'provider' => '',
     *    'providerString' => '',
     *    'pushdownTypes' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listExternalDataSources($accountName, $databaseName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listExternalDataSourcesAsync($accountName, $databaseName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of external data sources from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * external data sources.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'externalDataSourceName' => '',
     *    'provider' => '',
     *    'providerString' => '',
     *    'pushdownTypes' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listExternalDataSourcesAsync($accountName, $databaseName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/externaldatasources';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified credential from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the schema.
     * @param string $credentialName The name of the credential.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'identity' => '',
     *    'credentialName' => '',
     *    'userName' => ''
     * ];
     * </pre>
     */
    public function getCredential($accountName, $databaseName, $credentialName, array $customHeaders = [])
    {
        $response = $this->getCredentialAsync($accountName, $databaseName, $credentialName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified credential from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the schema.
     * @param string $credentialName The name of the credential.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getCredentialAsync($accountName, $databaseName, $credentialName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($credentialName == null) {
            Validate::notNullOrEmpty($credentialName, '$credentialName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/credentials/{credentialName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{credentialName}' => $credentialName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the schema.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'identity' => '',
     *    'credentialName' => '',
     *    'userName' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listCredentials($accountName, $databaseName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listCredentialsAsync($accountName, $databaseName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the schema.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'identity' => '',
     *    'credentialName' => '',
     *    'userName' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listCredentialsAsync($accountName, $databaseName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/credentials';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified procedure from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * procedure.
     * @param string $schemaName The name of the schema containing the procedure.
     * @param string $procedureName The name of the procedure.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'procName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     */
    public function getProcedure($accountName, $databaseName, $schemaName, $procedureName, array $customHeaders = [])
    {
        $response = $this->getProcedureAsync($accountName, $databaseName, $schemaName, $procedureName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified procedure from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * procedure.
     * @param string $schemaName The name of the schema containing the procedure.
     * @param string $procedureName The name of the procedure.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getProcedureAsync($accountName, $databaseName, $schemaName, $procedureName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($procedureName == null) {
            Validate::notNullOrEmpty($procedureName, '$procedureName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures/{procedureName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{procedureName}' => $procedureName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * procedures.
     * @param string $schemaName The name of the schema containing the procedures.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'procName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listProcedures($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listProceduresAsync($accountName, $databaseName, $schemaName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * procedures.
     * @param string $schemaName The name of the schema containing the procedures.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'procName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listProceduresAsync($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified table from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table.
     * @param string $schemaName The name of the schema containing the table.
     * @param string $tableName The name of the table.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tableName' => '',
     *    'columnList' => '',
     *    'indexList' => '',
     *    'partitionKeyList' => '',
     *    'externalTable' => [
     *       'tableName' => '',
     *       'dataSource' => [
     *          'name' => [
     *             'firstPart' => '',
     *             'secondPart' => '',
     *             'thirdPart' => '',
     *             'server' => ''
     *          ],
     *          'version' => ''
     *       ]
     *    ],
     *    'distributionInfo' => [
     *       'type' => '',
     *       'keys' => '',
     *       'count' => '',
     *       'dynamicCount' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getTable($accountName, $databaseName, $schemaName, $tableName, array $customHeaders = [])
    {
        $response = $this->getTableAsync($accountName, $databaseName, $schemaName, $tableName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified table from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table.
     * @param string $schemaName The name of the schema containing the table.
     * @param string $tableName The name of the table.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getTableAsync($accountName, $databaseName, $schemaName, $tableName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($tableName == null) {
            Validate::notNullOrEmpty($tableName, '$tableName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{tableName}' => $tableName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the tables.
     * @param string $schemaName The name of the schema containing the tables.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tableName' => '',
     *    'columnList' => '',
     *    'indexList' => '',
     *    'partitionKeyList' => '',
     *    'externalTable' => [
     *       'tableName' => '',
     *       'dataSource' => [
     *          'name' => [
     *             'firstPart' => '',
     *             'secondPart' => '',
     *             'thirdPart' => '',
     *             'server' => ''
     *          ],
     *          'version' => ''
     *       ]
     *    ],
     *    'distributionInfo' => [
     *       'type' => '',
     *       'keys' => '',
     *       'count' => '',
     *       'dynamicCount' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTables($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listTablesAsync($accountName, $databaseName, $schemaName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the tables.
     * @param string $schemaName The name of the schema containing the tables.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tableName' => '',
     *    'columnList' => '',
     *    'indexList' => '',
     *    'partitionKeyList' => '',
     *    'externalTable' => [
     *       'tableName' => '',
     *       'dataSource' => [
     *          'name' => [
     *             'firstPart' => '',
     *             'secondPart' => '',
     *             'thirdPart' => '',
     *             'server' => ''
     *          ],
     *          'version' => ''
     *       ]
     *    ],
     *    'distributionInfo' => [
     *       'type' => '',
     *       'keys' => '',
     *       'count' => '',
     *       'dynamicCount' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTablesAsync($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified table type from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table
     * type.
     * @param string $schemaName The name of the schema containing the table type.
     * @param string $tableTypeName The name of the table type to retrieve.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'columns' => ''
     * ];
     * </pre>
     */
    public function getTableType($accountName, $databaseName, $schemaName, $tableTypeName, array $customHeaders = [])
    {
        $response = $this->getTableTypeAsync($accountName, $databaseName, $schemaName, $tableTypeName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified table type from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table
     * type.
     * @param string $schemaName The name of the schema containing the table type.
     * @param string $tableTypeName The name of the table type to retrieve.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getTableTypeAsync($accountName, $databaseName, $schemaName, $tableTypeName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($tableTypeName == null) {
            Validate::notNullOrEmpty($tableTypeName, '$tableTypeName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes/{tableTypeName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{tableTypeName}' => $tableTypeName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table
     * types.
     * @param string $schemaName The name of the schema containing the table types.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'columns' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTableTypes($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listTableTypesAsync($accountName, $databaseName, $schemaName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table
     * types.
     * @param string $schemaName The name of the schema containing the table types.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'columns' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTableTypesAsync($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified view from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the view.
     * @param string $schemaName The name of the schema containing the view.
     * @param string $viewName The name of the view.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'viewName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     */
    public function getView($accountName, $databaseName, $schemaName, $viewName, array $customHeaders = [])
    {
        $response = $this->getViewAsync($accountName, $databaseName, $schemaName, $viewName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified view from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the view.
     * @param string $schemaName The name of the schema containing the view.
     * @param string $viewName The name of the view.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getViewAsync($accountName, $databaseName, $schemaName, $viewName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($viewName == null) {
            Validate::notNullOrEmpty($viewName, '$viewName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views/{viewName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{viewName}' => $viewName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of views from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the views.
     * @param string $schemaName The name of the schema containing the views.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'viewName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listViews($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listViewsAsync($accountName, $databaseName, $schemaName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of views from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the views.
     * @param string $schemaName The name of the schema containing the views.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'viewName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listViewsAsync($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified table statistics from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * statistics.
     * @param string $schemaName The name of the schema containing the statistics.
     * @param string $tableName The name of the table containing the statistics.
     * @param string $statisticsName The name of the table statistics.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tableName' => '',
     *    'statisticsName' => '',
     *    'userStatName' => '',
     *    'statDataPath' => '',
     *    'createTime' => '',
     *    'updateTime' => '',
     *    'isUserCreated' => 'false',
     *    'isAutoCreated' => 'false',
     *    'hasFilter' => 'false',
     *    'filterDefinition' => '',
     *    'colNames' => ''
     * ];
     * </pre>
     */
    public function getTableStatistic($accountName, $databaseName, $schemaName, $tableName, $statisticsName, array $customHeaders = [])
    {
        $response = $this->getTableStatisticAsync($accountName, $databaseName, $schemaName, $tableName, $statisticsName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified table statistics from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * statistics.
     * @param string $schemaName The name of the schema containing the statistics.
     * @param string $tableName The name of the table containing the statistics.
     * @param string $statisticsName The name of the table statistics.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getTableStatisticAsync($accountName, $databaseName, $schemaName, $tableName, $statisticsName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($tableName == null) {
            Validate::notNullOrEmpty($tableName, '$tableName');
        }
        if ($statisticsName == null) {
            Validate::notNullOrEmpty($statisticsName, '$statisticsName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics/{statisticsName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{tableName}' => $tableName, '{statisticsName}' => $statisticsName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * statistics.
     * @param string $schemaName The name of the schema containing the statistics.
     * @param string $tableName The name of the table containing the statistics.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tableName' => '',
     *    'statisticsName' => '',
     *    'userStatName' => '',
     *    'statDataPath' => '',
     *    'createTime' => '',
     *    'updateTime' => '',
     *    'isUserCreated' => 'false',
     *    'isAutoCreated' => 'false',
     *    'hasFilter' => 'false',
     *    'filterDefinition' => '',
     *    'colNames' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTableStatistics($accountName, $databaseName, $schemaName, $tableName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listTableStatisticsAsync($accountName, $databaseName, $schemaName, $tableName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * statistics.
     * @param string $schemaName The name of the schema containing the statistics.
     * @param string $tableName The name of the table containing the statistics.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tableName' => '',
     *    'statisticsName' => '',
     *    'userStatName' => '',
     *    'statDataPath' => '',
     *    'createTime' => '',
     *    'updateTime' => '',
     *    'isUserCreated' => 'false',
     *    'isAutoCreated' => 'false',
     *    'hasFilter' => 'false',
     *    'filterDefinition' => '',
     *    'colNames' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTableStatisticsAsync($accountName, $databaseName, $schemaName, $tableName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($tableName == null) {
            Validate::notNullOrEmpty($tableName, '$tableName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{tableName}' => $tableName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified table partition from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * partition.
     * @param string $schemaName The name of the schema containing the partition.
     * @param string $tableName The name of the table containing the partition.
     * @param string $partitionName The name of the table partition.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'partitionName' => '',
     *    'parentName' => [
     *       'firstPart' => '',
     *       'secondPart' => '',
     *       'thirdPart' => '',
     *       'server' => ''
     *    ],
     *    'indexId' => '',
     *    'label' => '',
     *    'createDate' => ''
     * ];
     * </pre>
     */
    public function getTablePartition($accountName, $databaseName, $schemaName, $tableName, $partitionName, array $customHeaders = [])
    {
        $response = $this->getTablePartitionAsync($accountName, $databaseName, $schemaName, $tableName, $partitionName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified table partition from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * partition.
     * @param string $schemaName The name of the schema containing the partition.
     * @param string $tableName The name of the table containing the partition.
     * @param string $partitionName The name of the table partition.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getTablePartitionAsync($accountName, $databaseName, $schemaName, $tableName, $partitionName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($tableName == null) {
            Validate::notNullOrEmpty($tableName, '$tableName');
        }
        if ($partitionName == null) {
            Validate::notNullOrEmpty($partitionName, '$partitionName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{tableName}' => $tableName, '{partitionName}' => $partitionName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * partitions.
     * @param string $schemaName The name of the schema containing the partitions.
     * @param string $tableName The name of the table containing the partitions.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'partitionName' => '',
     *    'parentName' => [
     *       'firstPart' => '',
     *       'secondPart' => '',
     *       'thirdPart' => '',
     *       'server' => ''
     *    ],
     *    'indexId' => '',
     *    'label' => '',
     *    'createDate' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTablePartitions($accountName, $databaseName, $schemaName, $tableName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listTablePartitionsAsync($accountName, $databaseName, $schemaName, $tableName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * partitions.
     * @param string $schemaName The name of the schema containing the partitions.
     * @param string $tableName The name of the table containing the partitions.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'partitionName' => '',
     *    'parentName' => [
     *       'firstPart' => '',
     *       'secondPart' => '',
     *       'thirdPart' => '',
     *       'server' => ''
     *    ],
     *    'indexId' => '',
     *    'label' => '',
     *    'createDate' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTablePartitionsAsync($accountName, $databaseName, $schemaName, $tableName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($tableName == null) {
            Validate::notNullOrEmpty($tableName, '$tableName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{tableName}' => $tableName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of types within the specified database and schema from
     * the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the types.
     * @param string $schemaName The name of the schema containing the types.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'typeName' => '',
     *    'typeFamily' => '',
     *    'cSharpName' => '',
     *    'fullCSharpName' => '',
     *    'systemTypeId' => '',
     *    'userTypeId' => '',
     *    'schemaId' => '',
     *    'principalId' => '',
     *    'isNullable' => 'false',
     *    'isUserDefined' => 'false',
     *    'isAssemblyType' => 'false',
     *    'isTableType' => 'false',
     *    'isComplexType' => 'false'
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTypes($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listTypesAsync($accountName, $databaseName, $schemaName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of types within the specified database and schema from
     * the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the types.
     * @param string $schemaName The name of the schema containing the types.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'typeName' => '',
     *    'typeFamily' => '',
     *    'cSharpName' => '',
     *    'fullCSharpName' => '',
     *    'systemTypeId' => '',
     *    'userTypeId' => '',
     *    'schemaId' => '',
     *    'principalId' => '',
     *    'isNullable' => 'false',
     *    'isUserDefined' => 'false',
     *    'isAssemblyType' => 'false',
     *    'isTableType' => 'false',
     *    'isComplexType' => 'false'
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTypesAsync($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/types';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified table valued function from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table
     * valued function.
     * @param string $schemaName The name of the schema containing the table
     * valued function.
     * @param string $tableValuedFunctionName The name of the tableValuedFunction.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tvfName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     */
    public function getTableValuedFunction($accountName, $databaseName, $schemaName, $tableValuedFunctionName, array $customHeaders = [])
    {
        $response = $this->getTableValuedFunctionAsync($accountName, $databaseName, $schemaName, $tableValuedFunctionName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified table valued function from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table
     * valued function.
     * @param string $schemaName The name of the schema containing the table
     * valued function.
     * @param string $tableValuedFunctionName The name of the tableValuedFunction.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getTableValuedFunctionAsync($accountName, $databaseName, $schemaName, $tableValuedFunctionName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($tableValuedFunctionName == null) {
            Validate::notNullOrEmpty($tableValuedFunctionName, '$tableValuedFunctionName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions/{tableValuedFunctionName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName, '{tableValuedFunctionName}' => $tableValuedFunctionName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of table valued functions from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table
     * valued functions.
     * @param string $schemaName The name of the schema containing the table
     * valued functions.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tvfName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTableValuedFunctions($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listTableValuedFunctionsAsync($accountName, $databaseName, $schemaName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of table valued functions from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the table
     * valued functions.
     * @param string $schemaName The name of the schema containing the table
     * valued functions.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => '',
     *    'tvfName' => '',
     *    'definition' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTableValuedFunctionsAsync($accountName, $databaseName, $schemaName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified assembly from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * assembly.
     * @param string $assemblyName The name of the assembly.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'assemblyName' => '',
     *    'clrName' => '',
     *    'isVisible' => 'false',
     *    'isUserDefined' => 'false',
     *    'files' => '',
     *    'dependencies' => ''
     * ];
     * </pre>
     */
    public function getAssembly($accountName, $databaseName, $assemblyName, array $customHeaders = [])
    {
        $response = $this->getAssemblyAsync($accountName, $databaseName, $assemblyName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified assembly from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * assembly.
     * @param string $assemblyName The name of the assembly.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAssemblyAsync($accountName, $databaseName, $assemblyName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($assemblyName == null) {
            Validate::notNullOrEmpty($assemblyName, '$assemblyName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/assemblies/{assemblyName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{assemblyName}' => $assemblyName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * assembly.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'assemblyName' => '',
     *    'clrName' => '',
     *    'isVisible' => 'false',
     *    'isUserDefined' => 'false',
     *    'files' => '',
     *    'dependencies' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listAssemblies($accountName, $databaseName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listAssembliesAsync($accountName, $databaseName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the
     * assembly.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'assemblyName' => '',
     *    'clrName' => '',
     *    'isVisible' => 'false',
     *    'isUserDefined' => 'false',
     *    'files' => '',
     *    'dependencies' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAssembliesAsync($accountName, $databaseName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/assemblies';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified schema from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the schema.
     * @param string $schemaName The name of the schema.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => ''
     * ];
     * </pre>
     */
    public function getSchema($accountName, $databaseName, $schemaName, array $customHeaders = [])
    {
        $response = $this->getSchemaAsync($accountName, $databaseName, $schemaName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified schema from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the schema.
     * @param string $schemaName The name of the schema.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSchemaAsync($accountName, $databaseName, $schemaName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($schemaName == null) {
            Validate::notNullOrEmpty($schemaName, '$schemaName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName, '{schemaName}' => $schemaName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the schema.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listSchemas($accountName, $databaseName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listSchemasAsync($accountName, $databaseName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database containing the schema.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => '',
     *    'schemaName' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSchemasAsync($accountName, $databaseName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}/schemas';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the specified database from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'databaseName' => ''
     * ];
     * </pre>
     */
    public function getDatabase($accountName, $databaseName, array $customHeaders = [])
    {
        $response = $this->getDatabaseAsync($accountName, $databaseName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the specified database from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $databaseName The name of the database.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getDatabaseAsync($accountName, $databaseName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($databaseName == null) {
            Validate::notNullOrEmpty($databaseName, '$databaseName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases/{databaseName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{databaseName}' => $databaseName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listDatabases($accountName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        $response = $this->listDatabasesAsync($accountName, $filter, $top, $skip, $expand, $select, $orderby, $count, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'databaseName' => ''
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listDatabasesAsync($accountName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/catalog/usql/databases';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of external data sources from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listExternalDataSourcesNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listExternalDataSourcesNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of external data sources from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listExternalDataSourcesNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listCredentialsNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listCredentialsNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listCredentialsNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listProceduresNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listProceduresNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listProceduresNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTablesNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listTablesNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTablesNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTableTypesNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listTableTypesNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTableTypesNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of views from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listViewsNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listViewsNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of views from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listViewsNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTableStatisticsNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listTableStatisticsNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTableStatisticsNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTablePartitionsNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listTablePartitionsNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTablePartitionsNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of types within the specified database and schema from
     * the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTypesNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listTypesNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of types within the specified database and schema from
     * the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTypesNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of table valued functions from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listTableValuedFunctionsNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listTableValuedFunctionsNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of table valued functions from the Data Lake Analytics
     * catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTableValuedFunctionsNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listAssembliesNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAssembliesNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAssembliesNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listSchemasNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listSchemasNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSchemasNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listDatabasesNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listDatabasesNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * catalog operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listDatabasesNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaCatalogDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaCatalogDnsSuffix(), '$this->_client->getAdlaCatalogDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
