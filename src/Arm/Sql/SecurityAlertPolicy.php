<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-05-01-preview
 */

namespace MicrosoftAzure\Arm\Sql;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * SecurityAlertPolicy for The Azure SQL Database management API provides a
 * RESTful set of web services that interact with Azure SQL Database services
 * to manage your databases. The API enables users to create, retrieve,
 * update, and delete Databases, Servers and related resources.
 */
class SecurityAlertPolicy
{
    /**
     * The service client object for the operations.
     *
     * @var SqlManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for SecurityAlertPolicy.
     *
     * @param SqlManagementClient, Service client for SecurityAlertPolicy
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Creates or updates an Azure SQL Server security alert policy.
     *
     * @param array $parameters The required parameters for creating or updating a Azure SQL Server
     *  security alert policy. 
     * <pre>
     * [
     *    'properties' => [
     *       'state' => 'Enabled|Disabled|New',
     *       'disabledAlerts' => '',
     *       'emailAddresses' => '',
     *       'emailAccountAdmins' => 'Enabled|Disabled'
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName The name of the Resource Group to which
     * the server belongs.
     * @param string $serverName The name of the Azure SQL Server.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'state' => 'Enabled|Disabled|New',
     *       'disabledAlerts' => '',
     *       'emailAddresses' => '',
     *       'emailAccountAdmins' => 'Enabled|Disabled'
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'state' => 'Enabled|Disabled|New',
     *       'disabledAlerts' => '',
     *       'emailAddresses' => '',
     *       'emailAccountAdmins' => 'Enabled|Disabled'
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdate(array $parameters, $resourceGroupName, $serverName, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateAsync($parameters, $resourceGroupName, $serverName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates an Azure SQL Server security alert policy.
     *
     * @param array $parameters The required parameters for creating or updating a Azure SQL Server
     *  security alert policy. 
     * <pre>
     * [
     *    'properties' => [
     *       'state' => 'Enabled|Disabled|New',
     *       'disabledAlerts' => '',
     *       'emailAddresses' => '',
     *       'emailAccountAdmins' => 'Enabled|Disabled'
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName The name of the Resource Group to which
     * the server belongs.
     * @param string $serverName The name of the Azure SQL Server.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'state' => 'Enabled|Disabled|New',
     *       'disabledAlerts' => '',
     *       'emailAddresses' => '',
     *       'emailAccountAdmins' => 'Enabled|Disabled'
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'state' => 'Enabled|Disabled|New',
     *       'disabledAlerts' => '',
     *       'emailAddresses' => '',
     *       'emailAccountAdmins' => 'Enabled|Disabled'
     *    ]
     * ];
     * </pre>
     */
    public function beginCreateOrUpdate(array $parameters, $resourceGroupName, $serverName, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateAsync($parameters, $resourceGroupName, $serverName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates an Azure SQL Server security alert policy.
     *
     * @param array $parameters The required parameters for creating or updating a Azure SQL Server
     *  security alert policy. 
     * <pre>
     * [
     *    'properties' => [
     *       'state' => 'Enabled|Disabled|New',
     *       'disabledAlerts' => '',
     *       'emailAddresses' => '',
     *       'emailAccountAdmins' => 'Enabled|Disabled'
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName The name of the Resource Group to which
     * the server belongs.
     * @param string $serverName The name of the Azure SQL Server.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateAsync(array $parameters, $resourceGroupName, $serverName, array $customHeaders = [])
    {
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($serverName == null) {
            Validate::notNullOrEmpty($serverName, '$serverName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies/Default';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{serverName}' => $serverName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns an Azure SQL Server security alert policy.
     *
     * @param string $resourceGroupName The name of the Resource Group to which
     * the server belongs.
     * @param string $serverName The name of the Azure SQL Server.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'state' => 'Enabled|Disabled|New',
     *       'disabledAlerts' => '',
     *       'emailAddresses' => '',
     *       'emailAccountAdmins' => 'Enabled|Disabled'
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $serverName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $serverName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns an Azure SQL Server security alert policy.
     *
     * @param string $resourceGroupName The name of the Resource Group to which
     * the server belongs.
     * @param string $serverName The name of the Azure SQL Server.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $serverName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($serverName == null) {
            Validate::notNullOrEmpty($serverName, '$serverName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies/Default';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{serverName}' => $serverName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
