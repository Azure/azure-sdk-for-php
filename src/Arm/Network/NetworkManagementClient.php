<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-06-01
 */

namespace MicrosoftAzure\Arm\Network;

use MicrosoftAzure\Common\Internal\Authentication\OAuthScheme;
use MicrosoftAzure\Common\Internal\Filters\OAuthFilter;
use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Serialization\JsonSerializer;
use MicrosoftAzure\Common\OAuthServiceClient;
use MicrosoftAzure\Common\RestServiceClient;

/**
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resrources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 */
class NetworkManagementClient extends RestServiceClient
{
    /**
     * Credentials needed for the client to connect to Azure.
     *
     * @var OAuthSettings
     */
    private $_credentials;
    /**
     * Gets subscription credentials which uniquely identify Microsoft Azure
     * subscription. The subscription ID forms part of the URI for every
     * service call.
     *
     * @var string
     */
    private $_subscriptionId;
    /**
     * Client Api Version.
     *
     * @var string
     */
    private $_apiVersion;
    /**
     * Gets or sets the preferred language for the response.
     *
     * @var string
     */
    private $_acceptLanguage;
    /**
     * Gets or sets the retry timeout in seconds for Long Running Operations.
     * Default value is 30.
     *
     * @var int
     */
    private $_longRunningOperationRetryTimeout;
    /**
     * When set to true a unique x-ms-client-request-id value is generated and
     * included in each request. Default is true.
     *
     * @var bool
     */
    private $_generateClientRequestId;

    /**
     * Method group: ApplicationGateways.
     *
     * @var ApplicationGateways
     */
    private $_applicationGateways;

    /**
     * Method group: ExpressRouteCircuitAuthorizations.
     *
     * @var ExpressRouteCircuitAuthorizations
     */
    private $_expressRouteCircuitAuthorizations;

    /**
     * Method group: ExpressRouteCircuitPeerings.
     *
     * @var ExpressRouteCircuitPeerings
     */
    private $_expressRouteCircuitPeerings;

    /**
     * Method group: ExpressRouteCircuits.
     *
     * @var ExpressRouteCircuits
     */
    private $_expressRouteCircuits;

    /**
     * Method group: ExpressRouteServiceProviders.
     *
     * @var ExpressRouteServiceProviders
     */
    private $_expressRouteServiceProviders;

    /**
     * Method group: LoadBalancers.
     *
     * @var LoadBalancers
     */
    private $_loadBalancers;

    /**
     * Method group: LocalNetworkGateways.
     *
     * @var LocalNetworkGateways
     */
    private $_localNetworkGateways;

    /**
     * Method group: NetworkInterfaces.
     *
     * @var NetworkInterfaces
     */
    private $_networkInterfaces;

    /**
     * Method group: NetworkSecurityGroups.
     *
     * @var NetworkSecurityGroups
     */
    private $_networkSecurityGroups;

    /**
     * Method group: PublicIPAddresses.
     *
     * @var PublicIPAddresses
     */
    private $_publicIPAddresses;

    /**
     * Method group: RouteTables.
     *
     * @var RouteTables
     */
    private $_routeTables;

    /**
     * Method group: Routes.
     *
     * @var Routes
     */
    private $_routes;

    /**
     * Method group: SecurityRules.
     *
     * @var SecurityRules
     */
    private $_securityRules;

    /**
     * Method group: Subnets.
     *
     * @var Subnets
     */
    private $_subnets;

    /**
     * Method group: VirtualNetworkPeerings.
     *
     * @var VirtualNetworkPeerings
     */
    private $_virtualNetworkPeerings;

    /**
     * Method group: Usages.
     *
     * @var Usages
     */
    private $_usages;

    /**
     * Method group: VirtualNetworkGatewayConnections.
     *
     * @var VirtualNetworkGatewayConnections
     */
    private $_virtualNetworkGatewayConnections;

    /**
     * Method group: VirtualNetworkGateways.
     *
     * @var VirtualNetworkGateways
     */
    private $_virtualNetworkGateways;

    /**
     * Method group: VirtualNetworks.
     *
     * @var VirtualNetworks
     */
    private $_virtualNetworks;

    /**
     * Base Url for the API.
     *
     * @var string
     */
    private $_baseUrl = 'https://management.azure.com';

    /**
     * Header filters for http calls.
     *
     * @var array
     */
    private $_filters;

    /**
     * Retry intervals in number of seconds.
     *
     * @var int
     */
    private $_retryInterval;

    /**
     * Constructor for the service client.
     *
     * @param OAuthSettings $oauthSettings OAuth settings for to access the APIs
     */
    public function __construct($oauthSettings)
    {
        $this->_credentials = $oauthSettings;
        parent::__construct(
            $this->_credentials->getOAuthEndpointUri(),
            new JsonSerializer()
        );
        $oauthService = new OAuthServiceClient($this->_credentials);
        $authentification = new OAuthScheme($oauthService);
        $this->_filters = [new OAuthFilter($authentification)];

        $this->_applicationGateways = new ApplicationGateways($this);
        $this->_expressRouteCircuitAuthorizations = new ExpressRouteCircuitAuthorizations($this);
        $this->_expressRouteCircuitPeerings = new ExpressRouteCircuitPeerings($this);
        $this->_expressRouteCircuits = new ExpressRouteCircuits($this);
        $this->_expressRouteServiceProviders = new ExpressRouteServiceProviders($this);
        $this->_loadBalancers = new LoadBalancers($this);
        $this->_localNetworkGateways = new LocalNetworkGateways($this);
        $this->_networkInterfaces = new NetworkInterfaces($this);
        $this->_networkSecurityGroups = new NetworkSecurityGroups($this);
        $this->_publicIPAddresses = new PublicIPAddresses($this);
        $this->_routeTables = new RouteTables($this);
        $this->_routes = new Routes($this);
        $this->_securityRules = new SecurityRules($this);
        $this->_subnets = new Subnets($this);
        $this->_virtualNetworkPeerings = new VirtualNetworkPeerings($this);
        $this->_usages = new Usages($this);
        $this->_virtualNetworkGatewayConnections = new VirtualNetworkGatewayConnections($this);
        $this->_virtualNetworkGateways = new VirtualNetworkGateways($this);
        $this->_virtualNetworks = new VirtualNetworks($this);

        $this->setApiVersion('2016-06-01');
        $this->setAcceptLanguage('en-US');
        $this->setLongRunningOperationRetryTimeout(30);
        $this->setGenerateClientRequestId(true);
        $this->setRetryInterval(5);
    }

    /**
     * Gets credentials, Credentials needed for the client to connect to Azure.
     *
     * @return OAuthSettings
     */
    public function getCredentials()
    {
        return $this->_credentials;
    }

    /**
     * Sets credentials, Credentials needed for the client to connect to Azure.
     *
     * @param OAuthSettings $credentials
     *
     * @return none
     */
    private function setCredentials($credentials)
    {
        $this->_credentials = $credentials;
    }

    /**
     * Gets subscriptionId, subscription credentials which uniquely identify
     * Microsoft Azure subscription. The subscription ID forms part of the
     * URI for every service call.
     *
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->_subscriptionId;
    }

    /**
     * Sets subscriptionId, subscription credentials which uniquely identify
     * Microsoft Azure subscription. The subscription ID forms part of the
     * URI for every service call.
     *
     * @param string $subscriptionId
     *
     * @return none
     */
    public function setSubscriptionId($subscriptionId)
    {
        $this->_subscriptionId = $subscriptionId;
    }

    /**
     * Gets apiVersion, Client Api Version.
     *
     * @return string
     */
    public function getApiVersion()
    {
        return $this->_apiVersion;
    }

    /**
     * Sets apiVersion, Client Api Version.
     *
     * @param string $apiVersion
     *
     * @return none
     */
    private function setApiVersion($apiVersion)
    {
        $this->_apiVersion = $apiVersion;
    }

    /**
     * Gets acceptLanguage, the preferred language for the response.
     *
     * @return string
     */
    public function getAcceptLanguage()
    {
        return $this->_acceptLanguage;
    }

    /**
     * Sets acceptLanguage, the preferred language for the response.
     *
     * @param string $acceptLanguage
     *
     * @return none
     */
    public function setAcceptLanguage($acceptLanguage)
    {
        $this->_acceptLanguage = $acceptLanguage;
    }

    /**
     * Gets longRunningOperationRetryTimeout, the retry timeout in seconds for
     * Long Running Operations. Default value is 30.
     *
     * @return int
     */
    public function getLongRunningOperationRetryTimeout()
    {
        return $this->_longRunningOperationRetryTimeout;
    }

    /**
     * Sets longRunningOperationRetryTimeout, the retry timeout in seconds for
     * Long Running Operations. Default value is 30.
     *
     * @param int $longRunningOperationRetryTimeout
     *
     * @return none
     */
    public function setLongRunningOperationRetryTimeout($longRunningOperationRetryTimeout)
    {
        $this->_longRunningOperationRetryTimeout = $longRunningOperationRetryTimeout;
        set_time_limit($longRunningOperationRetryTimeout);
    }

    /**
     * Gets generateClientRequestId, When set to true a unique
     * x-ms-client-request-id value is generated and included in each
     * request. Default is true.
     *
     * @return bool
     */
    public function getGenerateClientRequestId()
    {
        return $this->_generateClientRequestId;
    }

    /**
     * Sets generateClientRequestId, When set to true a unique
     * x-ms-client-request-id value is generated and included in each
     * request. Default is true.
     *
     * @param bool $generateClientRequestId
     *
     * @return none
     */
    public function setGenerateClientRequestId($generateClientRequestId)
    {
        $this->_generateClientRequestId = $generateClientRequestId;
    }

    /**
     * Gets method group ApplicationGateways.
     *
     * @return ApplicationGateways
     */
    public function getApplicationGateways()
    {
        return $this->_applicationGateways;
    }

    /**
     * Gets method group ExpressRouteCircuitAuthorizations.
     *
     * @return ExpressRouteCircuitAuthorizations
     */
    public function getExpressRouteCircuitAuthorizations()
    {
        return $this->_expressRouteCircuitAuthorizations;
    }

    /**
     * Gets method group ExpressRouteCircuitPeerings.
     *
     * @return ExpressRouteCircuitPeerings
     */
    public function getExpressRouteCircuitPeerings()
    {
        return $this->_expressRouteCircuitPeerings;
    }

    /**
     * Gets method group ExpressRouteCircuits.
     *
     * @return ExpressRouteCircuits
     */
    public function getExpressRouteCircuits()
    {
        return $this->_expressRouteCircuits;
    }

    /**
     * Gets method group ExpressRouteServiceProviders.
     *
     * @return ExpressRouteServiceProviders
     */
    public function getExpressRouteServiceProviders()
    {
        return $this->_expressRouteServiceProviders;
    }

    /**
     * Gets method group LoadBalancers.
     *
     * @return LoadBalancers
     */
    public function getLoadBalancers()
    {
        return $this->_loadBalancers;
    }

    /**
     * Gets method group LocalNetworkGateways.
     *
     * @return LocalNetworkGateways
     */
    public function getLocalNetworkGateways()
    {
        return $this->_localNetworkGateways;
    }

    /**
     * Gets method group NetworkInterfaces.
     *
     * @return NetworkInterfaces
     */
    public function getNetworkInterfaces()
    {
        return $this->_networkInterfaces;
    }

    /**
     * Gets method group NetworkSecurityGroups.
     *
     * @return NetworkSecurityGroups
     */
    public function getNetworkSecurityGroups()
    {
        return $this->_networkSecurityGroups;
    }

    /**
     * Gets method group PublicIPAddresses.
     *
     * @return PublicIPAddresses
     */
    public function getPublicIPAddresses()
    {
        return $this->_publicIPAddresses;
    }

    /**
     * Gets method group RouteTables.
     *
     * @return RouteTables
     */
    public function getRouteTables()
    {
        return $this->_routeTables;
    }

    /**
     * Gets method group Routes.
     *
     * @return Routes
     */
    public function getRoutes()
    {
        return $this->_routes;
    }

    /**
     * Gets method group SecurityRules.
     *
     * @return SecurityRules
     */
    public function getSecurityRules()
    {
        return $this->_securityRules;
    }

    /**
     * Gets method group Subnets.
     *
     * @return Subnets
     */
    public function getSubnets()
    {
        return $this->_subnets;
    }

    /**
     * Gets method group VirtualNetworkPeerings.
     *
     * @return VirtualNetworkPeerings
     */
    public function getVirtualNetworkPeerings()
    {
        return $this->_virtualNetworkPeerings;
    }

    /**
     * Gets method group Usages.
     *
     * @return Usages
     */
    public function getUsages()
    {
        return $this->_usages;
    }

    /**
     * Gets method group VirtualNetworkGatewayConnections.
     *
     * @return VirtualNetworkGatewayConnections
     */
    public function getVirtualNetworkGatewayConnections()
    {
        return $this->_virtualNetworkGatewayConnections;
    }

    /**
     * Gets method group VirtualNetworkGateways.
     *
     * @return VirtualNetworkGateways
     */
    public function getVirtualNetworkGateways()
    {
        return $this->_virtualNetworkGateways;
    }

    /**
     * Gets method group VirtualNetworks.
     *
     * @return VirtualNetworks
     */
    public function getVirtualNetworks()
    {
        return $this->_virtualNetworks;
    }

    /**
     * Gets filter for http requests.
     *
     * @return array, OAuth filters
     */
    public function getFilters()
    {
        return $this->_filters;
    }

    /**
     * Gets the data serializer.
     *
     * @return JsonSerializer, the data serializer
     */
    public function getDataSerializer()
    {
        return $this->dataSerializer;
    }

    /**
     * Gets host full Url for a relative path.
     *
     * @param string $path
     *
     * @return string, full Url
     */
    public function getUrl($path)
    {
        return $this->_baseUrl.$path;
    }

    /**
     * Gets retry intervals in number of seconds.
     *
     * @return int, number of seconds
     */
    public function getRetryInterval()
    {
        return $this->_retryInterval;
    }

    /**
     * Sets retry intervals in number of seconds.
     *
     * @param int $retryInterval
     *
     * @return none
     */
    public function setRetryInterval($retryInterval)
    {
        $this->_retryInterval = $retryInterval;
    }

    /**
     * Poll for the async status of a request.
     *
     * @param string $path
     * @param string $requestId from x-ms-request-id in the header
     *
     * @return string, status code, 200 or 202
     */
    public function pollAsyncOperation($path, $requestId)
    {
        $queryParams = [Resources::API_VERSION => '2016-06-01', 'monitor' => 'true'];
        $method = Resources::HTTP_GET;
        $statusCodes = [Resources::STATUS_OK, Resources::STATUS_ACCEPTED];

        $headers = [Resources::X_MS_REQUEST_ID => $requestId];
        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $path,
            $statusCodes,
            $body,
            $this->getFilters()
        );

        return $response->getStatusCode();
    }

    /**
     * Wait for the async request to finish.
     *
     * @param Response $response
     *
     * @return string, status code
     */
    public function awaitAsync($response)
    {
        $status = $response->getStatusCode();
        $headers = $response->getHeaders();

        if (array_key_exists(Resources::XTAG_LOCATION, $headers) && array_key_exists(Resources::X_MS_REQUEST_ID, $headers)) {
            $locations = $headers[Resources::XTAG_LOCATION];
            $requestIds = $headers[Resources::X_MS_REQUEST_ID];

            while ($status == Resources::STATUS_ACCEPTED) {
                sleep($this->getRetryInterval());
                $status = $this->pollAsyncOperation($locations[0], $requestIds[0]);
                echo '.';
            }
        }

        return $status;
    }

       /**
        * Checks whether a domain name in the cloudapp.net zone is available for use.
        *
        * @param string $location The location of the domain name
        * @param string $domainNameLabel The domain name to be verified. It must
        * conform to the following regular expression:
        * ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
        * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
        *  the HTTP request.
        *
        * @return array
        * When the resposne status is OK(200), 
        * <pre>
        * [
        *    'available' => 'false'
        * ];
        * </pre>
        */
       public function checkDnsNameAvailability($location, $domainNameLabel = null, array $customHeaders = [])
       {
           $response = $this->checkDnsNameAvailabilityAsync($location, $domainNameLabel, $customHeaders);

           if ($response->getBody()) {
               $contents = $response->getBody()->getContents();
               if ($contents) {
                   return $this->_client->getDataSerializer()->deserialize($contents);
               }
           }

           return [];
       }

       /**
        * Checks whether a domain name in the cloudapp.net zone is available for use.
        *
        * @param string $location The location of the domain name
        * @param string $domainNameLabel The domain name to be verified. It must
        * conform to the following regular expression:
        * ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
        * @param array $customHeaders An array of custom headers ['key' => 'value']
        * that will be added to the HTTP request.
        *
        * @return \GuzzleHttp\Psr7\Response
        */
       public function checkDnsNameAvailabilityAsync($location, $domainNameLabel = null, array $customHeaders = [])
       {
           if ($location == null) {
               Validate::notNullOrEmpty($location, '$location');
           }
           if ($apiVersion == null) {
               Validate::notNullOrEmpty($apiVersion, '$apiVersion');
           }
           if ($subscriptionId == null) {
               Validate::notNullOrEmpty($subscriptionId, '$subscriptionId');
           }

           $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability';
           $statusCodes = [200];
           $method = 'GET';

           $path = strtr($path, ['{location}' => $location, '{subscriptionId}' => $subscriptionId]);
           $queryParams = ['domainNameLabel' => $domainNameLabel, 'api-version' => $apiVersion];
           $headers = $customHeaders;
           if ($acceptLanguage != null) {
               $headers['accept-language'] = $acceptLanguage;
           }
           if ($this->_client->getGenerateClientRequestId()) {
               $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
           }

           $body = '';

           $response = HttpClient::send(
               $method,
               $headers,
               $queryParams,
               [],
               $this->_client->getUrl($path),
               $statusCodes,
               $body,
               $this->_client->getFilters()
           );

           return $response;
       }

}
