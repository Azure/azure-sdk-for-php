<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-06-01
 */

namespace MicrosoftAzure\Arm\Network;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * ExpressRouteCircuits for The Microsoft Azure Network management API
 * provides a RESTful set of web services that interact with Microsoft Azure
 * Networks service to manage your network resrources. The API has entities
 * that capture the relationship between an end user and the Microsoft Azure
 * Networks service.
 */
class ExpressRouteCircuits
{
    /**
     * The service client object for the operations.
     *
     * @var NetworkManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for ExpressRouteCircuits.
     *
     * @param NetworkManagementClient, Service client for ExpressRouteCircuits
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * The delete ExpressRouteCircuit operation deletes the specified
     * ExpressRouteCircuit.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the express route Circuit.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status OK(200).<br>
     */
    public function delete($resourceGroupName, $circuitName, array $customHeaders = [])
    {
        $response = $this->begindeleteAsync($resourceGroupName, $circuitName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The delete ExpressRouteCircuit operation deletes the specified
     * ExpressRouteCircuit.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the express route Circuit.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status OK(200).<br>
     */
    public function beginDelete($resourceGroupName, $circuitName, array $customHeaders = [])
    {
        $response = $this->beginDeleteAsync($resourceGroupName, $circuitName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The delete ExpressRouteCircuit operation deletes the specified
     * ExpressRouteCircuit.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the express route Circuit.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteAsync($resourceGroupName, $circuitName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($circuitName == null) {
            Validate::notNullOrEmpty($circuitName, '$circuitName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}';
        $statusCodes = [204, 202, 200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{circuitName}' => $circuitName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Get ExpressRouteCircuit operation retreives information about the
     * specified ExpressRouteCircuit.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => 'Standard|Premium',
     *       'family' => 'UnlimitedData|MeteredData'
     *    ],
     *    'properties' => [
     *       'allowClassicOperations' => 'false',
     *       'circuitProvisioningState' => '',
     *       'serviceProviderProvisioningState' =>
     *  'NotProvisioned|Provisioning|Provisioned|Deprovisioning',
     *       'authorizations' => '',
     *       'peerings' => '',
     *       'serviceKey' => '',
     *       'serviceProviderNotes' => '',
     *       'serviceProviderProperties' => [
     *          'serviceProviderName' => '',
     *          'peeringLocation' => '',
     *          'bandwidthInMbps' => ''
     *       ],
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $circuitName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $circuitName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Get ExpressRouteCircuit operation retreives information about the
     * specified ExpressRouteCircuit.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $circuitName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($circuitName == null) {
            Validate::notNullOrEmpty($circuitName, '$circuitName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{circuitName}' => $circuitName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Put ExpressRouteCircuit operation creates/updates a ExpressRouteCircuit
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param array $parameters Parameters supplied to the create/delete ExpressRouteCircuit operation 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => 'Standard|Premium',
     *       'family' => 'UnlimitedData|MeteredData'
     *    ],
     *    'properties' => [
     *       'allowClassicOperations' => 'false',
     *       'circuitProvisioningState' => '',
     *       'serviceProviderProvisioningState' =>
     *  'NotProvisioned|Provisioning|Provisioned|Deprovisioning',
     *       'authorizations' => '',
     *       'peerings' => '',
     *       'serviceKey' => '',
     *       'serviceProviderNotes' => '',
     *       'serviceProviderProperties' => [
     *          'serviceProviderName' => '',
     *          'peeringLocation' => '',
     *          'bandwidthInMbps' => ''
     *       ],
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => 'Standard|Premium',
     *       'family' => 'UnlimitedData|MeteredData'
     *    ],
     *    'properties' => [
     *       'allowClassicOperations' => 'false',
     *       'circuitProvisioningState' => '',
     *       'serviceProviderProvisioningState' =>
     *  'NotProvisioned|Provisioning|Provisioned|Deprovisioning',
     *       'authorizations' => '',
     *       'peerings' => '',
     *       'serviceKey' => '',
     *       'serviceProviderNotes' => '',
     *       'serviceProviderProperties' => [
     *          'serviceProviderName' => '',
     *          'peeringLocation' => '',
     *          'bandwidthInMbps' => ''
     *       ],
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => 'Standard|Premium',
     *       'family' => 'UnlimitedData|MeteredData'
     *    ],
     *    'properties' => [
     *       'allowClassicOperations' => 'false',
     *       'circuitProvisioningState' => '',
     *       'serviceProviderProvisioningState' =>
     *  'NotProvisioned|Provisioning|Provisioned|Deprovisioning',
     *       'authorizations' => '',
     *       'peerings' => '',
     *       'serviceKey' => '',
     *       'serviceProviderNotes' => '',
     *       'serviceProviderProperties' => [
     *          'serviceProviderName' => '',
     *          'peeringLocation' => '',
     *          'bandwidthInMbps' => ''
     *       ],
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     */
    public function createOrUpdate($resourceGroupName, $circuitName, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateAsync($resourceGroupName, $circuitName, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Put ExpressRouteCircuit operation creates/updates a ExpressRouteCircuit
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param array $parameters Parameters supplied to the create/delete ExpressRouteCircuit operation 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => 'Standard|Premium',
     *       'family' => 'UnlimitedData|MeteredData'
     *    ],
     *    'properties' => [
     *       'allowClassicOperations' => 'false',
     *       'circuitProvisioningState' => '',
     *       'serviceProviderProvisioningState' =>
     *  'NotProvisioned|Provisioning|Provisioned|Deprovisioning',
     *       'authorizations' => '',
     *       'peerings' => '',
     *       'serviceKey' => '',
     *       'serviceProviderNotes' => '',
     *       'serviceProviderProperties' => [
     *          'serviceProviderName' => '',
     *          'peeringLocation' => '',
     *          'bandwidthInMbps' => ''
     *       ],
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => 'Standard|Premium',
     *       'family' => 'UnlimitedData|MeteredData'
     *    ],
     *    'properties' => [
     *       'allowClassicOperations' => 'false',
     *       'circuitProvisioningState' => '',
     *       'serviceProviderProvisioningState' =>
     *  'NotProvisioned|Provisioning|Provisioned|Deprovisioning',
     *       'authorizations' => '',
     *       'peerings' => '',
     *       'serviceKey' => '',
     *       'serviceProviderNotes' => '',
     *       'serviceProviderProperties' => [
     *          'serviceProviderName' => '',
     *          'peeringLocation' => '',
     *          'bandwidthInMbps' => ''
     *       ],
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => 'Standard|Premium',
     *       'family' => 'UnlimitedData|MeteredData'
     *    ],
     *    'properties' => [
     *       'allowClassicOperations' => 'false',
     *       'circuitProvisioningState' => '',
     *       'serviceProviderProvisioningState' =>
     *  'NotProvisioned|Provisioning|Provisioned|Deprovisioning',
     *       'authorizations' => '',
     *       'peerings' => '',
     *       'serviceKey' => '',
     *       'serviceProviderNotes' => '',
     *       'serviceProviderProperties' => [
     *          'serviceProviderName' => '',
     *          'peeringLocation' => '',
     *          'bandwidthInMbps' => ''
     *       ],
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     */
    public function beginCreateOrUpdate($resourceGroupName, $circuitName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateAsync($resourceGroupName, $circuitName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Put ExpressRouteCircuit operation creates/updates a ExpressRouteCircuit
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param array $parameters Parameters supplied to the create/delete ExpressRouteCircuit operation 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => 'Standard|Premium',
     *       'family' => 'UnlimitedData|MeteredData'
     *    ],
     *    'properties' => [
     *       'allowClassicOperations' => 'false',
     *       'circuitProvisioningState' => '',
     *       'serviceProviderProvisioningState' =>
     *  'NotProvisioned|Provisioning|Provisioned|Deprovisioning',
     *       'authorizations' => '',
     *       'peerings' => '',
     *       'serviceKey' => '',
     *       'serviceProviderNotes' => '',
     *       'serviceProviderProperties' => [
     *          'serviceProviderName' => '',
     *          'peeringLocation' => '',
     *          'bandwidthInMbps' => ''
     *       ],
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateAsync($resourceGroupName, $circuitName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($circuitName == null) {
            Validate::notNullOrEmpty($circuitName, '$circuitName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}';
        $statusCodes = [201, 200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{circuitName}' => $circuitName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The ListArpTable from ExpressRouteCircuit opertion retrieves the currently
     * advertised arp table associated with the ExpressRouteCircuits in a
     * resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function listArpTable($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        $response = $this->beginlistArpTableAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The ListArpTable from ExpressRouteCircuit opertion retrieves the currently
     * advertised arp table associated with the ExpressRouteCircuits in a
     * resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginListArpTable($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        $response = $this->beginListArpTableAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The ListArpTable from ExpressRouteCircuit opertion retrieves the currently
     * advertised arp table associated with the ExpressRouteCircuits in a
     * resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginListArpTableAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($circuitName == null) {
            Validate::notNullOrEmpty($circuitName, '$circuitName');
        }
        if ($peeringName == null) {
            Validate::notNullOrEmpty($peeringName, '$peeringName');
        }
        if ($devicePath == null) {
            Validate::notNullOrEmpty($devicePath, '$devicePath');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/arpTables/{devicePath}';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{circuitName}' => $circuitName, '{peeringName}' => $peeringName, '{devicePath}' => $devicePath, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The ListRoutesTable from ExpressRouteCircuit opertion retrieves the
     * currently advertised routes table associated with the ExpressRouteCircuits
     * in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function listRoutesTable($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        $response = $this->beginlistRoutesTableAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The ListRoutesTable from ExpressRouteCircuit opertion retrieves the
     * currently advertised routes table associated with the ExpressRouteCircuits
     * in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginListRoutesTable($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        $response = $this->beginListRoutesTableAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The ListRoutesTable from ExpressRouteCircuit opertion retrieves the
     * currently advertised routes table associated with the ExpressRouteCircuits
     * in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginListRoutesTableAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($circuitName == null) {
            Validate::notNullOrEmpty($circuitName, '$circuitName');
        }
        if ($peeringName == null) {
            Validate::notNullOrEmpty($peeringName, '$peeringName');
        }
        if ($devicePath == null) {
            Validate::notNullOrEmpty($devicePath, '$devicePath');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTables/{devicePath}';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{circuitName}' => $circuitName, '{peeringName}' => $peeringName, '{devicePath}' => $devicePath, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The ListRoutesTable from ExpressRouteCircuit opertion retrieves the
     * currently advertised routes table associated with the ExpressRouteCircuits
     * in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function listRoutesTableSummary($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        $response = $this->beginlistRoutesTableSummaryAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The ListRoutesTable from ExpressRouteCircuit opertion retrieves the
     * currently advertised routes table associated with the ExpressRouteCircuits
     * in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginListRoutesTableSummary($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        $response = $this->beginListRoutesTableSummaryAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The ListRoutesTable from ExpressRouteCircuit opertion retrieves the
     * currently advertised routes table associated with the ExpressRouteCircuits
     * in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param string $devicePath The path of the device.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginListRoutesTableSummaryAsync($resourceGroupName, $circuitName, $peeringName, $devicePath, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($circuitName == null) {
            Validate::notNullOrEmpty($circuitName, '$circuitName');
        }
        if ($peeringName == null) {
            Validate::notNullOrEmpty($peeringName, '$peeringName');
        }
        if ($devicePath == null) {
            Validate::notNullOrEmpty($devicePath, '$devicePath');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTablesSummary/{devicePath}';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{circuitName}' => $circuitName, '{peeringName}' => $peeringName, '{devicePath}' => $devicePath, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Liststats ExpressRouteCircuit opertion retrieves all the stats from a
     * ExpressRouteCircuits in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'primarybytesIn' => '',
     *    'primarybytesOut' => '',
     *    'secondarybytesIn' => '',
     *    'secondarybytesOut' => ''
     * ];
     * </pre>
     */
    public function getStats($resourceGroupName, $circuitName, array $customHeaders = [])
    {
        $response = $this->getStatsAsync($resourceGroupName, $circuitName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Liststats ExpressRouteCircuit opertion retrieves all the stats from a
     * ExpressRouteCircuits in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getStatsAsync($resourceGroupName, $circuitName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($circuitName == null) {
            Validate::notNullOrEmpty($circuitName, '$circuitName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/stats';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{circuitName}' => $circuitName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Liststats ExpressRouteCircuit opertion retrieves all the stats from a
     * ExpressRouteCircuits in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'primarybytesIn' => '',
     *    'primarybytesOut' => '',
     *    'secondarybytesIn' => '',
     *    'secondarybytesOut' => ''
     * ];
     * </pre>
     */
    public function getPeeringStats($resourceGroupName, $circuitName, $peeringName, array $customHeaders = [])
    {
        $response = $this->getPeeringStatsAsync($resourceGroupName, $circuitName, $peeringName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Liststats ExpressRouteCircuit opertion retrieves all the stats from a
     * ExpressRouteCircuits in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $circuitName The name of the circuit.
     * @param string $peeringName The name of the peering.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getPeeringStatsAsync($resourceGroupName, $circuitName, $peeringName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($circuitName == null) {
            Validate::notNullOrEmpty($circuitName, '$circuitName');
        }
        if ($peeringName == null) {
            Validate::notNullOrEmpty($peeringName, '$peeringName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/stats';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{circuitName}' => $circuitName, '{peeringName}' => $peeringName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The List ExpressRouteCircuit opertion retrieves all the
     * ExpressRouteCircuits in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The List ExpressRouteCircuit opertion retrieves all the
     * ExpressRouteCircuits in a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The List ExpressRouteCircuit opertion retrieves all the
     * ExpressRouteCircuits in a subscription.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAll(array $customHeaders = [])
    {
        $response = $this->listAllAsync($customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The List ExpressRouteCircuit opertion retrieves all the
     * ExpressRouteCircuits in a subscription.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAllAsync(array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The List ExpressRouteCircuit opertion retrieves all the
     * ExpressRouteCircuits in a resource group.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The List ExpressRouteCircuit opertion retrieves all the
     * ExpressRouteCircuits in a resource group.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The List ExpressRouteCircuit opertion retrieves all the
     * ExpressRouteCircuits in a subscription.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAllNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAllNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The List ExpressRouteCircuit opertion retrieves all the
     * ExpressRouteCircuits in a subscription.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAllNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
