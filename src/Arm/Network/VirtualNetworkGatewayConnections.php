<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-06-01
 */

namespace MicrosoftAzure\Arm\Network;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * VirtualNetworkGatewayConnections for The Microsoft Azure Network management
 * API provides a RESTful set of web services that interact with Microsoft
 * Azure Networks service to manage your network resrources. The API has
 * entities that capture the relationship between an end user and the
 * Microsoft Azure Networks service.
 */
class VirtualNetworkGatewayConnections
{
    /**
     * The service client object for the operations.
     *
     * @var NetworkManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for VirtualNetworkGatewayConnections.
     *
     * @param NetworkManagementClient, Service client for VirtualNetworkGatewayConnections
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * The Put VirtualNetworkGatewayConnection operation creates/updates a virtual
     * network gateway connection in the specified resource group through Network
     * resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway conenction.
     * @param array $parameters Parameters supplied to the Begin Create or update Virtual Network
     *  Gateway connection operation through Network resource provider. 
     * <pre>
     * [
     *    'properties' => [
     *       'authorizationKey' => '',
     *       'virtualNetworkGateway1' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'virtualNetworkGateway2' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'localNetworkGateway2' => [
     *          'properties' => [
     *             'localNetworkAddressSpace' => [
     *                'addressPrefixes' => ''
     *             ],
     *             'gatewayIpAddress' => '',
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'connectionType' => 'IPsec|Vnet2Vnet|ExpressRoute|VPNClient',
     *       'routingWeight' => '',
     *       'sharedKey' => '',
     *       'connectionStatus' => 'Unknown|Connecting|Connected|NotConnected',
     *       'egressBytesTransferred' => '',
     *       'ingressBytesTransferred' => '',
     *       'peer' => [
     *          'id' => ''
     *       ],
     *       'enableBgp' => 'false',
     *       'resourceGuid' => '',
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'authorizationKey' => '',
     *       'virtualNetworkGateway1' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'virtualNetworkGateway2' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'localNetworkGateway2' => [
     *          'properties' => [
     *             'localNetworkAddressSpace' => [
     *                'addressPrefixes' => ''
     *             ],
     *             'gatewayIpAddress' => '',
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'connectionType' => 'IPsec|Vnet2Vnet|ExpressRoute|VPNClient',
     *       'routingWeight' => '',
     *       'sharedKey' => '',
     *       'connectionStatus' => 'Unknown|Connecting|Connected|NotConnected',
     *       'egressBytesTransferred' => '',
     *       'ingressBytesTransferred' => '',
     *       'peer' => [
     *          'id' => ''
     *       ],
     *       'enableBgp' => 'false',
     *       'resourceGuid' => '',
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'authorizationKey' => '',
     *       'virtualNetworkGateway1' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'virtualNetworkGateway2' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'localNetworkGateway2' => [
     *          'properties' => [
     *             'localNetworkAddressSpace' => [
     *                'addressPrefixes' => ''
     *             ],
     *             'gatewayIpAddress' => '',
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'connectionType' => 'IPsec|Vnet2Vnet|ExpressRoute|VPNClient',
     *       'routingWeight' => '',
     *       'sharedKey' => '',
     *       'connectionStatus' => 'Unknown|Connecting|Connected|NotConnected',
     *       'egressBytesTransferred' => '',
     *       'ingressBytesTransferred' => '',
     *       'peer' => [
     *          'id' => ''
     *       ],
     *       'enableBgp' => 'false',
     *       'resourceGuid' => '',
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     */
    public function createOrUpdate($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Put VirtualNetworkGatewayConnection operation creates/updates a virtual
     * network gateway connection in the specified resource group through Network
     * resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway conenction.
     * @param array $parameters Parameters supplied to the Begin Create or update Virtual Network
     *  Gateway connection operation through Network resource provider. 
     * <pre>
     * [
     *    'properties' => [
     *       'authorizationKey' => '',
     *       'virtualNetworkGateway1' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'virtualNetworkGateway2' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'localNetworkGateway2' => [
     *          'properties' => [
     *             'localNetworkAddressSpace' => [
     *                'addressPrefixes' => ''
     *             ],
     *             'gatewayIpAddress' => '',
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'connectionType' => 'IPsec|Vnet2Vnet|ExpressRoute|VPNClient',
     *       'routingWeight' => '',
     *       'sharedKey' => '',
     *       'connectionStatus' => 'Unknown|Connecting|Connected|NotConnected',
     *       'egressBytesTransferred' => '',
     *       'ingressBytesTransferred' => '',
     *       'peer' => [
     *          'id' => ''
     *       ],
     *       'enableBgp' => 'false',
     *       'resourceGuid' => '',
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'authorizationKey' => '',
     *       'virtualNetworkGateway1' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'virtualNetworkGateway2' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'localNetworkGateway2' => [
     *          'properties' => [
     *             'localNetworkAddressSpace' => [
     *                'addressPrefixes' => ''
     *             ],
     *             'gatewayIpAddress' => '',
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'connectionType' => 'IPsec|Vnet2Vnet|ExpressRoute|VPNClient',
     *       'routingWeight' => '',
     *       'sharedKey' => '',
     *       'connectionStatus' => 'Unknown|Connecting|Connected|NotConnected',
     *       'egressBytesTransferred' => '',
     *       'ingressBytesTransferred' => '',
     *       'peer' => [
     *          'id' => ''
     *       ],
     *       'enableBgp' => 'false',
     *       'resourceGuid' => '',
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'authorizationKey' => '',
     *       'virtualNetworkGateway1' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'virtualNetworkGateway2' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'localNetworkGateway2' => [
     *          'properties' => [
     *             'localNetworkAddressSpace' => [
     *                'addressPrefixes' => ''
     *             ],
     *             'gatewayIpAddress' => '',
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'connectionType' => 'IPsec|Vnet2Vnet|ExpressRoute|VPNClient',
     *       'routingWeight' => '',
     *       'sharedKey' => '',
     *       'connectionStatus' => 'Unknown|Connecting|Connected|NotConnected',
     *       'egressBytesTransferred' => '',
     *       'ingressBytesTransferred' => '',
     *       'peer' => [
     *          'id' => ''
     *       ],
     *       'enableBgp' => 'false',
     *       'resourceGuid' => '',
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     */
    public function beginCreateOrUpdate($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Put VirtualNetworkGatewayConnection operation creates/updates a virtual
     * network gateway connection in the specified resource group through Network
     * resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway conenction.
     * @param array $parameters Parameters supplied to the Begin Create or update Virtual Network
     *  Gateway connection operation through Network resource provider. 
     * <pre>
     * [
     *    'properties' => [
     *       'authorizationKey' => '',
     *       'virtualNetworkGateway1' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'virtualNetworkGateway2' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'localNetworkGateway2' => [
     *          'properties' => [
     *             'localNetworkAddressSpace' => [
     *                'addressPrefixes' => ''
     *             ],
     *             'gatewayIpAddress' => '',
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'connectionType' => 'IPsec|Vnet2Vnet|ExpressRoute|VPNClient',
     *       'routingWeight' => '',
     *       'sharedKey' => '',
     *       'connectionStatus' => 'Unknown|Connecting|Connected|NotConnected',
     *       'egressBytesTransferred' => '',
     *       'ingressBytesTransferred' => '',
     *       'peer' => [
     *          'id' => ''
     *       ],
     *       'enableBgp' => 'false',
     *       'resourceGuid' => '',
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($virtualNetworkGatewayConnectionName == null) {
            Validate::notNullOrEmpty($virtualNetworkGatewayConnectionName, '$virtualNetworkGatewayConnectionName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{virtualNetworkGatewayConnectionName}' => $virtualNetworkGatewayConnectionName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Get VirtualNetworkGatewayConnection operation retrieves information
     * about the specified virtual network gateway connection through Network
     * resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'authorizationKey' => '',
     *       'virtualNetworkGateway1' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'virtualNetworkGateway2' => [
     *          'properties' => [
     *             'ipConfigurations' => '',
     *             'gatewayType' => 'Vpn|ExpressRoute',
     *             'vpnType' => 'PolicyBased|RouteBased',
     *             'enableBgp' => 'false',
     *             'gatewayDefaultSite' => [
     *                'id' => ''
     *             ],
     *             'sku' => [
     *                'name' => 'Basic|HighPerformance|Standard',
     *                'tier' => 'Basic|HighPerformance|Standard',
     *                'capacity' => ''
     *             ],
     *             'vpnClientConfiguration' => [
     *                'vpnClientAddressPool' => ,
     *                'vpnClientRootCertificates' => '',
     *                'vpnClientRevokedCertificates' => ''
     *             ],
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'localNetworkGateway2' => [
     *          'properties' => [
     *             'localNetworkAddressSpace' => [
     *                'addressPrefixes' => ''
     *             ],
     *             'gatewayIpAddress' => '',
     *             'bgpSettings' => [
     *                'asn' => '',
     *                'bgpPeeringAddress' => '',
     *                'peerWeight' => ''
     *             ],
     *             'resourceGuid' => '',
     *             'provisioningState' => ''
     *          ],
     *          'etag' => ''
     *       ],
     *       'connectionType' => 'IPsec|Vnet2Vnet|ExpressRoute|VPNClient',
     *       'routingWeight' => '',
     *       'sharedKey' => '',
     *       'connectionStatus' => 'Unknown|Connecting|Connected|NotConnected',
     *       'egressBytesTransferred' => '',
     *       'ingressBytesTransferred' => '',
     *       'peer' => [
     *          'id' => ''
     *       ],
     *       'enableBgp' => 'false',
     *       'resourceGuid' => '',
     *       'provisioningState' => ''
     *    ],
     *    'etag' => ''
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $virtualNetworkGatewayConnectionName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Get VirtualNetworkGatewayConnection operation retrieves information
     * about the specified virtual network gateway connection through Network
     * resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($virtualNetworkGatewayConnectionName == null) {
            Validate::notNullOrEmpty($virtualNetworkGatewayConnectionName, '$virtualNetworkGatewayConnectionName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{virtualNetworkGatewayConnectionName}' => $virtualNetworkGatewayConnectionName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Delete VirtualNetworkGatewayConnection operation deletes the specifed
     * virtual network Gateway connection through Network resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function delete($resourceGroupName, $virtualNetworkGatewayConnectionName, array $customHeaders = [])
    {
        $response = $this->begindeleteAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Delete VirtualNetworkGatewayConnection operation deletes the specifed
     * virtual network Gateway connection through Network resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function beginDelete($resourceGroupName, $virtualNetworkGatewayConnectionName, array $customHeaders = [])
    {
        $response = $this->beginDeleteAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Delete VirtualNetworkGatewayConnection operation deletes the specifed
     * virtual network Gateway connection through Network resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The name of the virtual
     * network gateway connection.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($virtualNetworkGatewayConnectionName == null) {
            Validate::notNullOrEmpty($virtualNetworkGatewayConnectionName, '$virtualNetworkGatewayConnectionName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}';
        $statusCodes = [200, 202, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{virtualNetworkGatewayConnectionName}' => $virtualNetworkGatewayConnectionName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves
     * information about the specified virtual network gateway connection shared
     * key through Network resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $connectionSharedKeyName The virtual network gateway
     * connection shared key name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function getSharedKey($resourceGroupName, $connectionSharedKeyName, array $customHeaders = [])
    {
        $response = $this->getSharedKeyAsync($resourceGroupName, $connectionSharedKeyName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves
     * information about the specified virtual network gateway connection shared
     * key through Network resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $connectionSharedKeyName The virtual network gateway
     * connection shared key name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getSharedKeyAsync($resourceGroupName, $connectionSharedKeyName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($connectionSharedKeyName == null) {
            Validate::notNullOrEmpty($connectionSharedKeyName, '$connectionSharedKeyName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{connectionSharedKeyName}/sharedkey';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{connectionSharedKeyName}' => $connectionSharedKeyName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network
     * resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     * @param array $parameters Parameters supplied to the Begin Reset Virtual Network Gateway
     *  connection shared key operation through Network resource provider. 
     * <pre>
     * [
     *    'keyLength' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'keyLength' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function resetSharedKey($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginresetSharedKeyAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network
     * resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     * @param array $parameters Parameters supplied to the Begin Reset Virtual Network Gateway
     *  connection shared key operation through Network resource provider. 
     * <pre>
     * [
     *    'keyLength' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'keyLength' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginResetSharedKey($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginResetSharedKeyAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The VirtualNetworkGatewayConnectionResetSharedKey operation resets the
     * virtual network gateway connection shared key for passed virtual network
     * gateway connection in the specified resource group through Network
     * resource provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The virtual network
     * gateway connection reset shared key Name.
     * @param array $parameters Parameters supplied to the Begin Reset Virtual Network Gateway
     *  connection shared key operation through Network resource provider. 
     * <pre>
     * [
     *    'keyLength' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginResetSharedKeyAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($virtualNetworkGatewayConnectionName == null) {
            Validate::notNullOrEmpty($virtualNetworkGatewayConnectionName, '$virtualNetworkGatewayConnectionName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey/reset';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{virtualNetworkGatewayConnectionName}' => $virtualNetworkGatewayConnectionName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     * @param array $parameters Parameters supplied to the Begin Set Virtual Network Gateway conection
     *  Shared key operation throughNetwork resource provider. 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function setSharedKey($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginsetSharedKeyAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     * @param array $parameters Parameters supplied to the Begin Set Virtual Network Gateway conection
     *  Shared key operation throughNetwork resource provider. 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function beginSetSharedKey($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginSetSharedKeyAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual
     * network gateway connection shared key for passed virtual network gateway
     * connection in the specified resource group through Network resource
     * provider.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $virtualNetworkGatewayConnectionName The virtual network
     * gateway connection name.
     * @param array $parameters Parameters supplied to the Begin Set Virtual Network Gateway conection
     *  Shared key operation throughNetwork resource provider. 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginSetSharedKeyAsync($resourceGroupName, $virtualNetworkGatewayConnectionName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($virtualNetworkGatewayConnectionName == null) {
            Validate::notNullOrEmpty($virtualNetworkGatewayConnectionName, '$virtualNetworkGatewayConnectionName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey';
        $statusCodes = [201, 200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{virtualNetworkGatewayConnectionName}' => $virtualNetworkGatewayConnectionName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The List VirtualNetworkGatewayConnections operation retrieves all the
     * virtual network gateways connections created.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
