<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-04-02
 */

namespace MicrosoftAzure\Arm\Cdn;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * CustomDomains for Use these APIs to manage Azure CDN resources through the
 * Azure Resource Manager. You must make sure that requests made to these
 * resources are secure. For more information, see <a
 * href="https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx">Authenticating
 * Azure Resource Manager requests.</a>
 */
class CustomDomains
{
    /**
     * The service client object for the operations.
     *
     * @var CdnManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for CustomDomains.
     *
     * @param CdnManagementClient, Service client for CustomDomains
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Lists the existing CDN custom domains within an endpoint.
     *
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listByEndpoint($endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listByEndpointAsync($endpointName, $profileName, $resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the existing CDN custom domains within an endpoint.
     *
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByEndpointAsync($endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        if ($endpointName == null) {
            Validate::notNullOrEmpty($endpointName, '$endpointName');
        }
        if ($profileName == null) {
            Validate::notNullOrEmpty($profileName, '$profileName');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{endpointName}' => $endpointName, '{profileName}' => $profileName, '{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets an existing CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     */
    public function get($customDomainName, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        $response = $this->getAsync($customDomainName, $endpointName, $profileName, $resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets an existing CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($customDomainName, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        if ($customDomainName == null) {
            Validate::notNullOrEmpty($customDomainName, '$customDomainName');
        }
        if ($endpointName == null) {
            Validate::notNullOrEmpty($endpointName, '$endpointName');
        }
        if ($profileName == null) {
            Validate::notNullOrEmpty($profileName, '$profileName');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{customDomainName}' => $customDomainName, '{endpointName}' => $endpointName, '{profileName}' => $profileName, '{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a new CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param array $customDomainProperties Custom domain properties required for creation. 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     */
    public function create($customDomainName, array $customDomainProperties, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        $response = $this->begincreateAsync($customDomainName, $customDomainProperties, $endpointName, $profileName, $resourceGroupName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param array $customDomainProperties Custom domain properties required for creation. 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     */
    public function beginCreate($customDomainName, array $customDomainProperties, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        $response = $this->beginCreateAsync($customDomainName, $customDomainProperties, $endpointName, $profileName, $resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a new CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param array $customDomainProperties Custom domain properties required for creation. 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateAsync($customDomainName, array $customDomainProperties, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        if ($customDomainName == null) {
            Validate::notNullOrEmpty($customDomainName, '$customDomainName');
        }
        if ($customDomainProperties == null) {
            Validate::notNullOrEmpty($customDomainProperties, '$customDomainProperties');
        }
        if ($endpointName == null) {
            Validate::notNullOrEmpty($endpointName, '$endpointName');
        }
        if ($profileName == null) {
            Validate::notNullOrEmpty($profileName, '$profileName');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}';
        $statusCodes = [200, 201, 202];
        $method = 'PUT';

        $path = strtr($path, ['{customDomainName}' => $customDomainName, '{endpointName}' => $endpointName, '{profileName}' => $profileName, '{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($customDomainProperties);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates an existing CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param array $customDomainProperties Custom domain properties to update. 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array */
    public function update($customDomainName, array $customDomainProperties, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        $response = $this->updateAsync($customDomainName, $customDomainProperties, $endpointName, $profileName, $resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates an existing CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param array $customDomainProperties Custom domain properties to update. 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => ''
     *    ]
     * ];
     * </pre>
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateAsync($customDomainName, array $customDomainProperties, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        if ($customDomainName == null) {
            Validate::notNullOrEmpty($customDomainName, '$customDomainName');
        }
        if ($customDomainProperties == null) {
            Validate::notNullOrEmpty($customDomainProperties, '$customDomainProperties');
        }
        if ($endpointName == null) {
            Validate::notNullOrEmpty($endpointName, '$endpointName');
        }
        if ($profileName == null) {
            Validate::notNullOrEmpty($profileName, '$profileName');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{customDomainName}' => $customDomainName, '{endpointName}' => $endpointName, '{profileName}' => $profileName, '{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($customDomainProperties);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes an existing CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function deleteIfExists($customDomainName, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        $response = $this->begindeleteIfExistsAsync($customDomainName, $endpointName, $profileName, $resourceGroupName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes an existing CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'properties' => [
     *       'hostName' => '',
     *       'resourceState' => 'Creating|Active|Deleting',
     *       'provisioningState' => 'Creating|Succeeded|Failed'
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function beginDeleteIfExists($customDomainName, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        $response = $this->beginDeleteIfExistsAsync($customDomainName, $endpointName, $profileName, $resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes an existing CDN custom domain within an endpoint.
     *
     * @param string $customDomainName Name of the custom domain within an
     * endpoint.
     * @param string $endpointName Name of the endpoint within the CDN profile.
     * @param string $profileName Name of the CDN profile within the resource
     * group.
     * @param string $resourceGroupName Name of the resource group within the
     * Azure subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteIfExistsAsync($customDomainName, $endpointName, $profileName, $resourceGroupName, array $customHeaders = [])
    {
        if ($customDomainName == null) {
            Validate::notNullOrEmpty($customDomainName, '$customDomainName');
        }
        if ($endpointName == null) {
            Validate::notNullOrEmpty($endpointName, '$endpointName');
        }
        if ($profileName == null) {
            Validate::notNullOrEmpty($profileName, '$profileName');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/endpoints/{endpointName}/customDomains/{customDomainName}';
        $statusCodes = [200, 202, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{customDomainName}' => $customDomainName, '{endpointName}' => $endpointName, '{profileName}' => $profileName, '{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
