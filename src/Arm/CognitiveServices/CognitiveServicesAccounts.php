<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-02-01-preview
 */

namespace MicrosoftAzure\Arm\CognitiveServices;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * CognitiveServicesAccounts for Cognitive Services Management Client
 */
class CognitiveServicesAccounts
{
    /**
     * The service client object for the operations.
     *
     * @var CognitiveServicesManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for CognitiveServicesAccounts.
     *
     * @param CognitiveServicesManagementClient, Service client for CognitiveServicesAccounts
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Create Cognitive Services Account. Accounts is a resource group wide
     * resource type. It holds the keys for developer to access intelligent APIs.
     * It's also the resource type for billing.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $parameters The parameters to provide for the created account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'F0|S0|S1|S2|S3|S4',
     *       'tier' => 'Free|Standard|Premium'
     *    ],
     *    'kind' => 'ComputerVision|Emotion|Face|LUIS|Recommendations|Speech|TextAnalytics|WebLM',
     *    'location' => 'requiredLocation',
     *    'tags' => '',
     *    'properties' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'etag' => '',
     *    'id' => '',
     *    'kind' => '',
     *    'location' => '',
     *    'name' => '',
     *    'properties' => [
     *       'provisioningState' => 'Creating|ResolvingDNS|Succeeded|Failed',
     *       'endpoint' => ''
     *    ],
     *    'sku' => [
     *       'name' => 'F0|S0|S1|S2|S3|S4',
     *       'tier' => 'Free|Standard|Premium'
     *    ],
     *    'tags' => '',
     *    'type' => ''
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'etag' => '',
     *    'id' => '',
     *    'kind' => '',
     *    'location' => '',
     *    'name' => '',
     *    'properties' => [
     *       'provisioningState' => 'Creating|ResolvingDNS|Succeeded|Failed',
     *       'endpoint' => ''
     *    ],
     *    'sku' => [
     *       'name' => 'F0|S0|S1|S2|S3|S4',
     *       'tier' => 'Free|Standard|Premium'
     *    ],
     *    'tags' => '',
     *    'type' => ''
     * ];
     * </pre>
     */
    public function create($resourceGroupName, $accountName, array $parameters, array $customHeaders = [])
    {
        $response = $this->createAsync($resourceGroupName, $accountName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create Cognitive Services Account. Accounts is a resource group wide
     * resource type. It holds the keys for developer to access intelligent APIs.
     * It's also the resource type for billing.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $parameters The parameters to provide for the created account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'F0|S0|S1|S2|S3|S4',
     *       'tier' => 'Free|Standard|Premium'
     *    ],
     *    'kind' => 'ComputerVision|Emotion|Face|LUIS|Recommendations|Speech|TextAnalytics|WebLM',
     *    'location' => 'requiredLocation',
     *    'tags' => '',
     *    'properties' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createAsync($resourceGroupName, $accountName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates a Cognitive Services account
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $body The parameters to provide for the created account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'F0|S0|S1|S2|S3|S4',
     *       'tier' => 'Free|Standard|Premium'
     *    ],
     *    'tags' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'etag' => '',
     *    'id' => '',
     *    'kind' => '',
     *    'location' => '',
     *    'name' => '',
     *    'properties' => [
     *       'provisioningState' => 'Creating|ResolvingDNS|Succeeded|Failed',
     *       'endpoint' => ''
     *    ],
     *    'sku' => [
     *       'name' => 'F0|S0|S1|S2|S3|S4',
     *       'tier' => 'Free|Standard|Premium'
     *    ],
     *    'tags' => '',
     *    'type' => ''
     * ];
     * </pre>
     */
    public function update($resourceGroupName, $accountName, array $body, array $customHeaders = [])
    {
        $response = $this->updateAsync($resourceGroupName, $accountName, $body, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates a Cognitive Services account
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $body The parameters to provide for the created account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'F0|S0|S1|S2|S3|S4',
     *       'tier' => 'Free|Standard|Premium'
     *    ],
     *    'tags' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateAsync($resourceGroupName, $accountName, array $body, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($body == null) {
            Validate::notNullOrEmpty($body, '$body');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($body);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a Cognitive Services account from the resource group.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function delete($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->deleteAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a Cognitive Services account from the resource group.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}';
        $statusCodes = [200, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns a Cognitive Services account specified by the parameters.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'etag' => '',
     *    'id' => '',
     *    'kind' => '',
     *    'location' => '',
     *    'name' => '',
     *    'properties' => [
     *       'provisioningState' => 'Creating|ResolvingDNS|Succeeded|Failed',
     *       'endpoint' => ''
     *    ],
     *    'sku' => [
     *       'name' => 'F0|S0|S1|S2|S3|S4',
     *       'tier' => 'Free|Standard|Premium'
     *    ],
     *    'tags' => '',
     *    'type' => ''
     * ];
     * </pre>
     */
    public function getProperties($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->getPropertiesAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns a Cognitive Services account specified by the parameters.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getPropertiesAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns all the resources of a particular type belonging to a resource group
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listByResourceGroup($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listByResourceGroupAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns all the resources of a particular type belonging to a resource group
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByResourceGroupAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns all the resources of a particular type belonging to a subscription.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listOperation(array $customHeaders = [])
    {
        $response = $this->listOperationAsync($customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns all the resources of a particular type belonging to a subscription.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync(array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/accounts';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the account keys for the specified Cognitive Services account.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Congitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'key1' => '',
     *    'key2' => ''
     * ];
     * </pre>
     */
    public function listKeys($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->listKeysAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the account keys for the specified Cognitive Services account.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Congitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listKeysAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/listKeys';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Regenerates the specified account key for the specified Cognitive Services
     * account.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $body regenerate key parameters. 
     * <pre>
     * [
     *    'keyName' => 'Key1|Key2'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'key1' => '',
     *    'key2' => ''
     * ];
     * </pre>
     */
    public function regenerateKey($resourceGroupName, $accountName, array $body, array $customHeaders = [])
    {
        $response = $this->regenerateKeyAsync($resourceGroupName, $accountName, $body, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Regenerates the specified account key for the specified Cognitive Services
     * account.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $body regenerate key parameters. 
     * <pre>
     * [
     *    'keyName' => 'Key1|Key2'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function regenerateKeyAsync($resourceGroupName, $accountName, array $body, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($body == null) {
            Validate::notNullOrEmpty($body, '$body');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/regenerateKey';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($body);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * List available SKUs for the requested Cognitive Services account
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listSkus($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->listSkusAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * List available SKUs for the requested Cognitive Services account
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the cognitive services account
     * within the specified resource group. Cognitive Services account names must
     * be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSkusAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CognitiveServices/accounts/{accountName}/skus';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
