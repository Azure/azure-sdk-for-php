<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-12-01
 */

namespace MicrosoftAzure\Arm\Batch;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * ApplicationOperations.
 */
class ApplicationOperations
{
    /**
     * The service client object for the operations.
     *
     * @var BatchManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for ApplicationOperations.
     *
     * @param BatchManagementClient, Service client for ApplicationOperations
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Activates the specified application package.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $id The id of the application.
     * @param string $version The version of the application to activate.
     * @param array $parameters The parameters for the request. 
     * <pre>
     * [
     *    'format' => 'requiredFormat'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     */
    public function activateApplicationPackage($resourceGroupName, $accountName, $id, $version, array $parameters, array $customHeaders = [])
    {
        $response = $this->activateApplicationPackageAsync($resourceGroupName, $accountName, $id, $version, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Activates the specified application package.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $id The id of the application.
     * @param string $version The version of the application to activate.
     * @param array $parameters The parameters for the request. 
     * <pre>
     * [
     *    'format' => 'requiredFormat'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function activateApplicationPackageAsync($resourceGroupName, $accountName, $id, $version, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($version == null) {
            Validate::notNullOrEmpty($version, '$version');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{id}/versions/{version}/activate';
        $statusCodes = [204];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{id}' => $id, '{version}' => $version, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Adds an application to the specified Batch account.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param array $parameters The parameters for the request. 
     * <pre>
     * [
     *    'allowUpdates' => 'false',
     *    'displayName' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'id' => '',
     *    'displayName' => '',
     *    'packages' => '',
     *    'allowUpdates' => 'false',
     *    'defaultVersion' => ''
     * ];
     * </pre>
     */
    public function addApplication($resourceGroupName, $accountName, $applicationId, array $parameters, array $customHeaders = [])
    {
        $response = $this->addApplicationAsync($resourceGroupName, $accountName, $applicationId, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Adds an application to the specified Batch account.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param array $parameters The parameters for the request. 
     * <pre>
     * [
     *    'allowUpdates' => 'false',
     *    'displayName' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function addApplicationAsync($resourceGroupName, $accountName, $applicationId, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($applicationId == null) {
            Validate::notNullOrEmpty($applicationId, '$applicationId');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}';
        $statusCodes = [201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{applicationId}' => $applicationId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes an application.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     */
    public function deleteApplication($resourceGroupName, $accountName, $applicationId, array $customHeaders = [])
    {
        $response = $this->deleteApplicationAsync($resourceGroupName, $accountName, $applicationId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes an application.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteApplicationAsync($resourceGroupName, $accountName, $applicationId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($applicationId == null) {
            Validate::notNullOrEmpty($applicationId, '$applicationId');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}';
        $statusCodes = [204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{applicationId}' => $applicationId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets information about the specified application.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'displayName' => '',
     *    'packages' => '',
     *    'allowUpdates' => 'false',
     *    'defaultVersion' => ''
     * ];
     * </pre>
     */
    public function getApplication($resourceGroupName, $accountName, $applicationId, array $customHeaders = [])
    {
        $response = $this->getApplicationAsync($resourceGroupName, $accountName, $applicationId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets information about the specified application.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getApplicationAsync($resourceGroupName, $accountName, $applicationId, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($applicationId == null) {
            Validate::notNullOrEmpty($applicationId, '$applicationId');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{applicationId}' => $applicationId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates settings for the specified application.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param array $parameters The parameters for the request. 
     * <pre>
     * [
     *    'allowUpdates' => 'false',
     *    'defaultVersion' => '',
     *    'displayName' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     */
    public function updateApplication($resourceGroupName, $accountName, $applicationId, array $parameters, array $customHeaders = [])
    {
        $response = $this->updateApplicationAsync($resourceGroupName, $accountName, $applicationId, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates settings for the specified application.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param array $parameters The parameters for the request. 
     * <pre>
     * [
     *    'allowUpdates' => 'false',
     *    'defaultVersion' => '',
     *    'displayName' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateApplicationAsync($resourceGroupName, $accountName, $applicationId, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($applicationId == null) {
            Validate::notNullOrEmpty($applicationId, '$applicationId');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}';
        $statusCodes = [204];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{applicationId}' => $applicationId, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates an application package record.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param string $version The version of the application.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'id' => '',
     *    'version' => '',
     *    'storageUrl' => '',
     *    'storageUrlExpiry' => ''
     * ];
     * </pre>
     */
    public function addApplicationPackage($resourceGroupName, $accountName, $applicationId, $version, array $customHeaders = [])
    {
        $response = $this->addApplicationPackageAsync($resourceGroupName, $accountName, $applicationId, $version, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates an application package record.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param string $version The version of the application.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function addApplicationPackageAsync($resourceGroupName, $accountName, $applicationId, $version, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($applicationId == null) {
            Validate::notNullOrEmpty($applicationId, '$applicationId');
        }
        if ($version == null) {
            Validate::notNullOrEmpty($version, '$version');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}';
        $statusCodes = [201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{applicationId}' => $applicationId, '{version}' => $version, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes an application package record and its associated binary file.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param string $version The version of the application to delete.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     */
    public function deleteApplicationPackage($resourceGroupName, $accountName, $applicationId, $version, array $customHeaders = [])
    {
        $response = $this->deleteApplicationPackageAsync($resourceGroupName, $accountName, $applicationId, $version, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes an application package record and its associated binary file.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param string $version The version of the application to delete.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteApplicationPackageAsync($resourceGroupName, $accountName, $applicationId, $version, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($applicationId == null) {
            Validate::notNullOrEmpty($applicationId, '$applicationId');
        }
        if ($version == null) {
            Validate::notNullOrEmpty($version, '$version');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}';
        $statusCodes = [204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{applicationId}' => $applicationId, '{version}' => $version, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets information about the specified application package.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param string $version The version of the application.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'version' => '',
     *    'state' => 'pending|active|unmapped',
     *    'format' => '',
     *    'storageUrl' => '',
     *    'storageUrlExpiry' => '',
     *    'lastActivationTime' => ''
     * ];
     * </pre>
     */
    public function getApplicationPackage($resourceGroupName, $accountName, $applicationId, $version, array $customHeaders = [])
    {
        $response = $this->getApplicationPackageAsync($resourceGroupName, $accountName, $applicationId, $version, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets information about the specified application package.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param string $applicationId The id of the application.
     * @param string $version The version of the application.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getApplicationPackageAsync($resourceGroupName, $accountName, $applicationId, $version, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($applicationId == null) {
            Validate::notNullOrEmpty($applicationId, '$applicationId');
        }
        if ($version == null) {
            Validate::notNullOrEmpty($version, '$version');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{applicationId}' => $applicationId, '{version}' => $version, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all of the applications in the specified account.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param int $maxresults The maximum number of items to return in the
     * response.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($resourceGroupName, $accountName, $maxresults = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($resourceGroupName, $accountName, $maxresults, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all of the applications in the specified account.
     *
     * @param string $resourceGroupName The name of the resource group that
     * contains the Batch account.
     * @param string $accountName The name of the Batch account.
     * @param int $maxresults The maximum number of items to return in the
     * response.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($resourceGroupName, $accountName, $maxresults = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['maxresults' => $maxresults, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all of the applications in the specified account.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all of the applications in the specified account.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
