<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-07-01-preview
 */

namespace MicrosoftAzure\Arm\ServerManagement;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Gateway for REST API for Azure Server Management Service
 */
class Gateway
{
    /**
     * The service client object for the operations.
     *
     * @var ServerManagement
     */
    private $_client;

    /**
     * Creates a new instance for Gateway.
     *
     * @param ServerManagement, Service client for Gateway
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $gatewayParameters Parameters supplied to the CreateOrUpdate operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'autoUpgrade' => 'On|Off'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'created' => '',
     *       'updated' => '',
     *       'autoUpgrade' => 'On|Off',
     *       'desiredVersion' => '',
     *       'instances' => '',
     *       'activeMessageCount' => '',
     *       'latestPublishedMsiVersion' => '',
     *       'publishedTimeUtc' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'created' => '',
     *       'updated' => '',
     *       'autoUpgrade' => 'On|Off',
     *       'desiredVersion' => '',
     *       'instances' => '',
     *       'activeMessageCount' => '',
     *       'latestPublishedMsiVersion' => '',
     *       'publishedTimeUtc' => ''
     *    ]
     * ];
     * </pre>
     */
    public function create($resourceGroupName, $gatewayName, array $gatewayParameters, array $customHeaders = [])
    {
        $response = $this->begincreateAsync($resourceGroupName, $gatewayName, $gatewayParameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $gatewayParameters Parameters supplied to the CreateOrUpdate operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'autoUpgrade' => 'On|Off'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'created' => '',
     *       'updated' => '',
     *       'autoUpgrade' => 'On|Off',
     *       'desiredVersion' => '',
     *       'instances' => '',
     *       'activeMessageCount' => '',
     *       'latestPublishedMsiVersion' => '',
     *       'publishedTimeUtc' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'created' => '',
     *       'updated' => '',
     *       'autoUpgrade' => 'On|Off',
     *       'desiredVersion' => '',
     *       'instances' => '',
     *       'activeMessageCount' => '',
     *       'latestPublishedMsiVersion' => '',
     *       'publishedTimeUtc' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginCreate($resourceGroupName, $gatewayName, array $gatewayParameters, array $customHeaders = [])
    {
        $response = $this->beginCreateAsync($resourceGroupName, $gatewayName, $gatewayParameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $gatewayParameters Parameters supplied to the CreateOrUpdate operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'autoUpgrade' => 'On|Off'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateAsync($resourceGroupName, $gatewayName, array $gatewayParameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($gatewayParameters == null) {
            Validate::notNullOrEmpty($gatewayParameters, '$gatewayParameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{gatewayName}' => $gatewayName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($gatewayParameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $gatewayParameters Parameters supplied to the Update operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'autoUpgrade' => 'On|Off'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'created' => '',
     *       'updated' => '',
     *       'autoUpgrade' => 'On|Off',
     *       'desiredVersion' => '',
     *       'instances' => '',
     *       'activeMessageCount' => '',
     *       'latestPublishedMsiVersion' => '',
     *       'publishedTimeUtc' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function update($resourceGroupName, $gatewayName, array $gatewayParameters, array $customHeaders = [])
    {
        $response = $this->beginupdateAsync($resourceGroupName, $gatewayName, $gatewayParameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $gatewayParameters Parameters supplied to the Update operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'autoUpgrade' => 'On|Off'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'created' => '',
     *       'updated' => '',
     *       'autoUpgrade' => 'On|Off',
     *       'desiredVersion' => '',
     *       'instances' => '',
     *       'activeMessageCount' => '',
     *       'latestPublishedMsiVersion' => '',
     *       'publishedTimeUtc' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginUpdate($resourceGroupName, $gatewayName, array $gatewayParameters, array $customHeaders = [])
    {
        $response = $this->beginUpdateAsync($resourceGroupName, $gatewayName, $gatewayParameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $gatewayParameters Parameters supplied to the Update operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'autoUpgrade' => 'On|Off'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginUpdateAsync($resourceGroupName, $gatewayName, array $gatewayParameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }
        if ($gatewayParameters == null) {
            Validate::notNullOrEmpty($gatewayParameters, '$gatewayParameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}';
        $statusCodes = [200, 202];
        $method = 'PATCH';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{gatewayName}' => $gatewayName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($gatewayParameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a gateway from a resource group.
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function delete($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->deleteAsync($resourceGroupName, $gatewayName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a gateway from a resource group.
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAsync($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}';
        $statusCodes = [200, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{gatewayName}' => $gatewayName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns a gateway
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum)
     * @param GatewayExpandOption $expand Gets subscription credentials which
     * uniquely identify Microsoft Azure subscription. The subscription ID forms
     * part of the URI for every service call. Possible values include: 'status'
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'created' => '',
     *       'updated' => '',
     *       'autoUpgrade' => 'On|Off',
     *       'desiredVersion' => '',
     *       'instances' => '',
     *       'activeMessageCount' => '',
     *       'latestPublishedMsiVersion' => '',
     *       'publishedTimeUtc' => ''
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $gatewayName, array $expand, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $gatewayName, $expand, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns a gateway
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum)
     * @param GatewayExpandOption $expand Gets subscription credentials which
     * uniquely identify Microsoft Azure subscription. The subscription ID forms
     * part of the URI for every service call. Possible values include: 'status'
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $gatewayName, array $expand, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{gatewayName}' => $gatewayName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion(), '$expand' => $expand];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns gateways in a subscription
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation(array $customHeaders = [])
    {
        $response = $this->listOperationAsync($customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns gateways in a subscription
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync(array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.ServerManagement/gateways';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns gateways in a resource group
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listForResourceGroup($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listForResourceGroupAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns gateways in a resource group
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listForResourceGroupAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Upgrade a gateway
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function upgrade($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->beginupgradeAsync($resourceGroupName, $gatewayName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Upgrade a gateway
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginUpgrade($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->beginUpgradeAsync($resourceGroupName, $gatewayName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Upgrade a gateway
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginUpgradeAsync($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/upgradetolatest';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{gatewayName}' => $gatewayName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Regenerate a gateway's profile
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function regenerateProfile($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->beginregenerateProfileAsync($resourceGroupName, $gatewayName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Regenerate a gateway's profile
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginRegenerateProfile($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->beginRegenerateProfileAsync($resourceGroupName, $gatewayName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Regenerate a gateway's profile
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRegenerateProfileAsync($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/regenerateprofile';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{gatewayName}' => $gatewayName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a gateway profile
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'dataPlaneServiceBaseAddress' => '',
     *    'gatewayId' => '',
     *    'environment' => '',
     *    'upgradeManifestUrl' => '',
     *    'messagingNamespace' => '',
     *    'messagingAccount' => '',
     *    'messagingKey' => '',
     *    'requestQueue' => '',
     *    'responseTopic' => '',
     *    'statusBlobSignature' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function getProfile($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->begingetProfileAsync($resourceGroupName, $gatewayName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a gateway profile
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'dataPlaneServiceBaseAddress' => '',
     *    'gatewayId' => '',
     *    'environment' => '',
     *    'upgradeManifestUrl' => '',
     *    'messagingNamespace' => '',
     *    'messagingAccount' => '',
     *    'messagingKey' => '',
     *    'requestQueue' => '',
     *    'responseTopic' => '',
     *    'statusBlobSignature' => ''
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginGetProfile($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        $response = $this->beginGetProfileAsync($resourceGroupName, $gatewayName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a gateway profile
     *
     * @param string $resourceGroupName The resource group name uniquely
     * identifies the resource group within the user subscriptionId.
     * @param string $gatewayName The gateway name (256 characters maximum).
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginGetProfileAsync($resourceGroupName, $gatewayName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($gatewayName == null) {
            Validate::notNullOrEmpty($gatewayName, '$gatewayName');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/profile';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{gatewayName}' => $gatewayName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns gateways in a subscription
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns gateways in a subscription
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns gateways in a resource group
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listForResourceGroupNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listForResourceGroupNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns gateways in a resource group
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listForResourceGroupNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
