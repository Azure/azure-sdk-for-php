<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-01-01
 */

namespace MicrosoftAzure\Arm\Storage;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * StorageAccounts for The Storage Management Client.
 */
class StorageAccounts
{
    /**
     * The service client object for the operations.
     *
     * @var StorageManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for StorageAccounts.
     *
     * @param StorageManagementClient, Service client for StorageAccounts
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Checks that account name is valid and is not in use.
     *
     * @param array $accountName The name of the storage account within the specified resource group.
     *  Storage account names must be between 3 and 24 characters in length and use numbers and
     *  lower-case letters only. 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'type' => 'Microsoft.Storage/storageAccounts'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'nameAvailable' => 'false',
     *    'reason' => 'AccountNameInvalid|AlreadyExists',
     *    'message' => ''
     * ];
     * </pre>
     */
    public function checkNameAvailability(array $accountName, array $customHeaders = [])
    {
        $response = $this->checkNameAvailabilityAsync($accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Checks that account name is valid and is not in use.
     *
     * @param array $accountName The name of the storage account within the specified resource group.
     *  Storage account names must be between 3 and 24 characters in length and use numbers and
     *  lower-case letters only. 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'type' => 'Microsoft.Storage/storageAccounts'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function checkNameAvailabilityAsync(array $accountName, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($accountName);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Asynchronously creates a new storage account with the specified parameters.
     * If an account is already created and subsequent create request is issued
     * with different properties, the account properties will be updated. If an
     * account is already created and subsequent create or update request is
     * issued with exact same set of properties, the request will succeed.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $parameters The parameters to provide for the created account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'kind' => 'Storage|BlobStorage',
     *    'location' => 'requiredLocation',
     *    'tags' => '',
     *    'properties' => [
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'kind' => 'Storage|BlobStorage',
     *    'properties' => [
     *       'provisioningState' => 'Creating|ResolvingDNS|Succeeded',
     *       'primaryEndpoints' => [
     *          'blob' => '',
     *          'queue' => '',
     *          'table' => '',
     *          'file' => ''
     *       ],
     *       'primaryLocation' => '',
     *       'statusOfPrimary' => 'Available|Unavailable',
     *       'lastGeoFailoverTime' => '',
     *       'secondaryLocation' => '',
     *       'statusOfSecondary' => 'Available|Unavailable',
     *       'creationTime' => '',
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'secondaryEndpoints' => [
     *          'blob' => '',
     *          'queue' => '',
     *          'table' => '',
     *          'file' => ''
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     */
    public function create($resourceGroupName, $accountName, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincreateAsync($resourceGroupName, $accountName, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Asynchronously creates a new storage account with the specified parameters.
     * If an account is already created and subsequent create request is issued
     * with different properties, the account properties will be updated. If an
     * account is already created and subsequent create or update request is
     * issued with exact same set of properties, the request will succeed.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $parameters The parameters to provide for the created account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'kind' => 'Storage|BlobStorage',
     *    'location' => 'requiredLocation',
     *    'tags' => '',
     *    'properties' => [
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'kind' => 'Storage|BlobStorage',
     *    'properties' => [
     *       'provisioningState' => 'Creating|ResolvingDNS|Succeeded',
     *       'primaryEndpoints' => [
     *          'blob' => '',
     *          'queue' => '',
     *          'table' => '',
     *          'file' => ''
     *       ],
     *       'primaryLocation' => '',
     *       'statusOfPrimary' => 'Available|Unavailable',
     *       'lastGeoFailoverTime' => '',
     *       'secondaryLocation' => '',
     *       'statusOfSecondary' => 'Available|Unavailable',
     *       'creationTime' => '',
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'secondaryEndpoints' => [
     *          'blob' => '',
     *          'queue' => '',
     *          'table' => '',
     *          'file' => ''
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     */
    public function beginCreate($resourceGroupName, $accountName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCreateAsync($resourceGroupName, $accountName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Asynchronously creates a new storage account with the specified parameters.
     * If an account is already created and subsequent create request is issued
     * with different properties, the account properties will be updated. If an
     * account is already created and subsequent create or update request is
     * issued with exact same set of properties, the request will succeed.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $parameters The parameters to provide for the created account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'kind' => 'Storage|BlobStorage',
     *    'location' => 'requiredLocation',
     *    'tags' => '',
     *    'properties' => [
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateAsync($resourceGroupName, $accountName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}';
        $statusCodes = [202, 200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a storage account in Microsoft Azure.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function delete($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->deleteAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a storage account in Microsoft Azure.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}';
        $statusCodes = [200, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Returns the properties for the specified storage account including but not
     * limited to name, account type, location, and account status. The ListKeys
     * operation should be used to retrieve storage keys.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'kind' => 'Storage|BlobStorage',
     *    'properties' => [
     *       'provisioningState' => 'Creating|ResolvingDNS|Succeeded',
     *       'primaryEndpoints' => [
     *          'blob' => '',
     *          'queue' => '',
     *          'table' => '',
     *          'file' => ''
     *       ],
     *       'primaryLocation' => '',
     *       'statusOfPrimary' => 'Available|Unavailable',
     *       'lastGeoFailoverTime' => '',
     *       'secondaryLocation' => '',
     *       'statusOfSecondary' => 'Available|Unavailable',
     *       'creationTime' => '',
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'secondaryEndpoints' => [
     *          'blob' => '',
     *          'queue' => '',
     *          'table' => '',
     *          'file' => ''
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     */
    public function getProperties($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->getPropertiesAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Returns the properties for the specified storage account including but not
     * limited to name, account type, location, and account status. The ListKeys
     * operation should be used to retrieve storage keys.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getPropertiesAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The update operation can be used to update the account type, encryption, or
     * tags for a storage account. It can also be used to map the account to a
     * custom domain. Only one custom domain is supported per storage account
     * and. replacement/change of custom domain is not supported. In order to
     * replace an old custom domain, the old value must be cleared/unregistered
     * before a new value may be set. Update of multiple properties is supported.
     * This call does not change the storage keys for the account. If you want to
     * change storage account keys, use the regenerate keys operation.  The
     * location and name of the storage account cannot be changed after creation.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $parameters The parameters to provide for the updated account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'tags' => '',
     *    'properties' => [
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'kind' => 'Storage|BlobStorage',
     *    'properties' => [
     *       'provisioningState' => 'Creating|ResolvingDNS|Succeeded',
     *       'primaryEndpoints' => [
     *          'blob' => '',
     *          'queue' => '',
     *          'table' => '',
     *          'file' => ''
     *       ],
     *       'primaryLocation' => '',
     *       'statusOfPrimary' => 'Available|Unavailable',
     *       'lastGeoFailoverTime' => '',
     *       'secondaryLocation' => '',
     *       'statusOfSecondary' => 'Available|Unavailable',
     *       'creationTime' => '',
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'secondaryEndpoints' => [
     *          'blob' => '',
     *          'queue' => '',
     *          'table' => '',
     *          'file' => ''
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     */
    public function update($resourceGroupName, $accountName, array $parameters, array $customHeaders = [])
    {
        $response = $this->updateAsync($resourceGroupName, $accountName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The update operation can be used to update the account type, encryption, or
     * tags for a storage account. It can also be used to map the account to a
     * custom domain. Only one custom domain is supported per storage account
     * and. replacement/change of custom domain is not supported. In order to
     * replace an old custom domain, the old value must be cleared/unregistered
     * before a new value may be set. Update of multiple properties is supported.
     * This call does not change the storage keys for the account. If you want to
     * change storage account keys, use the regenerate keys operation.  The
     * location and name of the storage account cannot be changed after creation.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $parameters The parameters to provide for the updated account. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => 'Standard_LRS|Standard_GRS|Standard_RAGRS|Standard_ZRS|Premium_LRS',
     *       'tier' => 'Standard|Premium'
     *    ],
     *    'tags' => '',
     *    'properties' => [
     *       'customDomain' => [
     *          'name' => '',
     *          'useSubDomain' => 'false'
     *       ],
     *       'encryption' => [
     *          'services' => [
     *             'blob' => [
     *                'enabled' => 'false',
     *                'lastEnabledTime' => ''
     *             ]
     *          ],
     *          'keySource' => 'Microsoft.Storage'
     *       ],
     *       'accessTier' => 'Hot|Cool'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateAsync($resourceGroupName, $accountName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all the storage accounts available under the subscription. Note that
     * storage keys are not returned; use the ListKeys operation for this.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listOperation(array $customHeaders = [])
    {
        $response = $this->listOperationAsync($customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all the storage accounts available under the subscription. Note that
     * storage keys are not returned; use the ListKeys operation for this.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync(array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all the storage accounts available under the given resource group.
     * Note that storage keys are not returned; use the ListKeys operation for
     * this.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listByResourceGroup($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listByResourceGroupAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all the storage accounts available under the given resource group.
     * Note that storage keys are not returned; use the ListKeys operation for
     * this.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByResourceGroupAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the access keys for the specified storage account.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $accountName The name of the storage account.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'keys' => ''
     * ];
     * </pre>
     */
    public function listKeys($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->listKeysAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the access keys for the specified storage account.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $accountName The name of the storage account.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listKeysAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Regenerates the access keys for the specified storage account.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $regenerateKey Specifies name of the key which should be regenerated. key1 or key2
     *  for the default keys 
     * <pre>
     * [
     *    'keyName' => 'requiredKeyName'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'keys' => ''
     * ];
     * </pre>
     */
    public function regenerateKey($resourceGroupName, $accountName, array $regenerateKey, array $customHeaders = [])
    {
        $response = $this->regenerateKeyAsync($resourceGroupName, $accountName, $regenerateKey, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Regenerates the access keys for the specified storage account.
     *
     * @param string $resourceGroupName The name of the resource group within the
     * user's subscription.
     * @param string $accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * @param array $regenerateKey Specifies name of the key which should be regenerated. key1 or key2
     *  for the default keys 
     * <pre>
     * [
     *    'keyName' => 'requiredKeyName'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function regenerateKeyAsync($resourceGroupName, $accountName, array $regenerateKey, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($regenerateKey == null) {
            Validate::notNullOrEmpty($regenerateKey, '$regenerateKey');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($regenerateKey);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
