<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-03-20-preview
 */

namespace MicrosoftAzure\Arm\DataLakeAnalyticsJob;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Job for Creates an Azure Data Lake Analytics job client.
 */
class Job
{
    /**
     * The service client object for the operations.
     *
     * @var DataLakeAnalyticsJobManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Job.
     *
     * @param DataLakeAnalyticsJobManagementClient, Service client for Job
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Gets statistics of the specified job.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity JobInfo ID.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'lastUpdateTimeUtc' => '',
     *    'stages' => ''
     * ];
     * </pre>
     */
    public function getStatistics($accountName, $jobIdentity, array $customHeaders = [])
    {
        $response = $this->getStatisticsAsync($accountName, $jobIdentity, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets statistics of the specified job.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity JobInfo ID.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getStatisticsAsync($accountName, $jobIdentity, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaJobDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaJobDnsSuffix(), '$this->_client->getAdlaJobDnsSuffix()');
        }
        if ($jobIdentity == null) {
            Validate::notNullOrEmpty($jobIdentity, '$jobIdentity');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/Jobs/{jobIdentity}/GetStatistics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{jobIdentity}' => $jobIdentity]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the job debug data information specified by the job ID.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity JobInfo ID.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'jobId' => '',
     *    'command' => '',
     *    'paths' => ''
     * ];
     * </pre>
     */
    public function getDebugDataPath($accountName, $jobIdentity, array $customHeaders = [])
    {
        $response = $this->getDebugDataPathAsync($accountName, $jobIdentity, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the job debug data information specified by the job ID.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity JobInfo ID.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getDebugDataPathAsync($accountName, $jobIdentity, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaJobDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaJobDnsSuffix(), '$this->_client->getAdlaJobDnsSuffix()');
        }
        if ($jobIdentity == null) {
            Validate::notNullOrEmpty($jobIdentity, '$jobIdentity');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/Jobs/{jobIdentity}/GetDebugDataPath';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{jobIdentity}' => $jobIdentity]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Builds (compiles) the specified job in the specified Data Lake Analytics
     * account for job correctness and validation.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param array $parameters The parameters to build a job. 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     */
    public function build($accountName, array $parameters, array $customHeaders = [])
    {
        $response = $this->buildAsync($accountName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Builds (compiles) the specified job in the specified Data Lake Analytics
     * account for job correctness and validation.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param array $parameters The parameters to build a job. 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function buildAsync($accountName, array $parameters, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaJobDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaJobDnsSuffix(), '$this->_client->getAdlaJobDnsSuffix()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/BuildJob';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, []);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Cancels the running job specified by the job ID.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity JobInfo ID to cancel.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function cancel($accountName, $jobIdentity, array $customHeaders = [])
    {
        $response = $this->cancelAsync($accountName, $jobIdentity, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Cancels the running job specified by the job ID.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity JobInfo ID to cancel.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function cancelAsync($accountName, $jobIdentity, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaJobDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaJobDnsSuffix(), '$this->_client->getAdlaJobDnsSuffix()');
        }
        if ($jobIdentity == null) {
            Validate::notNullOrEmpty($jobIdentity, '$jobIdentity');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/Jobs/{jobIdentity}/CancelJob';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{jobIdentity}' => $jobIdentity]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the job information for the specified job ID.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity JobInfo ID.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     */
    public function get($accountName, $jobIdentity, array $customHeaders = [])
    {
        $response = $this->getAsync($accountName, $jobIdentity, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the job information for the specified job ID.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity JobInfo ID.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($accountName, $jobIdentity, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaJobDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaJobDnsSuffix(), '$this->_client->getAdlaJobDnsSuffix()');
        }
        if ($jobIdentity == null) {
            Validate::notNullOrEmpty($jobIdentity, '$jobIdentity');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/Jobs/{jobIdentity}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{jobIdentity}' => $jobIdentity]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Submits a job to the specified Data Lake Analytics account.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity The job ID (a GUID) for the job being submitted.
     * @param array $parameters The parameters to submit a job. 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     */
    public function create($accountName, $jobIdentity, array $parameters, array $customHeaders = [])
    {
        $response = $this->createAsync($accountName, $jobIdentity, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Submits a job to the specified Data Lake Analytics account.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param object $jobIdentity The job ID (a GUID) for the job being submitted.
     * @param array $parameters The parameters to submit a job. 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createAsync($accountName, $jobIdentity, array $parameters, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaJobDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaJobDnsSuffix(), '$this->_client->getAdlaJobDnsSuffix()');
        }
        if ($jobIdentity == null) {
            Validate::notNullOrEmpty($jobIdentity, '$jobIdentity');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/Jobs/{jobIdentity}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{jobIdentity}' => $jobIdentity]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the jobs, if any, associated with the specified Data Lake Analytics
     * account. The response includes a link to the next page of results, if any.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The return format. Return the response in particular
     * formatxii without access to request headers for standard content-type
     * negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => '',
     *    'count' => ''
     * ];
     * </pre>
     */
    public function listOperation($accountName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($accountName, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the jobs, if any, associated with the specified Data Lake Analytics
     * account. The response includes a link to the next page of results, if any.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'jobId' => '',
     *    'name' => 'requiredName',
     *    'type' => 'USql|Hive',
     *    'submitter' => '',
     *    'errorMessage' => '',
     *    'degreeOfParallelism' => '',
     *    'priority' => '',
     *    'submitTime' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'state' =>
     *  'Accepted|Compiling|Ended|New|Queued|Running|Scheduling|Starting|Paused|WaitingForCapacity',
     *    'result' => 'None|Succeeded|Cancelled|Failed',
     *    'logFolder' => '',
     *    'logFilePatterns' => '',
     *    'stateAuditRecords' => '',
     *    'properties' => [
     *       'runtimeVersion' => '',
     *       'script' => 'requiredScript'
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories?$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The return format. Return the response in particular
     * formatxii without access to request headers for standard content-type
     * negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($accountName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaJobDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaJobDnsSuffix(), '$this->_client->getAdlaJobDnsSuffix()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/Jobs';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, '$search' => $search, '$format' => $format, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the jobs, if any, associated with the specified Data Lake Analytics
     * account. The response includes a link to the next page of results, if any.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => '',
     *    'count' => ''
     * ];
     * </pre>
     */
    public function listNext($accountName, $nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($accountName, $nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the jobs, if any, associated with the specified Data Lake Analytics
     * account. The response includes a link to the next page of results, if any.
     *
     * @param string $accountName The Azure Data Lake Analytics account to execute
     * job operations on.
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($accountName, $nextPageLink, array $customHeaders = [])
    {
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getAdlaJobDnsSuffix() == null) {
            Validate::notNullOrEmpty($this->_client->getAdlaJobDnsSuffix(), '$this->_client->getAdlaJobDnsSuffix()');
        }
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
