<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-03-30
 */

namespace MicrosoftAzure\Arm\Compute;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * VirtualMachines for The Compute Management Client.
 */
class VirtualMachines
{
    /**
     * The service client object for the operations.
     *
     * @var ComputeManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for VirtualMachines.
     *
     * @param ComputeManagementClient, Service client for VirtualMachines
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a
     * template that can be used to create similar VMs.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $parameters Parameters supplied to the Capture Virtual Machine operation. 
     * <pre>
     * [
     *    'vhdPrefix' => 'requiredVhdPrefix',
     *    'destinationContainerName' => 'requiredDestinationContainerName',
     *    'overwriteVhds' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'output' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function capture($resourceGroupName, $vmName, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincaptureAsync($resourceGroupName, $vmName, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a
     * template that can be used to create similar VMs.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $parameters Parameters supplied to the Capture Virtual Machine operation. 
     * <pre>
     * [
     *    'vhdPrefix' => 'requiredVhdPrefix',
     *    'destinationContainerName' => 'requiredDestinationContainerName',
     *    'overwriteVhds' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'output' => ''
     *    ]
     * ];
     * </pre>
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginCapture($resourceGroupName, $vmName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCaptureAsync($resourceGroupName, $vmName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Captures the VM by copying virtual hard disks of the VM and outputs a
     * template that can be used to create similar VMs.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $parameters Parameters supplied to the Capture Virtual Machine operation. 
     * <pre>
     * [
     *    'vhdPrefix' => 'requiredVhdPrefix',
     *    'destinationContainerName' => 'requiredDestinationContainerName',
     *    'overwriteVhds' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCaptureAsync($resourceGroupName, $vmName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture';
        $statusCodes = [200, 202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to create or update a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $parameters Parameters supplied to the Create Virtual Machine operation. 
     * <pre>
     * [
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => ''
     *    ],
     *    'properties' => [
     *       'hardwareProfile' => [
     *          'vmSize' =>
     *  'Basic_A0|Basic_A1|Basic_A2|Basic_A3|Basic_A4|Standard_A0|Standard_A1|Standard_A2|Standard_A3|Standard_A4|Standard_A5|Standard_A6|Standard_A7|Standard_A8|Standard_A9|Standard_A10|Standard_A11|Standard_D1|Standard_D2|Standard_D3|Standard_D4|Standard_D11|Standard_D12|Standard_D13|Standard_D14|Standard_D1_v2|Standard_D2_v2|Standard_D3_v2|Standard_D4_v2|Standard_D5_v2|Standard_D11_v2|Standard_D12_v2|Standard_D13_v2|Standard_D14_v2|Standard_D15_v2|Standard_DS1|Standard_DS2|Standard_DS3|Standard_DS4|Standard_DS11|Standard_DS12|Standard_DS13|Standard_DS14|Standard_DS1_v2|Standard_DS2_v2|Standard_DS3_v2|Standard_DS4_v2|Standard_DS5_v2|Standard_DS11_v2|Standard_DS12_v2|Standard_DS13_v2|Standard_DS14_v2|Standard_DS15_v2|Standard_G1|Standard_G2|Standard_G3|Standard_G4|Standard_G5|Standard_GS1|Standard_GS2|Standard_GS3|Standard_GS4|Standard_GS5'
     *       ],
     *       'storageProfile' => [
     *          'imageReference' => [
     *             'publisher' => '',
     *             'offer' => '',
     *             'sku' => '',
     *             'version' => ''
     *          ],
     *          'osDisk' => [
     *             'osType' => 'Windows|Linux',
     *             'encryptionSettings' => [
     *                'diskEncryptionKey' => ,
     *                'keyEncryptionKey' => ,
     *                'enabled' => 'false'
     *             ],
     *             'name' => '',
     *             'vhd' => [
     *                'uri' => ''
     *             ],
     *             'image' => [
     *                'uri' => ''
     *             ],
     *             'caching' => 'None|ReadOnly|ReadWrite',
     *             'createOption' => 'fromImage|empty|attach',
     *             'diskSizeGB' => ''
     *          ],
     *          'dataDisks' => ''
     *       ],
     *       'osProfile' => [
     *          'computerName' => '',
     *          'adminUsername' => '',
     *          'adminPassword' => '',
     *          'customData' => '',
     *          'windowsConfiguration' => [
     *             'provisionVMAgent' => 'false',
     *             'enableAutomaticUpdates' => 'false',
     *             'timeZone' => '',
     *             'additionalUnattendContent' => '',
     *             'winRM' => [
     *                'listeners' => ''
     *             ]
     *          ],
     *          'linuxConfiguration' => [
     *             'disablePasswordAuthentication' => 'false',
     *             'ssh' => [
     *                'publicKeys' => ''
     *             ]
     *          ],
     *          'secrets' => ''
     *       ],
     *       'networkProfile' => [
     *          'networkInterfaces' => ''
     *       ],
     *       'diagnosticsProfile' => [
     *          'bootDiagnostics' => [
     *             'enabled' => 'false',
     *             'storageUri' => ''
     *          ]
     *       ],
     *       'availabilitySet' => [
     *          'id' => ''
     *       ],
     *       'provisioningState' => '',
     *       'instanceView' => [
     *          'platformUpdateDomain' => '',
     *          'platformFaultDomain' => '',
     *          'rdpThumbPrint' => '',
     *          'vmAgent' => [
     *             'vmAgentVersion' => '',
     *             'extensionHandlers' => '',
     *             'statuses' => ''
     *          ],
     *          'disks' => '',
     *          'extensions' => '',
     *          'bootDiagnostics' => [
     *             'consoleScreenshotBlobUri' => '',
     *             'serialConsoleLogBlobUri' => ''
     *          ],
     *          'statuses' => ''
     *       ],
     *       'licenseType' => '',
     *       'vmId' => ''
     *    ],
     *    'resources' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => ''
     *    ],
     *    'properties' => [
     *       'hardwareProfile' => [
     *          'vmSize' =>
     *  'Basic_A0|Basic_A1|Basic_A2|Basic_A3|Basic_A4|Standard_A0|Standard_A1|Standard_A2|Standard_A3|Standard_A4|Standard_A5|Standard_A6|Standard_A7|Standard_A8|Standard_A9|Standard_A10|Standard_A11|Standard_D1|Standard_D2|Standard_D3|Standard_D4|Standard_D11|Standard_D12|Standard_D13|Standard_D14|Standard_D1_v2|Standard_D2_v2|Standard_D3_v2|Standard_D4_v2|Standard_D5_v2|Standard_D11_v2|Standard_D12_v2|Standard_D13_v2|Standard_D14_v2|Standard_D15_v2|Standard_DS1|Standard_DS2|Standard_DS3|Standard_DS4|Standard_DS11|Standard_DS12|Standard_DS13|Standard_DS14|Standard_DS1_v2|Standard_DS2_v2|Standard_DS3_v2|Standard_DS4_v2|Standard_DS5_v2|Standard_DS11_v2|Standard_DS12_v2|Standard_DS13_v2|Standard_DS14_v2|Standard_DS15_v2|Standard_G1|Standard_G2|Standard_G3|Standard_G4|Standard_G5|Standard_GS1|Standard_GS2|Standard_GS3|Standard_GS4|Standard_GS5'
     *       ],
     *       'storageProfile' => [
     *          'imageReference' => [
     *             'publisher' => '',
     *             'offer' => '',
     *             'sku' => '',
     *             'version' => ''
     *          ],
     *          'osDisk' => [
     *             'osType' => 'Windows|Linux',
     *             'encryptionSettings' => [
     *                'diskEncryptionKey' => ,
     *                'keyEncryptionKey' => ,
     *                'enabled' => 'false'
     *             ],
     *             'name' => '',
     *             'vhd' => [
     *                'uri' => ''
     *             ],
     *             'image' => [
     *                'uri' => ''
     *             ],
     *             'caching' => 'None|ReadOnly|ReadWrite',
     *             'createOption' => 'fromImage|empty|attach',
     *             'diskSizeGB' => ''
     *          ],
     *          'dataDisks' => ''
     *       ],
     *       'osProfile' => [
     *          'computerName' => '',
     *          'adminUsername' => '',
     *          'adminPassword' => '',
     *          'customData' => '',
     *          'windowsConfiguration' => [
     *             'provisionVMAgent' => 'false',
     *             'enableAutomaticUpdates' => 'false',
     *             'timeZone' => '',
     *             'additionalUnattendContent' => '',
     *             'winRM' => [
     *                'listeners' => ''
     *             ]
     *          ],
     *          'linuxConfiguration' => [
     *             'disablePasswordAuthentication' => 'false',
     *             'ssh' => [
     *                'publicKeys' => ''
     *             ]
     *          ],
     *          'secrets' => ''
     *       ],
     *       'networkProfile' => [
     *          'networkInterfaces' => ''
     *       ],
     *       'diagnosticsProfile' => [
     *          'bootDiagnostics' => [
     *             'enabled' => 'false',
     *             'storageUri' => ''
     *          ]
     *       ],
     *       'availabilitySet' => [
     *          'id' => ''
     *       ],
     *       'provisioningState' => '',
     *       'instanceView' => [
     *          'platformUpdateDomain' => '',
     *          'platformFaultDomain' => '',
     *          'rdpThumbPrint' => '',
     *          'vmAgent' => [
     *             'vmAgentVersion' => '',
     *             'extensionHandlers' => '',
     *             'statuses' => ''
     *          ],
     *          'disks' => '',
     *          'extensions' => '',
     *          'bootDiagnostics' => [
     *             'consoleScreenshotBlobUri' => '',
     *             'serialConsoleLogBlobUri' => ''
     *          ],
     *          'statuses' => ''
     *       ],
     *       'licenseType' => '',
     *       'vmId' => ''
     *    ],
     *    'resources' => ''
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => ''
     *    ],
     *    'properties' => [
     *       'hardwareProfile' => [
     *          'vmSize' =>
     *  'Basic_A0|Basic_A1|Basic_A2|Basic_A3|Basic_A4|Standard_A0|Standard_A1|Standard_A2|Standard_A3|Standard_A4|Standard_A5|Standard_A6|Standard_A7|Standard_A8|Standard_A9|Standard_A10|Standard_A11|Standard_D1|Standard_D2|Standard_D3|Standard_D4|Standard_D11|Standard_D12|Standard_D13|Standard_D14|Standard_D1_v2|Standard_D2_v2|Standard_D3_v2|Standard_D4_v2|Standard_D5_v2|Standard_D11_v2|Standard_D12_v2|Standard_D13_v2|Standard_D14_v2|Standard_D15_v2|Standard_DS1|Standard_DS2|Standard_DS3|Standard_DS4|Standard_DS11|Standard_DS12|Standard_DS13|Standard_DS14|Standard_DS1_v2|Standard_DS2_v2|Standard_DS3_v2|Standard_DS4_v2|Standard_DS5_v2|Standard_DS11_v2|Standard_DS12_v2|Standard_DS13_v2|Standard_DS14_v2|Standard_DS15_v2|Standard_G1|Standard_G2|Standard_G3|Standard_G4|Standard_G5|Standard_GS1|Standard_GS2|Standard_GS3|Standard_GS4|Standard_GS5'
     *       ],
     *       'storageProfile' => [
     *          'imageReference' => [
     *             'publisher' => '',
     *             'offer' => '',
     *             'sku' => '',
     *             'version' => ''
     *          ],
     *          'osDisk' => [
     *             'osType' => 'Windows|Linux',
     *             'encryptionSettings' => [
     *                'diskEncryptionKey' => ,
     *                'keyEncryptionKey' => ,
     *                'enabled' => 'false'
     *             ],
     *             'name' => '',
     *             'vhd' => [
     *                'uri' => ''
     *             ],
     *             'image' => [
     *                'uri' => ''
     *             ],
     *             'caching' => 'None|ReadOnly|ReadWrite',
     *             'createOption' => 'fromImage|empty|attach',
     *             'diskSizeGB' => ''
     *          ],
     *          'dataDisks' => ''
     *       ],
     *       'osProfile' => [
     *          'computerName' => '',
     *          'adminUsername' => '',
     *          'adminPassword' => '',
     *          'customData' => '',
     *          'windowsConfiguration' => [
     *             'provisionVMAgent' => 'false',
     *             'enableAutomaticUpdates' => 'false',
     *             'timeZone' => '',
     *             'additionalUnattendContent' => '',
     *             'winRM' => [
     *                'listeners' => ''
     *             ]
     *          ],
     *          'linuxConfiguration' => [
     *             'disablePasswordAuthentication' => 'false',
     *             'ssh' => [
     *                'publicKeys' => ''
     *             ]
     *          ],
     *          'secrets' => ''
     *       ],
     *       'networkProfile' => [
     *          'networkInterfaces' => ''
     *       ],
     *       'diagnosticsProfile' => [
     *          'bootDiagnostics' => [
     *             'enabled' => 'false',
     *             'storageUri' => ''
     *          ]
     *       ],
     *       'availabilitySet' => [
     *          'id' => ''
     *       ],
     *       'provisioningState' => '',
     *       'instanceView' => [
     *          'platformUpdateDomain' => '',
     *          'platformFaultDomain' => '',
     *          'rdpThumbPrint' => '',
     *          'vmAgent' => [
     *             'vmAgentVersion' => '',
     *             'extensionHandlers' => '',
     *             'statuses' => ''
     *          ],
     *          'disks' => '',
     *          'extensions' => '',
     *          'bootDiagnostics' => [
     *             'consoleScreenshotBlobUri' => '',
     *             'serialConsoleLogBlobUri' => ''
     *          ],
     *          'statuses' => ''
     *       ],
     *       'licenseType' => '',
     *       'vmId' => ''
     *    ],
     *    'resources' => ''
     * ];
     * </pre>
     */
    public function createOrUpdate($resourceGroupName, $vmName, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateAsync($resourceGroupName, $vmName, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to create or update a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $parameters Parameters supplied to the Create Virtual Machine operation. 
     * <pre>
     * [
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => ''
     *    ],
     *    'properties' => [
     *       'hardwareProfile' => [
     *          'vmSize' =>
     *  'Basic_A0|Basic_A1|Basic_A2|Basic_A3|Basic_A4|Standard_A0|Standard_A1|Standard_A2|Standard_A3|Standard_A4|Standard_A5|Standard_A6|Standard_A7|Standard_A8|Standard_A9|Standard_A10|Standard_A11|Standard_D1|Standard_D2|Standard_D3|Standard_D4|Standard_D11|Standard_D12|Standard_D13|Standard_D14|Standard_D1_v2|Standard_D2_v2|Standard_D3_v2|Standard_D4_v2|Standard_D5_v2|Standard_D11_v2|Standard_D12_v2|Standard_D13_v2|Standard_D14_v2|Standard_D15_v2|Standard_DS1|Standard_DS2|Standard_DS3|Standard_DS4|Standard_DS11|Standard_DS12|Standard_DS13|Standard_DS14|Standard_DS1_v2|Standard_DS2_v2|Standard_DS3_v2|Standard_DS4_v2|Standard_DS5_v2|Standard_DS11_v2|Standard_DS12_v2|Standard_DS13_v2|Standard_DS14_v2|Standard_DS15_v2|Standard_G1|Standard_G2|Standard_G3|Standard_G4|Standard_G5|Standard_GS1|Standard_GS2|Standard_GS3|Standard_GS4|Standard_GS5'
     *       ],
     *       'storageProfile' => [
     *          'imageReference' => [
     *             'publisher' => '',
     *             'offer' => '',
     *             'sku' => '',
     *             'version' => ''
     *          ],
     *          'osDisk' => [
     *             'osType' => 'Windows|Linux',
     *             'encryptionSettings' => [
     *                'diskEncryptionKey' => ,
     *                'keyEncryptionKey' => ,
     *                'enabled' => 'false'
     *             ],
     *             'name' => '',
     *             'vhd' => [
     *                'uri' => ''
     *             ],
     *             'image' => [
     *                'uri' => ''
     *             ],
     *             'caching' => 'None|ReadOnly|ReadWrite',
     *             'createOption' => 'fromImage|empty|attach',
     *             'diskSizeGB' => ''
     *          ],
     *          'dataDisks' => ''
     *       ],
     *       'osProfile' => [
     *          'computerName' => '',
     *          'adminUsername' => '',
     *          'adminPassword' => '',
     *          'customData' => '',
     *          'windowsConfiguration' => [
     *             'provisionVMAgent' => 'false',
     *             'enableAutomaticUpdates' => 'false',
     *             'timeZone' => '',
     *             'additionalUnattendContent' => '',
     *             'winRM' => [
     *                'listeners' => ''
     *             ]
     *          ],
     *          'linuxConfiguration' => [
     *             'disablePasswordAuthentication' => 'false',
     *             'ssh' => [
     *                'publicKeys' => ''
     *             ]
     *          ],
     *          'secrets' => ''
     *       ],
     *       'networkProfile' => [
     *          'networkInterfaces' => ''
     *       ],
     *       'diagnosticsProfile' => [
     *          'bootDiagnostics' => [
     *             'enabled' => 'false',
     *             'storageUri' => ''
     *          ]
     *       ],
     *       'availabilitySet' => [
     *          'id' => ''
     *       ],
     *       'provisioningState' => '',
     *       'instanceView' => [
     *          'platformUpdateDomain' => '',
     *          'platformFaultDomain' => '',
     *          'rdpThumbPrint' => '',
     *          'vmAgent' => [
     *             'vmAgentVersion' => '',
     *             'extensionHandlers' => '',
     *             'statuses' => ''
     *          ],
     *          'disks' => '',
     *          'extensions' => '',
     *          'bootDiagnostics' => [
     *             'consoleScreenshotBlobUri' => '',
     *             'serialConsoleLogBlobUri' => ''
     *          ],
     *          'statuses' => ''
     *       ],
     *       'licenseType' => '',
     *       'vmId' => ''
     *    ],
     *    'resources' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => ''
     *    ],
     *    'properties' => [
     *       'hardwareProfile' => [
     *          'vmSize' =>
     *  'Basic_A0|Basic_A1|Basic_A2|Basic_A3|Basic_A4|Standard_A0|Standard_A1|Standard_A2|Standard_A3|Standard_A4|Standard_A5|Standard_A6|Standard_A7|Standard_A8|Standard_A9|Standard_A10|Standard_A11|Standard_D1|Standard_D2|Standard_D3|Standard_D4|Standard_D11|Standard_D12|Standard_D13|Standard_D14|Standard_D1_v2|Standard_D2_v2|Standard_D3_v2|Standard_D4_v2|Standard_D5_v2|Standard_D11_v2|Standard_D12_v2|Standard_D13_v2|Standard_D14_v2|Standard_D15_v2|Standard_DS1|Standard_DS2|Standard_DS3|Standard_DS4|Standard_DS11|Standard_DS12|Standard_DS13|Standard_DS14|Standard_DS1_v2|Standard_DS2_v2|Standard_DS3_v2|Standard_DS4_v2|Standard_DS5_v2|Standard_DS11_v2|Standard_DS12_v2|Standard_DS13_v2|Standard_DS14_v2|Standard_DS15_v2|Standard_G1|Standard_G2|Standard_G3|Standard_G4|Standard_G5|Standard_GS1|Standard_GS2|Standard_GS3|Standard_GS4|Standard_GS5'
     *       ],
     *       'storageProfile' => [
     *          'imageReference' => [
     *             'publisher' => '',
     *             'offer' => '',
     *             'sku' => '',
     *             'version' => ''
     *          ],
     *          'osDisk' => [
     *             'osType' => 'Windows|Linux',
     *             'encryptionSettings' => [
     *                'diskEncryptionKey' => ,
     *                'keyEncryptionKey' => ,
     *                'enabled' => 'false'
     *             ],
     *             'name' => '',
     *             'vhd' => [
     *                'uri' => ''
     *             ],
     *             'image' => [
     *                'uri' => ''
     *             ],
     *             'caching' => 'None|ReadOnly|ReadWrite',
     *             'createOption' => 'fromImage|empty|attach',
     *             'diskSizeGB' => ''
     *          ],
     *          'dataDisks' => ''
     *       ],
     *       'osProfile' => [
     *          'computerName' => '',
     *          'adminUsername' => '',
     *          'adminPassword' => '',
     *          'customData' => '',
     *          'windowsConfiguration' => [
     *             'provisionVMAgent' => 'false',
     *             'enableAutomaticUpdates' => 'false',
     *             'timeZone' => '',
     *             'additionalUnattendContent' => '',
     *             'winRM' => [
     *                'listeners' => ''
     *             ]
     *          ],
     *          'linuxConfiguration' => [
     *             'disablePasswordAuthentication' => 'false',
     *             'ssh' => [
     *                'publicKeys' => ''
     *             ]
     *          ],
     *          'secrets' => ''
     *       ],
     *       'networkProfile' => [
     *          'networkInterfaces' => ''
     *       ],
     *       'diagnosticsProfile' => [
     *          'bootDiagnostics' => [
     *             'enabled' => 'false',
     *             'storageUri' => ''
     *          ]
     *       ],
     *       'availabilitySet' => [
     *          'id' => ''
     *       ],
     *       'provisioningState' => '',
     *       'instanceView' => [
     *          'platformUpdateDomain' => '',
     *          'platformFaultDomain' => '',
     *          'rdpThumbPrint' => '',
     *          'vmAgent' => [
     *             'vmAgentVersion' => '',
     *             'extensionHandlers' => '',
     *             'statuses' => ''
     *          ],
     *          'disks' => '',
     *          'extensions' => '',
     *          'bootDiagnostics' => [
     *             'consoleScreenshotBlobUri' => '',
     *             'serialConsoleLogBlobUri' => ''
     *          ],
     *          'statuses' => ''
     *       ],
     *       'licenseType' => '',
     *       'vmId' => ''
     *    ],
     *    'resources' => ''
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => ''
     *    ],
     *    'properties' => [
     *       'hardwareProfile' => [
     *          'vmSize' =>
     *  'Basic_A0|Basic_A1|Basic_A2|Basic_A3|Basic_A4|Standard_A0|Standard_A1|Standard_A2|Standard_A3|Standard_A4|Standard_A5|Standard_A6|Standard_A7|Standard_A8|Standard_A9|Standard_A10|Standard_A11|Standard_D1|Standard_D2|Standard_D3|Standard_D4|Standard_D11|Standard_D12|Standard_D13|Standard_D14|Standard_D1_v2|Standard_D2_v2|Standard_D3_v2|Standard_D4_v2|Standard_D5_v2|Standard_D11_v2|Standard_D12_v2|Standard_D13_v2|Standard_D14_v2|Standard_D15_v2|Standard_DS1|Standard_DS2|Standard_DS3|Standard_DS4|Standard_DS11|Standard_DS12|Standard_DS13|Standard_DS14|Standard_DS1_v2|Standard_DS2_v2|Standard_DS3_v2|Standard_DS4_v2|Standard_DS5_v2|Standard_DS11_v2|Standard_DS12_v2|Standard_DS13_v2|Standard_DS14_v2|Standard_DS15_v2|Standard_G1|Standard_G2|Standard_G3|Standard_G4|Standard_G5|Standard_GS1|Standard_GS2|Standard_GS3|Standard_GS4|Standard_GS5'
     *       ],
     *       'storageProfile' => [
     *          'imageReference' => [
     *             'publisher' => '',
     *             'offer' => '',
     *             'sku' => '',
     *             'version' => ''
     *          ],
     *          'osDisk' => [
     *             'osType' => 'Windows|Linux',
     *             'encryptionSettings' => [
     *                'diskEncryptionKey' => ,
     *                'keyEncryptionKey' => ,
     *                'enabled' => 'false'
     *             ],
     *             'name' => '',
     *             'vhd' => [
     *                'uri' => ''
     *             ],
     *             'image' => [
     *                'uri' => ''
     *             ],
     *             'caching' => 'None|ReadOnly|ReadWrite',
     *             'createOption' => 'fromImage|empty|attach',
     *             'diskSizeGB' => ''
     *          ],
     *          'dataDisks' => ''
     *       ],
     *       'osProfile' => [
     *          'computerName' => '',
     *          'adminUsername' => '',
     *          'adminPassword' => '',
     *          'customData' => '',
     *          'windowsConfiguration' => [
     *             'provisionVMAgent' => 'false',
     *             'enableAutomaticUpdates' => 'false',
     *             'timeZone' => '',
     *             'additionalUnattendContent' => '',
     *             'winRM' => [
     *                'listeners' => ''
     *             ]
     *          ],
     *          'linuxConfiguration' => [
     *             'disablePasswordAuthentication' => 'false',
     *             'ssh' => [
     *                'publicKeys' => ''
     *             ]
     *          ],
     *          'secrets' => ''
     *       ],
     *       'networkProfile' => [
     *          'networkInterfaces' => ''
     *       ],
     *       'diagnosticsProfile' => [
     *          'bootDiagnostics' => [
     *             'enabled' => 'false',
     *             'storageUri' => ''
     *          ]
     *       ],
     *       'availabilitySet' => [
     *          'id' => ''
     *       ],
     *       'provisioningState' => '',
     *       'instanceView' => [
     *          'platformUpdateDomain' => '',
     *          'platformFaultDomain' => '',
     *          'rdpThumbPrint' => '',
     *          'vmAgent' => [
     *             'vmAgentVersion' => '',
     *             'extensionHandlers' => '',
     *             'statuses' => ''
     *          ],
     *          'disks' => '',
     *          'extensions' => '',
     *          'bootDiagnostics' => [
     *             'consoleScreenshotBlobUri' => '',
     *             'serialConsoleLogBlobUri' => ''
     *          ],
     *          'statuses' => ''
     *       ],
     *       'licenseType' => '',
     *       'vmId' => ''
     *    ],
     *    'resources' => ''
     * ];
     * </pre>
     */
    public function beginCreateOrUpdate($resourceGroupName, $vmName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateAsync($resourceGroupName, $vmName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to create or update a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $parameters Parameters supplied to the Create Virtual Machine operation. 
     * <pre>
     * [
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => ''
     *    ],
     *    'properties' => [
     *       'hardwareProfile' => [
     *          'vmSize' =>
     *  'Basic_A0|Basic_A1|Basic_A2|Basic_A3|Basic_A4|Standard_A0|Standard_A1|Standard_A2|Standard_A3|Standard_A4|Standard_A5|Standard_A6|Standard_A7|Standard_A8|Standard_A9|Standard_A10|Standard_A11|Standard_D1|Standard_D2|Standard_D3|Standard_D4|Standard_D11|Standard_D12|Standard_D13|Standard_D14|Standard_D1_v2|Standard_D2_v2|Standard_D3_v2|Standard_D4_v2|Standard_D5_v2|Standard_D11_v2|Standard_D12_v2|Standard_D13_v2|Standard_D14_v2|Standard_D15_v2|Standard_DS1|Standard_DS2|Standard_DS3|Standard_DS4|Standard_DS11|Standard_DS12|Standard_DS13|Standard_DS14|Standard_DS1_v2|Standard_DS2_v2|Standard_DS3_v2|Standard_DS4_v2|Standard_DS5_v2|Standard_DS11_v2|Standard_DS12_v2|Standard_DS13_v2|Standard_DS14_v2|Standard_DS15_v2|Standard_G1|Standard_G2|Standard_G3|Standard_G4|Standard_G5|Standard_GS1|Standard_GS2|Standard_GS3|Standard_GS4|Standard_GS5'
     *       ],
     *       'storageProfile' => [
     *          'imageReference' => [
     *             'publisher' => '',
     *             'offer' => '',
     *             'sku' => '',
     *             'version' => ''
     *          ],
     *          'osDisk' => [
     *             'osType' => 'Windows|Linux',
     *             'encryptionSettings' => [
     *                'diskEncryptionKey' => ,
     *                'keyEncryptionKey' => ,
     *                'enabled' => 'false'
     *             ],
     *             'name' => '',
     *             'vhd' => [
     *                'uri' => ''
     *             ],
     *             'image' => [
     *                'uri' => ''
     *             ],
     *             'caching' => 'None|ReadOnly|ReadWrite',
     *             'createOption' => 'fromImage|empty|attach',
     *             'diskSizeGB' => ''
     *          ],
     *          'dataDisks' => ''
     *       ],
     *       'osProfile' => [
     *          'computerName' => '',
     *          'adminUsername' => '',
     *          'adminPassword' => '',
     *          'customData' => '',
     *          'windowsConfiguration' => [
     *             'provisionVMAgent' => 'false',
     *             'enableAutomaticUpdates' => 'false',
     *             'timeZone' => '',
     *             'additionalUnattendContent' => '',
     *             'winRM' => [
     *                'listeners' => ''
     *             ]
     *          ],
     *          'linuxConfiguration' => [
     *             'disablePasswordAuthentication' => 'false',
     *             'ssh' => [
     *                'publicKeys' => ''
     *             ]
     *          ],
     *          'secrets' => ''
     *       ],
     *       'networkProfile' => [
     *          'networkInterfaces' => ''
     *       ],
     *       'diagnosticsProfile' => [
     *          'bootDiagnostics' => [
     *             'enabled' => 'false',
     *             'storageUri' => ''
     *          ]
     *       ],
     *       'availabilitySet' => [
     *          'id' => ''
     *       ],
     *       'provisioningState' => '',
     *       'instanceView' => [
     *          'platformUpdateDomain' => '',
     *          'platformFaultDomain' => '',
     *          'rdpThumbPrint' => '',
     *          'vmAgent' => [
     *             'vmAgentVersion' => '',
     *             'extensionHandlers' => '',
     *             'statuses' => ''
     *          ],
     *          'disks' => '',
     *          'extensions' => '',
     *          'bootDiagnostics' => [
     *             'consoleScreenshotBlobUri' => '',
     *             'serialConsoleLogBlobUri' => ''
     *          ],
     *          'statuses' => ''
     *       ],
     *       'licenseType' => '',
     *       'vmId' => ''
     *    ],
     *    'resources' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateAsync($resourceGroupName, $vmName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to delete a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function delete($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->begindeleteAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to delete a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function beginDelete($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginDeleteAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to delete a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteAsync($resourceGroupName, $vmName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}';
        $statusCodes = [202, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to get a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param InstanceViewTypes $expand The expand expression to apply on the
     * operation. Possible values include: 'instanceView'
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'plan' => [
     *       'name' => '',
     *       'publisher' => '',
     *       'product' => '',
     *       'promotionCode' => ''
     *    ],
     *    'properties' => [
     *       'hardwareProfile' => [
     *          'vmSize' =>
     *  'Basic_A0|Basic_A1|Basic_A2|Basic_A3|Basic_A4|Standard_A0|Standard_A1|Standard_A2|Standard_A3|Standard_A4|Standard_A5|Standard_A6|Standard_A7|Standard_A8|Standard_A9|Standard_A10|Standard_A11|Standard_D1|Standard_D2|Standard_D3|Standard_D4|Standard_D11|Standard_D12|Standard_D13|Standard_D14|Standard_D1_v2|Standard_D2_v2|Standard_D3_v2|Standard_D4_v2|Standard_D5_v2|Standard_D11_v2|Standard_D12_v2|Standard_D13_v2|Standard_D14_v2|Standard_D15_v2|Standard_DS1|Standard_DS2|Standard_DS3|Standard_DS4|Standard_DS11|Standard_DS12|Standard_DS13|Standard_DS14|Standard_DS1_v2|Standard_DS2_v2|Standard_DS3_v2|Standard_DS4_v2|Standard_DS5_v2|Standard_DS11_v2|Standard_DS12_v2|Standard_DS13_v2|Standard_DS14_v2|Standard_DS15_v2|Standard_G1|Standard_G2|Standard_G3|Standard_G4|Standard_G5|Standard_GS1|Standard_GS2|Standard_GS3|Standard_GS4|Standard_GS5'
     *       ],
     *       'storageProfile' => [
     *          'imageReference' => [
     *             'publisher' => '',
     *             'offer' => '',
     *             'sku' => '',
     *             'version' => ''
     *          ],
     *          'osDisk' => [
     *             'osType' => 'Windows|Linux',
     *             'encryptionSettings' => [
     *                'diskEncryptionKey' => ,
     *                'keyEncryptionKey' => ,
     *                'enabled' => 'false'
     *             ],
     *             'name' => '',
     *             'vhd' => [
     *                'uri' => ''
     *             ],
     *             'image' => [
     *                'uri' => ''
     *             ],
     *             'caching' => 'None|ReadOnly|ReadWrite',
     *             'createOption' => 'fromImage|empty|attach',
     *             'diskSizeGB' => ''
     *          ],
     *          'dataDisks' => ''
     *       ],
     *       'osProfile' => [
     *          'computerName' => '',
     *          'adminUsername' => '',
     *          'adminPassword' => '',
     *          'customData' => '',
     *          'windowsConfiguration' => [
     *             'provisionVMAgent' => 'false',
     *             'enableAutomaticUpdates' => 'false',
     *             'timeZone' => '',
     *             'additionalUnattendContent' => '',
     *             'winRM' => [
     *                'listeners' => ''
     *             ]
     *          ],
     *          'linuxConfiguration' => [
     *             'disablePasswordAuthentication' => 'false',
     *             'ssh' => [
     *                'publicKeys' => ''
     *             ]
     *          ],
     *          'secrets' => ''
     *       ],
     *       'networkProfile' => [
     *          'networkInterfaces' => ''
     *       ],
     *       'diagnosticsProfile' => [
     *          'bootDiagnostics' => [
     *             'enabled' => 'false',
     *             'storageUri' => ''
     *          ]
     *       ],
     *       'availabilitySet' => [
     *          'id' => ''
     *       ],
     *       'provisioningState' => '',
     *       'instanceView' => [
     *          'platformUpdateDomain' => '',
     *          'platformFaultDomain' => '',
     *          'rdpThumbPrint' => '',
     *          'vmAgent' => [
     *             'vmAgentVersion' => '',
     *             'extensionHandlers' => '',
     *             'statuses' => ''
     *          ],
     *          'disks' => '',
     *          'extensions' => '',
     *          'bootDiagnostics' => [
     *             'consoleScreenshotBlobUri' => '',
     *             'serialConsoleLogBlobUri' => ''
     *          ],
     *          'statuses' => ''
     *       ],
     *       'licenseType' => '',
     *       'vmId' => ''
     *    ],
     *    'resources' => ''
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $vmName, array $expand, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $vmName, $expand, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to get a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param InstanceViewTypes $expand The expand expression to apply on the
     * operation. Possible values include: 'instanceView'
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $vmName, array $expand, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$expand' => $expand, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Shuts down the Virtual Machine and releases the compute resources. You are
     * not billed for the compute resources that this Virtual Machine uses.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function deallocate($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->begindeallocateAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Shuts down the Virtual Machine and releases the compute resources. You are
     * not billed for the compute resources that this Virtual Machine uses.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginDeallocate($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginDeallocateAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Shuts down the Virtual Machine and releases the compute resources. You are
     * not billed for the compute resources that this Virtual Machine uses.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeallocateAsync($resourceGroupName, $vmName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Sets the state of the VM as Generalized.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function generalize($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->generalizeAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Sets the state of the VM as Generalized.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function generalizeAsync($resourceGroupName, $vmName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to list virtual machines under a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to list virtual machines under a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the list of Virtual Machines in the subscription. Use nextLink
     * property in the response to get the next page of Virtual Machines. Do this
     * till nextLink is not null to fetch all the Virtual Machines.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAll(array $customHeaders = [])
    {
        $response = $this->listAllAsync($customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the list of Virtual Machines in the subscription. Use nextLink
     * property in the response to get the next page of Virtual Machines. Do this
     * till nextLink is not null to fetch all the Virtual Machines.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAllAsync(array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all available virtual machine sizes it can be resized to for a
     * virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => ''
     * ];
     * </pre>
     */
    public function listAvailableSizes($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->listAvailableSizesAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all available virtual machine sizes it can be resized to for a
     * virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAvailableSizesAsync($resourceGroupName, $vmName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to power off (stop) a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function powerOff($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginpowerOffAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to power off (stop) a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginPowerOff($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginPowerOffAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to power off (stop) a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginPowerOffAsync($resourceGroupName, $vmName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to restart a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function restart($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginrestartAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to restart a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginRestart($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginRestartAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to restart a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRestartAsync($resourceGroupName, $vmName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to start a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function start($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginstartAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to start a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginStart($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginStartAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to start a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginStartAsync($resourceGroupName, $vmName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to redeploy a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function redeploy($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginredeployAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to redeploy a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginRedeploy($resourceGroupName, $vmName, array $customHeaders = [])
    {
        $response = $this->beginRedeployAsync($resourceGroupName, $vmName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to redeploy a virtual machine.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmName The name of the virtual machine.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRedeployAsync($resourceGroupName, $vmName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmName == null) {
            Validate::notNullOrEmpty($vmName, '$vmName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmName}' => $vmName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The operation to list virtual machines under a resource group.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The operation to list virtual machines under a resource group.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the list of Virtual Machines in the subscription. Use nextLink
     * property in the response to get the next page of Virtual Machines. Do this
     * till nextLink is not null to fetch all the Virtual Machines.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAllNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAllNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the list of Virtual Machines in the subscription. Use nextLink
     * property in the response to get the next page of Virtual Machines. Do this
     * till nextLink is not null to fetch all the Virtual Machines.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAllNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
