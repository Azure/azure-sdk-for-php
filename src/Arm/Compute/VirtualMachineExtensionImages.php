<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-03-30
 */

namespace MicrosoftAzure\Arm\Compute;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * VirtualMachineExtensionImages for The Compute Management Client.
 */
class VirtualMachineExtensionImages
{
    /**
     * The service client object for the operations.
     *
     * @var ComputeManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for VirtualMachineExtensionImages.
     *
     * @param ComputeManagementClient, Service client for VirtualMachineExtensionImages
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Gets a virtual machine extension image.
     *
     * @param string $location
     * @param string $publisherName
     * @param string $type
     * @param string $version
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'operatingSystem' => '',
     *       'computeRole' => '',
     *       'handlerSchema' => '',
     *       'vmScaleSetEnabled' => 'false',
     *       'supportsMultipleExtensions' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function get($location, $publisherName, $type, $version, array $customHeaders = [])
    {
        $response = $this->getAsync($location, $publisherName, $type, $version, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a virtual machine extension image.
     *
     * @param string $location
     * @param string $publisherName
     * @param string $type
     * @param string $version
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($location, $publisherName, $type, $version, array $customHeaders = [])
    {
        if ($location == null) {
            Validate::notNullOrEmpty($location, '$location');
        }
        if ($publisherName == null) {
            Validate::notNullOrEmpty($publisherName, '$publisherName');
        }
        if ($type == null) {
            Validate::notNullOrEmpty($type, '$type');
        }
        if ($version == null) {
            Validate::notNullOrEmpty($version, '$version');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions/{version}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{location}' => $location, '{publisherName}' => $publisherName, '{type}' => $type, '{version}' => $version, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a list of virtual machine extension image types.
     *
     * @param string $location
     * @param string $publisherName
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'operatingSystem' => '',
     *       'computeRole' => '',
     *       'handlerSchema' => '',
     *       'vmScaleSetEnabled' => 'false',
     *       'supportsMultipleExtensions' => 'false'
     *    ]
     * ];
     * </pre>
     * )
     */
    public function listTypes($location, $publisherName, array $customHeaders = [])
    {
        $response = $this->listTypesAsync($location, $publisherName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a list of virtual machine extension image types.
     *
     * @param string $location
     * @param string $publisherName
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listTypesAsync($location, $publisherName, array $customHeaders = [])
    {
        if ($location == null) {
            Validate::notNullOrEmpty($location, '$location');
        }
        if ($publisherName == null) {
            Validate::notNullOrEmpty($publisherName, '$publisherName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{location}' => $location, '{publisherName}' => $publisherName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets a list of virtual machine extension image versions.
     *
     * @param string $location
     * @param string $publisherName
     * @param string $type
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'operatingSystem' => '',
     *       'computeRole' => '',
     *       'handlerSchema' => '',
     *       'vmScaleSetEnabled' => 'false',
     *       'supportsMultipleExtensions' => 'false'
     *    ]
     * ];
     * </pre>
     * @param int $top
     * @param string $orderby
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), array (
     * <pre>
     * [
     *    'properties' => [
     *       'operatingSystem' => '',
     *       'computeRole' => '',
     *       'handlerSchema' => '',
     *       'vmScaleSetEnabled' => 'false',
     *       'supportsMultipleExtensions' => 'false'
     *    ]
     * ];
     * </pre>
     * )
     */
    public function listVersions($location, $publisherName, $type, array $filter, $top = null, $orderby = null, array $customHeaders = [])
    {
        $response = $this->listVersionsAsync($location, $publisherName, $type, $filter, $top, $orderby, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets a list of virtual machine extension image versions.
     *
     * @param string $location
     * @param string $publisherName
     * @param string $type
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'operatingSystem' => '',
     *       'computeRole' => '',
     *       'handlerSchema' => '',
     *       'vmScaleSetEnabled' => 'false',
     *       'supportsMultipleExtensions' => 'false'
     *    ]
     * ];
     * </pre>
     * @param int $top
     * @param string $orderby
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listVersionsAsync($location, $publisherName, $type, array $filter, $top = null, $orderby = null, array $customHeaders = [])
    {
        if ($location == null) {
            Validate::notNullOrEmpty($location, '$location');
        }
        if ($publisherName == null) {
            Validate::notNullOrEmpty($publisherName, '$publisherName');
        }
        if ($type == null) {
            Validate::notNullOrEmpty($type, '$type');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{location}' => $location, '{publisherName}' => $publisherName, '{type}' => $type, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$orderby' => $orderby, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
