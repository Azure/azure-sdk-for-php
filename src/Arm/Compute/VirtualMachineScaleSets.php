<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-03-30
 */

namespace MicrosoftAzure\Arm\Compute;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * VirtualMachineScaleSets for The Compute Management Client.
 */
class VirtualMachineScaleSets
{
    /**
     * The service client object for the operations.
     *
     * @var ComputeManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for VirtualMachineScaleSets.
     *
     * @param ComputeManagementClient, Service client for VirtualMachineScaleSets
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Allows you to create or update a virtual machine scale set by providing
     * parameters or a path to pre-configured parameter file.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $name Parameters supplied to the Create Virtual Machine Scale
     * Set operation.
     * @param array $parameters Parameters supplied to the Create Virtual Machine Scale Set operation. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'capacity' => ''
     *    ],
     *    'properties' => [
     *       'upgradePolicy' => [
     *          'mode' => 'Automatic|Manual'
     *       ],
     *       'virtualMachineProfile' => [
     *          'osProfile' => [
     *             'computerNamePrefix' => '',
     *             'adminUsername' => '',
     *             'adminPassword' => '',
     *             'customData' => '',
     *             'windowsConfiguration' => [
     *                'provisionVMAgent' => 'false',
     *                'enableAutomaticUpdates' => 'false',
     *                'timeZone' => '',
     *                'additionalUnattendContent' => '',
     *                'winRM' => 
     *             ],
     *             'linuxConfiguration' => [
     *                'disablePasswordAuthentication' => 'false',
     *                'ssh' => 
     *             ],
     *             'secrets' => ''
     *          ],
     *          'storageProfile' => [
     *             'imageReference' => [
     *                'publisher' => '',
     *                'offer' => '',
     *                'sku' => '',
     *                'version' => ''
     *             ],
     *             'osDisk' => [
     *                'name' => '',
     *                'caching' => 'None|ReadOnly|ReadWrite',
     *                'createOption' => 'fromImage|empty|attach',
     *                'osType' => 'Windows|Linux',
     *                'image' => ,
     *                'vhdContainers' => ''
     *             ]
     *          ],
     *          'networkProfile' => [
     *             'networkInterfaceConfigurations' => ''
     *          ],
     *          'extensionProfile' => [
     *             'extensions' => ''
     *          ]
     *       ],
     *       'provisioningState' => '',
     *       'overProvision' => 'false'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'capacity' => ''
     *    ],
     *    'properties' => [
     *       'upgradePolicy' => [
     *          'mode' => 'Automatic|Manual'
     *       ],
     *       'virtualMachineProfile' => [
     *          'osProfile' => [
     *             'computerNamePrefix' => '',
     *             'adminUsername' => '',
     *             'adminPassword' => '',
     *             'customData' => '',
     *             'windowsConfiguration' => [
     *                'provisionVMAgent' => 'false',
     *                'enableAutomaticUpdates' => 'false',
     *                'timeZone' => '',
     *                'additionalUnattendContent' => '',
     *                'winRM' => 
     *             ],
     *             'linuxConfiguration' => [
     *                'disablePasswordAuthentication' => 'false',
     *                'ssh' => 
     *             ],
     *             'secrets' => ''
     *          ],
     *          'storageProfile' => [
     *             'imageReference' => [
     *                'publisher' => '',
     *                'offer' => '',
     *                'sku' => '',
     *                'version' => ''
     *             ],
     *             'osDisk' => [
     *                'name' => '',
     *                'caching' => 'None|ReadOnly|ReadWrite',
     *                'createOption' => 'fromImage|empty|attach',
     *                'osType' => 'Windows|Linux',
     *                'image' => ,
     *                'vhdContainers' => ''
     *             ]
     *          ],
     *          'networkProfile' => [
     *             'networkInterfaceConfigurations' => ''
     *          ],
     *          'extensionProfile' => [
     *             'extensions' => ''
     *          ]
     *       ],
     *       'provisioningState' => '',
     *       'overProvision' => 'false'
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'capacity' => ''
     *    ],
     *    'properties' => [
     *       'upgradePolicy' => [
     *          'mode' => 'Automatic|Manual'
     *       ],
     *       'virtualMachineProfile' => [
     *          'osProfile' => [
     *             'computerNamePrefix' => '',
     *             'adminUsername' => '',
     *             'adminPassword' => '',
     *             'customData' => '',
     *             'windowsConfiguration' => [
     *                'provisionVMAgent' => 'false',
     *                'enableAutomaticUpdates' => 'false',
     *                'timeZone' => '',
     *                'additionalUnattendContent' => '',
     *                'winRM' => 
     *             ],
     *             'linuxConfiguration' => [
     *                'disablePasswordAuthentication' => 'false',
     *                'ssh' => 
     *             ],
     *             'secrets' => ''
     *          ],
     *          'storageProfile' => [
     *             'imageReference' => [
     *                'publisher' => '',
     *                'offer' => '',
     *                'sku' => '',
     *                'version' => ''
     *             ],
     *             'osDisk' => [
     *                'name' => '',
     *                'caching' => 'None|ReadOnly|ReadWrite',
     *                'createOption' => 'fromImage|empty|attach',
     *                'osType' => 'Windows|Linux',
     *                'image' => ,
     *                'vhdContainers' => ''
     *             ]
     *          ],
     *          'networkProfile' => [
     *             'networkInterfaceConfigurations' => ''
     *          ],
     *          'extensionProfile' => [
     *             'extensions' => ''
     *          ]
     *       ],
     *       'provisioningState' => '',
     *       'overProvision' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdate($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to create or update a virtual machine scale set by providing
     * parameters or a path to pre-configured parameter file.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $name Parameters supplied to the Create Virtual Machine Scale
     * Set operation.
     * @param array $parameters Parameters supplied to the Create Virtual Machine Scale Set operation. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'capacity' => ''
     *    ],
     *    'properties' => [
     *       'upgradePolicy' => [
     *          'mode' => 'Automatic|Manual'
     *       ],
     *       'virtualMachineProfile' => [
     *          'osProfile' => [
     *             'computerNamePrefix' => '',
     *             'adminUsername' => '',
     *             'adminPassword' => '',
     *             'customData' => '',
     *             'windowsConfiguration' => [
     *                'provisionVMAgent' => 'false',
     *                'enableAutomaticUpdates' => 'false',
     *                'timeZone' => '',
     *                'additionalUnattendContent' => '',
     *                'winRM' => 
     *             ],
     *             'linuxConfiguration' => [
     *                'disablePasswordAuthentication' => 'false',
     *                'ssh' => 
     *             ],
     *             'secrets' => ''
     *          ],
     *          'storageProfile' => [
     *             'imageReference' => [
     *                'publisher' => '',
     *                'offer' => '',
     *                'sku' => '',
     *                'version' => ''
     *             ],
     *             'osDisk' => [
     *                'name' => '',
     *                'caching' => 'None|ReadOnly|ReadWrite',
     *                'createOption' => 'fromImage|empty|attach',
     *                'osType' => 'Windows|Linux',
     *                'image' => ,
     *                'vhdContainers' => ''
     *             ]
     *          ],
     *          'networkProfile' => [
     *             'networkInterfaceConfigurations' => ''
     *          ],
     *          'extensionProfile' => [
     *             'extensions' => ''
     *          ]
     *       ],
     *       'provisioningState' => '',
     *       'overProvision' => 'false'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'capacity' => ''
     *    ],
     *    'properties' => [
     *       'upgradePolicy' => [
     *          'mode' => 'Automatic|Manual'
     *       ],
     *       'virtualMachineProfile' => [
     *          'osProfile' => [
     *             'computerNamePrefix' => '',
     *             'adminUsername' => '',
     *             'adminPassword' => '',
     *             'customData' => '',
     *             'windowsConfiguration' => [
     *                'provisionVMAgent' => 'false',
     *                'enableAutomaticUpdates' => 'false',
     *                'timeZone' => '',
     *                'additionalUnattendContent' => '',
     *                'winRM' => 
     *             ],
     *             'linuxConfiguration' => [
     *                'disablePasswordAuthentication' => 'false',
     *                'ssh' => 
     *             ],
     *             'secrets' => ''
     *          ],
     *          'storageProfile' => [
     *             'imageReference' => [
     *                'publisher' => '',
     *                'offer' => '',
     *                'sku' => '',
     *                'version' => ''
     *             ],
     *             'osDisk' => [
     *                'name' => '',
     *                'caching' => 'None|ReadOnly|ReadWrite',
     *                'createOption' => 'fromImage|empty|attach',
     *                'osType' => 'Windows|Linux',
     *                'image' => ,
     *                'vhdContainers' => ''
     *             ]
     *          ],
     *          'networkProfile' => [
     *             'networkInterfaceConfigurations' => ''
     *          ],
     *          'extensionProfile' => [
     *             'extensions' => ''
     *          ]
     *       ],
     *       'provisioningState' => '',
     *       'overProvision' => 'false'
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'capacity' => ''
     *    ],
     *    'properties' => [
     *       'upgradePolicy' => [
     *          'mode' => 'Automatic|Manual'
     *       ],
     *       'virtualMachineProfile' => [
     *          'osProfile' => [
     *             'computerNamePrefix' => '',
     *             'adminUsername' => '',
     *             'adminPassword' => '',
     *             'customData' => '',
     *             'windowsConfiguration' => [
     *                'provisionVMAgent' => 'false',
     *                'enableAutomaticUpdates' => 'false',
     *                'timeZone' => '',
     *                'additionalUnattendContent' => '',
     *                'winRM' => 
     *             ],
     *             'linuxConfiguration' => [
     *                'disablePasswordAuthentication' => 'false',
     *                'ssh' => 
     *             ],
     *             'secrets' => ''
     *          ],
     *          'storageProfile' => [
     *             'imageReference' => [
     *                'publisher' => '',
     *                'offer' => '',
     *                'sku' => '',
     *                'version' => ''
     *             ],
     *             'osDisk' => [
     *                'name' => '',
     *                'caching' => 'None|ReadOnly|ReadWrite',
     *                'createOption' => 'fromImage|empty|attach',
     *                'osType' => 'Windows|Linux',
     *                'image' => ,
     *                'vhdContainers' => ''
     *             ]
     *          ],
     *          'networkProfile' => [
     *             'networkInterfaceConfigurations' => ''
     *          ],
     *          'extensionProfile' => [
     *             'extensions' => ''
     *          ]
     *       ],
     *       'provisioningState' => '',
     *       'overProvision' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function beginCreateOrUpdate($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to create or update a virtual machine scale set by providing
     * parameters or a path to pre-configured parameter file.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $name Parameters supplied to the Create Virtual Machine Scale
     * Set operation.
     * @param array $parameters Parameters supplied to the Create Virtual Machine Scale Set operation. 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'capacity' => ''
     *    ],
     *    'properties' => [
     *       'upgradePolicy' => [
     *          'mode' => 'Automatic|Manual'
     *       ],
     *       'virtualMachineProfile' => [
     *          'osProfile' => [
     *             'computerNamePrefix' => '',
     *             'adminUsername' => '',
     *             'adminPassword' => '',
     *             'customData' => '',
     *             'windowsConfiguration' => [
     *                'provisionVMAgent' => 'false',
     *                'enableAutomaticUpdates' => 'false',
     *                'timeZone' => '',
     *                'additionalUnattendContent' => '',
     *                'winRM' => 
     *             ],
     *             'linuxConfiguration' => [
     *                'disablePasswordAuthentication' => 'false',
     *                'ssh' => 
     *             ],
     *             'secrets' => ''
     *          ],
     *          'storageProfile' => [
     *             'imageReference' => [
     *                'publisher' => '',
     *                'offer' => '',
     *                'sku' => '',
     *                'version' => ''
     *             ],
     *             'osDisk' => [
     *                'name' => '',
     *                'caching' => 'None|ReadOnly|ReadWrite',
     *                'createOption' => 'fromImage|empty|attach',
     *                'osType' => 'Windows|Linux',
     *                'image' => ,
     *                'vhdContainers' => ''
     *             ]
     *          ],
     *          'networkProfile' => [
     *             'networkInterfaceConfigurations' => ''
     *          ],
     *          'extensionProfile' => [
     *             'extensions' => ''
     *          ]
     *       ],
     *       'provisioningState' => '',
     *       'overProvision' => 'false'
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateAsync($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{name}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Allows you to deallocate virtual machines in a virtual machine scale set.
     * Shuts down the virtual machines and releases the compute resources. You
     * are not billed for the compute resources that this virtual machine scale
     * set uses.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function deallocate($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->begindeallocateAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to deallocate virtual machines in a virtual machine scale set.
     * Shuts down the virtual machines and releases the compute resources. You
     * are not billed for the compute resources that this virtual machine scale
     * set uses.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginDeallocate($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginDeallocateAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to deallocate virtual machines in a virtual machine scale set.
     * Shuts down the virtual machines and releases the compute resources. You
     * are not billed for the compute resources that this virtual machine scale
     * set uses.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeallocateAsync($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/deallocate';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($vmInstanceIDs);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Allows you to delete a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function delete($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        $response = $this->begindeleteAsync($resourceGroupName, $vmScaleSetName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to delete a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function beginDelete($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        $response = $this->beginDeleteAsync($resourceGroupName, $vmScaleSetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to delete a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteAsync($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}';
        $statusCodes = [200, 202, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Display information about a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'sku' => [
     *       'name' => '',
     *       'tier' => '',
     *       'capacity' => ''
     *    ],
     *    'properties' => [
     *       'upgradePolicy' => [
     *          'mode' => 'Automatic|Manual'
     *       ],
     *       'virtualMachineProfile' => [
     *          'osProfile' => [
     *             'computerNamePrefix' => '',
     *             'adminUsername' => '',
     *             'adminPassword' => '',
     *             'customData' => '',
     *             'windowsConfiguration' => [
     *                'provisionVMAgent' => 'false',
     *                'enableAutomaticUpdates' => 'false',
     *                'timeZone' => '',
     *                'additionalUnattendContent' => '',
     *                'winRM' => 
     *             ],
     *             'linuxConfiguration' => [
     *                'disablePasswordAuthentication' => 'false',
     *                'ssh' => 
     *             ],
     *             'secrets' => ''
     *          ],
     *          'storageProfile' => [
     *             'imageReference' => [
     *                'publisher' => '',
     *                'offer' => '',
     *                'sku' => '',
     *                'version' => ''
     *             ],
     *             'osDisk' => [
     *                'name' => '',
     *                'caching' => 'None|ReadOnly|ReadWrite',
     *                'createOption' => 'fromImage|empty|attach',
     *                'osType' => 'Windows|Linux',
     *                'image' => ,
     *                'vhdContainers' => ''
     *             ]
     *          ],
     *          'networkProfile' => [
     *             'networkInterfaceConfigurations' => ''
     *          ],
     *          'extensionProfile' => [
     *             'extensions' => ''
     *          ]
     *       ],
     *       'provisioningState' => '',
     *       'overProvision' => 'false'
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $vmScaleSetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Display information about a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Allows you to delete virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => 'requiredInstanceIds'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function deleteInstances($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->begindeleteInstancesAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to delete virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => 'requiredInstanceIds'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginDeleteInstances($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginDeleteInstancesAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to delete virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => 'requiredInstanceIds'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteInstancesAsync($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($vmInstanceIDs == null) {
            Validate::notNullOrEmpty($vmInstanceIDs, '$vmInstanceIDs');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/delete';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($vmInstanceIDs);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Displays status of a virtual machine scale set instance.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'virtualMachine' => [
     *       'statusesSummary' => ''
     *    ],
     *    'extensions' => '',
     *    'statuses' => ''
     * ];
     * </pre>
     */
    public function getInstanceView($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        $response = $this->getInstanceViewAsync($resourceGroupName, $vmScaleSetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Displays status of a virtual machine scale set instance.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getInstanceViewAsync($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/instanceView';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all virtual machine scale sets under a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($resourceGroupName, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($resourceGroupName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all virtual machine scale sets under a resource group.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($resourceGroupName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all Virtual Machine Scale Sets in the subscription. Use nextLink
     * property in the response to get the next page of Virtual Machine Scale
     * Sets. Do this till nextLink is not null to fetch all the Virtual Machine
     * Scale Sets.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAll(array $customHeaders = [])
    {
        $response = $this->listAllAsync($customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all Virtual Machine Scale Sets in the subscription. Use nextLink
     * property in the response to get the next page of Virtual Machine Scale
     * Sets. Do this till nextLink is not null to fetch all the Virtual Machine
     * Scale Sets.
     *
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAllAsync(array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachineScaleSets';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Displays available skus for your virtual machine scale set including the
     * minimum and maximum vm instances allowed for a particular sku.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listSkus($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        $response = $this->listSkusAsync($resourceGroupName, $vmScaleSetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Displays available skus for your virtual machine scale set including the
     * minimum and maximum vm instances allowed for a particular sku.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSkusAsync($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/skus';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Allows you to power off (stop) virtual machines in a virtual machine scale
     * set. Note that resources are still attached and you are getting charged
     * for the resources. Use deallocate to release resources.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function powerOff($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginpowerOffAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to power off (stop) virtual machines in a virtual machine scale
     * set. Note that resources are still attached and you are getting charged
     * for the resources. Use deallocate to release resources.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginPowerOff($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginPowerOffAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to power off (stop) virtual machines in a virtual machine scale
     * set. Note that resources are still attached and you are getting charged
     * for the resources. Use deallocate to release resources.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginPowerOffAsync($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/poweroff';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($vmInstanceIDs);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Allows you to restart virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function restart($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginrestartAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to restart virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginRestart($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginRestartAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to restart virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRestartAsync($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/restart';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($vmInstanceIDs);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Allows you to start virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function start($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginstartAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to start virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginStart($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginStartAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to start virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginStartAsync($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/start';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($vmInstanceIDs);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Allows you to manually upgrade virtual machines in a virtual machine scale
     * set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => 'requiredInstanceIds'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function updateInstances($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginupdateInstancesAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to manually upgrade virtual machines in a virtual machine scale
     * set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => 'requiredInstanceIds'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginUpdateInstances($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        $response = $this->beginUpdateInstancesAsync($resourceGroupName, $vmScaleSetName, $vmInstanceIDs, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to manually upgrade virtual machines in a virtual machine scale
     * set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $vmInstanceIDs The list of virtual machine scale set instance IDs. 
     * <pre>
     * [
     *    'instanceIds' => 'requiredInstanceIds'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginUpdateInstancesAsync($resourceGroupName, $vmScaleSetName, array $vmInstanceIDs, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($vmInstanceIDs == null) {
            Validate::notNullOrEmpty($vmInstanceIDs, '$vmInstanceIDs');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/manualupgrade';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($vmInstanceIDs);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Allows you to re-image(update the version of the installed operating
     * system) virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function reimage($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        $response = $this->beginreimageAsync($resourceGroupName, $vmScaleSetName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to re-image(update the version of the installed operating
     * system) virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     */
    public function beginReimage($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        $response = $this->beginReimageAsync($resourceGroupName, $vmScaleSetName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Allows you to re-image(update the version of the installed operating
     * system) virtual machines in a virtual machine scale set.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $vmScaleSetName The name of the virtual machine scale set.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginReimageAsync($resourceGroupName, $vmScaleSetName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($vmScaleSetName == null) {
            Validate::notNullOrEmpty($vmScaleSetName, '$vmScaleSetName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimage';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{vmScaleSetName}' => $vmScaleSetName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all virtual machine scale sets under a resource group.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all virtual machine scale sets under a resource group.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists all Virtual Machine Scale Sets in the subscription. Use nextLink
     * property in the response to get the next page of Virtual Machine Scale
     * Sets. Do this till nextLink is not null to fetch all the Virtual Machine
     * Scale Sets.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAllNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAllNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists all Virtual Machine Scale Sets in the subscription. Use nextLink
     * property in the response to get the next page of Virtual Machine Scale
     * Sets. Do this till nextLink is not null to fetch all the Virtual Machine
     * Scale Sets.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAllNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Displays available skus for your virtual machine scale set including the
     * minimum and maximum vm instances allowed for a particular sku.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listSkusNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listSkusNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Displays available skus for your virtual machine scale set including the
     * minimum and maximum vm instances allowed for a particular sku.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSkusNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
