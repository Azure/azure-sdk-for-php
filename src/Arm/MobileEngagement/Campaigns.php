<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2014-12-01
 */

namespace MicrosoftAzure\Arm\MobileEngagement;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Campaigns for Microsoft Azure Mobile Engagement REST APIs.
 */
class Campaigns
{
    /**
     * The service client object for the operations.
     *
     * @var EngagementManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Campaigns.
     *
     * @param EngagementManagementClient, Service client for Campaigns
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Get the list of campaigns.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $skip Control paging of campaigns, start results at the given
     * offset, defaults to 0 (1st page of data).
     * @param int $top Control paging of campaigns, number of campaigns to return
     * with each call. It returns all campaigns by default. When specifying $top
     * parameter, the response contains a `nextLink` property describing the path
     * to get the next page if there are more results.
     * @param string $filter Filter can be used to restrict the results to
     * campaigns matching a specific state. The syntax is `$filter=state eq
     * 'draft'`. Valid state values are: draft, scheduled, in-progress, and
     * finished. Only the eq operator and the state property are supported.
     * @param string $orderby Sort results by an expression which looks like
     * `$orderby=id asc` (this example is actually the default behavior). The
     * syntax is orderby={property} {direction} or just orderby={property}. The
     * available sorting properties are id, name, state, activatedDate, and
     * finishedDate. The available directions are asc (for ascending order) and
     * desc (for descending order). When not specified the asc direction is used.
     * Only one property at a time can be used for sorting.
     * @param string $search Restrict results to campaigns matching the optional
     * `search` expression. This currently performs the search based on the name
     * on the campaign only, case insensitive. If the campaign contains the value
     * of the `search` parameter anywhere in the name, it matches.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation(array $kind, $skip = null, $top = null, $filter = null, $orderby = null, $search = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($kind, $skip, $top, $filter, $orderby, $search, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the list of campaigns.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $skip Control paging of campaigns, start results at the given
     * offset, defaults to 0 (1st page of data).
     * @param int $top Control paging of campaigns, number of campaigns to return
     * with each call. It returns all campaigns by default. When specifying $top
     * parameter, the response contains a `nextLink` property describing the path
     * to get the next page if there are more results.
     * @param string $filter Filter can be used to restrict the results to
     * campaigns matching a specific state. The syntax is `$filter=state eq
     * 'draft'`. Valid state values are: draft, scheduled, in-progress, and
     * finished. Only the eq operator and the state property are supported.
     * @param string $orderby Sort results by an expression which looks like
     * `$orderby=id asc` (this example is actually the default behavior). The
     * syntax is orderby={property} {direction} or just orderby={property}. The
     * available sorting properties are id, name, state, activatedDate, and
     * finishedDate. The available directions are asc (for ascending order) and
     * desc (for descending order). When not specified the asc direction is used.
     * Only one property at a time can be used for sorting.
     * @param string $search Restrict results to campaigns matching the optional
     * `search` expression. This currently performs the search based on the name
     * on the campaign only, case insensitive. If the campaign contains the value
     * of the `search` parameter anywhere in the name, it matches.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync(array $kind, $skip = null, $top = null, $filter = null, $orderby = null, $search = null, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind]);
        $queryParams = ['api-version' => $this->_client->getApiVersion(), '$skip' => $skip, '$top' => $top, '$filter' => $filter, '$orderby' => $orderby, '$search' => $search];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create a push campaign (announcement, poll, data push or native push).
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param array $parameters Parameters supplied to the Update Campaign operation. 
     * <pre>
     * [
     *    'name' => '',
     *    'audience' => [
     *       'expression' => '',
     *       'criteria' => '',
     *       'filters' => ''
     *    ],
     *    'category' => '',
     *    'pushMode' => 'real-time|one-shot|manual',
     *    'type' => 'text/plain|text/html|only_notif|text/base64',
     *    'deliveryTime' => 'any|background|session',
     *    'deliveryActivities' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'timezone' => '',
     *    'notificationType' => 'system|popup',
     *    'notificationIcon' => 'false',
     *    'notificationCloseable' => 'false',
     *    'notificationVibrate' => 'false',
     *    'notificationSound' => 'false',
     *    'notificationBadge' => 'false',
     *    'localization' => '',
     *    'questions' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'id' => ''
     * ];
     * </pre>
     */
    public function create(array $kind, array $parameters, array $customHeaders = [])
    {
        $response = $this->createAsync($kind, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create a push campaign (announcement, poll, data push or native push).
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param array $parameters Parameters supplied to the Update Campaign operation. 
     * <pre>
     * [
     *    'name' => '',
     *    'audience' => [
     *       'expression' => '',
     *       'criteria' => '',
     *       'filters' => ''
     *    ],
     *    'category' => '',
     *    'pushMode' => 'real-time|one-shot|manual',
     *    'type' => 'text/plain|text/html|only_notif|text/base64',
     *    'deliveryTime' => 'any|background|session',
     *    'deliveryActivities' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'timezone' => '',
     *    'notificationType' => 'system|popup',
     *    'notificationIcon' => 'false',
     *    'notificationCloseable' => 'false',
     *    'notificationVibrate' => 'false',
     *    'notificationSound' => 'false',
     *    'notificationBadge' => 'false',
     *    'localization' => '',
     *    'questions' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createAsync(array $kind, array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}';
        $statusCodes = [201];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Get campaign operation retrieves information about a previously created
     * campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'state' => 'draft|scheduled|in-progress|finished|queued',
     *    'activatedDate' => '',
     *    'finishedDate' => ''
     * ];
     * </pre>
     */
    public function get(array $kind, $id, array $customHeaders = [])
    {
        $response = $this->getAsync($kind, $id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Get campaign operation retrieves information about a previously created
     * campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync(array $kind, $id, array $customHeaders = [])
    {
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{kind}' => $kind, '{id}' => $id, '{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update an existing push campaign (announcement, poll, data push or native
     * push).
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $parameters Parameters supplied to the Update Campaign operation. 
     * <pre>
     * [
     *    'name' => '',
     *    'audience' => [
     *       'expression' => '',
     *       'criteria' => '',
     *       'filters' => ''
     *    ],
     *    'category' => '',
     *    'pushMode' => 'real-time|one-shot|manual',
     *    'type' => 'text/plain|text/html|only_notif|text/base64',
     *    'deliveryTime' => 'any|background|session',
     *    'deliveryActivities' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'timezone' => '',
     *    'notificationType' => 'system|popup',
     *    'notificationIcon' => 'false',
     *    'notificationCloseable' => 'false',
     *    'notificationVibrate' => 'false',
     *    'notificationSound' => 'false',
     *    'notificationBadge' => 'false',
     *    'localization' => '',
     *    'questions' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => ''
     * ];
     * </pre>
     */
    public function update(array $kind, $id, array $parameters, array $customHeaders = [])
    {
        $response = $this->updateAsync($kind, $id, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update an existing push campaign (announcement, poll, data push or native
     * push).
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $parameters Parameters supplied to the Update Campaign operation. 
     * <pre>
     * [
     *    'name' => '',
     *    'audience' => [
     *       'expression' => '',
     *       'criteria' => '',
     *       'filters' => ''
     *    ],
     *    'category' => '',
     *    'pushMode' => 'real-time|one-shot|manual',
     *    'type' => 'text/plain|text/html|only_notif|text/base64',
     *    'deliveryTime' => 'any|background|session',
     *    'deliveryActivities' => '',
     *    'startTime' => '',
     *    'endTime' => '',
     *    'timezone' => '',
     *    'notificationType' => 'system|popup',
     *    'notificationIcon' => 'false',
     *    'notificationCloseable' => 'false',
     *    'notificationVibrate' => 'false',
     *    'notificationSound' => 'false',
     *    'notificationBadge' => 'false',
     *    'localization' => '',
     *    'questions' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateAsync(array $kind, $id, array $parameters, array $customHeaders = [])
    {
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{kind}' => $kind, '{id}' => $id, '{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Delete a campaign previously created by a call to Create campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function delete(array $kind, $id, array $customHeaders = [])
    {
        $response = $this->deleteAsync($kind, $id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete a campaign previously created by a call to Create campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAsync(array $kind, $id, array $customHeaders = [])
    {
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{kind}' => $kind, '{id}' => $id, '{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * The Get campaign operation retrieves information about a previously created
     * campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param string $name Campaign name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'state' => 'draft|scheduled|in-progress|finished|queued',
     *    'activatedDate' => '',
     *    'finishedDate' => ''
     * ];
     * </pre>
     */
    public function getByName(array $kind, $name, array $customHeaders = [])
    {
        $response = $this->getByNameAsync($kind, $name, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * The Get campaign operation retrieves information about a previously created
     * campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param string $name Campaign name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getByNameAsync(array $kind, $name, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaignsByName/{kind}/{name}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind, '{name}' => $name]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Test an existing campaign (created with Create campaign) on a set of
     * devices.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $parameters Parameters supplied to the Test Campaign operation. 
     * <pre>
     * [
     *    'deviceId' => 'requiredDeviceId',
     *    'lang' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => ''
     * ];
     * </pre>
     */
    public function testSaved(array $kind, $id, array $parameters, array $customHeaders = [])
    {
        $response = $this->testSavedAsync($kind, $id, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Test an existing campaign (created with Create campaign) on a set of
     * devices.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $parameters Parameters supplied to the Test Campaign operation. 
     * <pre>
     * [
     *    'deviceId' => 'requiredDeviceId',
     *    'lang' => ''
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function testSavedAsync(array $kind, $id, array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/test';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind, '{id}' => $id]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Test a new campaign on a set of devices.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param array $parameters Parameters supplied to the Test Campaign operation. 
     * <pre>
     * [
     *    'data' => [
     *       'name' => '',
     *       'audience' => [
     *          'expression' => '',
     *          'criteria' => '',
     *          'filters' => ''
     *       ],
     *       'category' => '',
     *       'pushMode' => 'real-time|one-shot|manual',
     *       'type' => 'text/plain|text/html|only_notif|text/base64',
     *       'deliveryTime' => 'any|background|session',
     *       'deliveryActivities' => '',
     *       'startTime' => '',
     *       'endTime' => '',
     *       'timezone' => '',
     *       'notificationType' => 'system|popup',
     *       'notificationIcon' => 'false',
     *       'notificationCloseable' => 'false',
     *       'notificationVibrate' => 'false',
     *       'notificationSound' => 'false',
     *       'notificationBadge' => 'false',
     *       'localization' => '',
     *       'questions' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'state' => 'draft|scheduled|in-progress|finished|queued'
     * ];
     * </pre>
     */
    public function testNew(array $kind, array $parameters, array $customHeaders = [])
    {
        $response = $this->testNewAsync($kind, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Test a new campaign on a set of devices.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param array $parameters Parameters supplied to the Test Campaign operation. 
     * <pre>
     * [
     *    'data' => [
     *       'name' => '',
     *       'audience' => [
     *          'expression' => '',
     *          'criteria' => '',
     *          'filters' => ''
     *       ],
     *       'category' => '',
     *       'pushMode' => 'real-time|one-shot|manual',
     *       'type' => 'text/plain|text/html|only_notif|text/base64',
     *       'deliveryTime' => 'any|background|session',
     *       'deliveryActivities' => '',
     *       'startTime' => '',
     *       'endTime' => '',
     *       'timezone' => '',
     *       'notificationType' => 'system|popup',
     *       'notificationIcon' => 'false',
     *       'notificationCloseable' => 'false',
     *       'notificationVibrate' => 'false',
     *       'notificationSound' => 'false',
     *       'notificationBadge' => 'false',
     *       'localization' => '',
     *       'questions' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function testNewAsync(array $kind, array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/test';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Activate a campaign previously created by a call to Create campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => ''
     * ];
     * </pre>
     */
    public function activate(array $kind, $id, array $customHeaders = [])
    {
        $response = $this->activateAsync($kind, $id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Activate a campaign previously created by a call to Create campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function activateAsync(array $kind, $id, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/activate';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind, '{id}' => $id]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Suspend a push campaign previously activated by a call to Activate campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => ''
     * ];
     * </pre>
     */
    public function suspend(array $kind, $id, array $customHeaders = [])
    {
        $response = $this->suspendAsync($kind, $id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Suspend a push campaign previously activated by a call to Activate campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function suspendAsync(array $kind, $id, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/suspend';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind, '{id}' => $id]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Push a previously saved campaign (created with Create campaign) to a set of
     * devices.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $parameters Parameters supplied to the Push Campaign operation. 
     * <pre>
     * [
     *    'deviceIds' => 'requiredDeviceIds',
     *    'data' => [
     *       'name' => '',
     *       'audience' => [
     *          'expression' => '',
     *          'criteria' => '',
     *          'filters' => ''
     *       ],
     *       'category' => '',
     *       'pushMode' => 'real-time|one-shot|manual',
     *       'type' => 'text/plain|text/html|only_notif|text/base64',
     *       'deliveryTime' => 'any|background|session',
     *       'deliveryActivities' => '',
     *       'startTime' => '',
     *       'endTime' => '',
     *       'timezone' => '',
     *       'notificationType' => 'system|popup',
     *       'notificationIcon' => 'false',
     *       'notificationCloseable' => 'false',
     *       'notificationVibrate' => 'false',
     *       'notificationSound' => 'false',
     *       'notificationBadge' => 'false',
     *       'localization' => '',
     *       'questions' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'invalidDeviceIds' => ''
     * ];
     * </pre>
     */
    public function push(array $kind, $id, array $parameters, array $customHeaders = [])
    {
        $response = $this->pushAsync($kind, $id, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Push a previously saved campaign (created with Create campaign) to a set of
     * devices.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $parameters Parameters supplied to the Push Campaign operation. 
     * <pre>
     * [
     *    'deviceIds' => 'requiredDeviceIds',
     *    'data' => [
     *       'name' => '',
     *       'audience' => [
     *          'expression' => '',
     *          'criteria' => '',
     *          'filters' => ''
     *       ],
     *       'category' => '',
     *       'pushMode' => 'real-time|one-shot|manual',
     *       'type' => 'text/plain|text/html|only_notif|text/base64',
     *       'deliveryTime' => 'any|background|session',
     *       'deliveryActivities' => '',
     *       'startTime' => '',
     *       'endTime' => '',
     *       'timezone' => '',
     *       'notificationType' => 'system|popup',
     *       'notificationIcon' => 'false',
     *       'notificationCloseable' => 'false',
     *       'notificationVibrate' => 'false',
     *       'notificationSound' => 'false',
     *       'notificationBadge' => 'false',
     *       'localization' => '',
     *       'questions' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function pushAsync(array $kind, $id, array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/push';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind, '{id}' => $id]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get all the campaign statistics.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'queued' => '',
     *    'pushed' => '',
     *    'pushed-native' => '',
     *    'pushed-native-google' => '',
     *    'pushed-native-adm' => '',
     *    'delivered' => '',
     *    'dropped' => '',
     *    'system-notification-displayed' => '',
     *    'in-app-notification-displayed' => '',
     *    'content-displayed' => '',
     *    'system-notification-actioned' => '',
     *    'system-notification-exited' => '',
     *    'in-app-notification-actioned' => '',
     *    'in-app-notification-exited' => '',
     *    'content-actioned' => '',
     *    'content-exited' => '',
     *    'answers' => ''
     * ];
     * </pre>
     */
    public function getStatistics(array $kind, $id, array $customHeaders = [])
    {
        $response = $this->getStatisticsAsync($kind, $id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get all the campaign statistics.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getStatisticsAsync(array $kind, $id, array $customHeaders = [])
    {
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/statistics';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{kind}' => $kind, '{id}' => $id, '{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Finish a push campaign previously activated by a call to Activate campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => ''
     * ];
     * </pre>
     */
    public function finish(array $kind, $id, array $customHeaders = [])
    {
        $response = $this->finishAsync($kind, $id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Finish a push campaign previously activated by a call to Activate campaign.
     *
     * @param CampaignKinds $kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     * @param int $id Campaign identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function finishAsync(array $kind, $id, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($kind == null) {
            Validate::notNullOrEmpty($kind, '$kind');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/finish';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{kind}' => $kind, '{id}' => $id]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the list of campaigns.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the list of campaigns.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
