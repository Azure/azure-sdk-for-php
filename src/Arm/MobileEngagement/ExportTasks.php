<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2014-12-01
 */

namespace MicrosoftAzure\Arm\MobileEngagement;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * ExportTasks for Microsoft Azure Mobile Engagement REST APIs.
 */
class ExportTasks
{
    /**
     * The service client object for the operations.
     *
     * @var EngagementManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for ExportTasks.
     *
     * @param EngagementManagementClient, Service client for ExportTasks
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Get the list of export tasks.
     *
     * @param int $skip Control paging of export tasks, start results at the given
     * offset, defaults to 0 (1st page of data).
     * @param int $top Control paging of export tasks, number of export tasks to
     * return with each call. By default, it returns all export tasks with a
     * default paging of 20.
     * The response contains a `nextLink` property describing the path to get the
     * next page if there are more results.
     * The maximum paging limit for $top is 40.
     * @param string $orderby Sort results by an expression which looks like
     * `$orderby=taskId asc` (default when not specified).
     * The syntax is orderby={property} {direction} or just orderby={property}.
     * Properties that can be specified for sorting: taskId, errorDetails,
     * dateCreated, taskStatus, and dateCreated.
     * The available directions are asc (for ascending order) and desc (for
     * descending order).
     * When not specified the asc direction is used.
     * Only one orderby property can be specified.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => 'requiredValue',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($skip = 0, $top = 20, $orderby = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($skip, $top, $orderby, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the list of export tasks.
     *
     * @param int $skip Control paging of export tasks, start results at the given
     * offset, defaults to 0 (1st page of data).
     * @param int $top Control paging of export tasks, number of export tasks to
     * return with each call. By default, it returns all export tasks with a
     * default paging of 20.
     * The response contains a `nextLink` property describing the path to get the
     * next page if there are more results.
     * The maximum paging limit for $top is 40.
     * @param string $orderby Sort results by an expression which looks like
     * `$orderby=taskId asc` (default when not specified).
     * The syntax is orderby={property} {direction} or just orderby={property}.
     * Properties that can be specified for sorting: taskId, errorDetails,
     * dateCreated, taskStatus, and dateCreated.
     * The available directions are asc (for ascending order) and desc (for
     * descending order).
     * When not specified the asc direction is used.
     * Only one orderby property can be specified.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($skip = 0, $top = 20, $orderby = null, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion(), '$skip' => $skip, '$top' => $top, '$orderby' => $orderby];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieves information about a previously created export task.
     *
     * @param string $id Export task identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function get($id, array $customHeaders = [])
    {
        $response = $this->getAsync($id, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieves information about a previously created export task.
     *
     * @param string $id Export task identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($id, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($id == null) {
            Validate::notNullOrEmpty($id, '$id');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/{id}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{id}' => $id]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export activities.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createActivitiesTask(array $parameters, array $customHeaders = [])
    {
        $response = $this->createActivitiesTaskAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export activities.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createActivitiesTaskAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/activities';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export crashes.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createCrashesTask(array $parameters, array $customHeaders = [])
    {
        $response = $this->createCrashesTaskAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export crashes.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createCrashesTaskAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/crashes';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export errors.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createErrorsTask(array $parameters, array $customHeaders = [])
    {
        $response = $this->createErrorsTaskAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export errors.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createErrorsTaskAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/errors';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export events.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createEventsTask(array $parameters, array $customHeaders = [])
    {
        $response = $this->createEventsTaskAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export events.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createEventsTaskAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/events';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export jobs.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createJobsTask(array $parameters, array $customHeaders = [])
    {
        $response = $this->createJobsTaskAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export jobs.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createJobsTaskAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/jobs';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export sessions.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createSessionsTask(array $parameters, array $customHeaders = [])
    {
        $response = $this->createSessionsTaskAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export sessions.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'startDate' => '',
     *    'endDate' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createSessionsTaskAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/sessions';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export tags.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createTagsTask(array $parameters, array $customHeaders = [])
    {
        $response = $this->createTagsTaskAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export tags.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createTagsTaskAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/tags';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export tags.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createTokensTask(array $parameters, array $customHeaders = [])
    {
        $response = $this->createTokensTaskAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export tags.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createTokensTaskAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/tokens';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export push campaign data for a date range.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'campaignType' => 'Announcement|DataPush|NativePush|Poll',
     *    'campaignWindowStart' => '',
     *    'campaignWindowEnd' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createFeedbackTaskByDateRange(array $parameters, array $customHeaders = [])
    {
        $response = $this->createFeedbackTaskByDateRangeAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export push campaign data for a date range.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'campaignType' => 'Announcement|DataPush|NativePush|Poll',
     *    'campaignWindowStart' => '',
     *    'campaignWindowEnd' => '',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createFeedbackTaskByDateRangeAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/feedbackByDate';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates a task to export push campaign data for a set of campaigns.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'campaignType' => 'Announcement|DataPush|NativePush|Poll',
     *    'campaignIds' => 'requiredCampaignIds',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Accepted(202), 
     * <pre>
     * [
     *    'id' => 'requiredId',
     *    'description' => '',
     *    'state' => 'Queued|Started|Succeeded|Failed',
     *    'dateCreated' => '',
     *    'dateCompleted' => '',
     *    'exportType' => 'Activity|Tag|Crash|Error|Event|Job|Session|Token|Push',
     *    'errorDetails' => ''
     * ];
     * </pre>
     */
    public function createFeedbackTaskByCampaign(array $parameters, array $customHeaders = [])
    {
        $response = $this->createFeedbackTaskByCampaignAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates a task to export push campaign data for a set of campaigns.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'containerUrl' => 'requiredContainerUrl',
     *    'description' => '',
     *    'campaignType' => 'Announcement|DataPush|NativePush|Poll',
     *    'campaignIds' => 'requiredCampaignIds',
     *    'exportFormat' => 'JsonBlob|CsvBlob'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createFeedbackTaskByCampaignAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/exportTasks/feedbackByCampaign';
        $statusCodes = [202];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the list of export tasks.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => 'requiredValue',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the list of export tasks.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
