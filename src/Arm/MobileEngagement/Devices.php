<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2014-12-01
 */

namespace MicrosoftAzure\Arm\MobileEngagement;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Devices for Microsoft Azure Mobile Engagement REST APIs.
 */
class Devices
{
    /**
     * The service client object for the operations.
     *
     * @var EngagementManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Devices.
     *
     * @param EngagementManagementClient, Service client for Devices
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Query the information associated to the devices running an application.
     *
     * @param int $top Number of devices to return with each call. Defaults to 100
     * and cannot return more. Passing a greater value is ignored. The response
     * contains a `nextLink` property describing the URI path to get the next
     * page of results if not all results could be returned at once.
     * @param string $select By default all `meta` and `appInfo` properties are
     * returned, this property is used to restrict the output to the desired
     * properties. It also excludes all devices from the output that have none of
     * the selected properties. In other terms, only devices having at least one
     * of the selected property being set is part of the results. Examples: -
     * `$select=appInfo` : select all devices having at least 1 appInfo, return
     * them all and don’t return any meta property. - `$select=meta` : return
     * only meta properties in the output. -
     * `$select=appInfo,meta/firstSeen,meta/lastSeen` : return all `appInfo`,
     * plus meta object containing only firstSeen and lastSeen properties. The
     * format is thus a comma separated list of properties to select. Use
     * `appInfo` to select all appInfo properties, `meta` to select all meta
     * properties. Use `appInfo/{key}` and `meta/{key}` to select specific
     * appInfo and meta properties.
     * @param string $filter Filter can be used to reduce the number of results.
     * Filter is a boolean expression that can look like the following examples:
     * * `$filter=deviceId gt 'abcdef0123456789abcdef0123456789'` *
     * `$filter=lastModified le 1447284263690L` * `$filter=(deviceId ge
     * 'abcdef0123456789abcdef0123456789') and (deviceId lt
     * 'bacdef0123456789abcdef0123456789') and (lastModified gt 1447284263690L)`
     * The first example is used automatically for paging when returning the
     * `nextLink` property. The filter expression is a combination of checks on
     * some properties that can be compared to their value. The available
     * operators are: * `gt`  : greater than * `ge`  : greater than or equals *
     * `lt`  : less than * `le`  : less than or equals * `and` : to add multiple
     * checks (all checks must pass), optional parentheses can be used. The
     * properties that can be used in the expression are the following: *
     * `deviceId {operator} '{deviceIdValue}'` : a lexicographical comparison is
     * made on the deviceId value, use single quotes for the value. *
     * `lastModified {operator} {number}L` : returns only meta properties or
     * appInfo properties whose last value modification timestamp compared to the
     * specified value is matching (value is milliseconds since January 1st, 1970
     * UTC). Please note the `L` character after the number of milliseconds, its
     * required when the number of milliseconds exceeds `2^31 - 1` (which is
     * always the case for recent timestamps). Using `lastModified` excludes all
     * devices from the output that have no property matching the timestamp
     * criteria, like `$select`. Please note that the internal value of
     * `lastModified` timestamp for a given property is never part of the results.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($top = null, $select = null, $filter = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($top, $select, $filter, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Query the information associated to the devices running an application.
     *
     * @param int $top Number of devices to return with each call. Defaults to 100
     * and cannot return more. Passing a greater value is ignored. The response
     * contains a `nextLink` property describing the URI path to get the next
     * page of results if not all results could be returned at once.
     * @param string $select By default all `meta` and `appInfo` properties are
     * returned, this property is used to restrict the output to the desired
     * properties. It also excludes all devices from the output that have none of
     * the selected properties. In other terms, only devices having at least one
     * of the selected property being set is part of the results. Examples: -
     * `$select=appInfo` : select all devices having at least 1 appInfo, return
     * them all and don’t return any meta property. - `$select=meta` : return
     * only meta properties in the output. -
     * `$select=appInfo,meta/firstSeen,meta/lastSeen` : return all `appInfo`,
     * plus meta object containing only firstSeen and lastSeen properties. The
     * format is thus a comma separated list of properties to select. Use
     * `appInfo` to select all appInfo properties, `meta` to select all meta
     * properties. Use `appInfo/{key}` and `meta/{key}` to select specific
     * appInfo and meta properties.
     * @param string $filter Filter can be used to reduce the number of results.
     * Filter is a boolean expression that can look like the following examples:
     * * `$filter=deviceId gt 'abcdef0123456789abcdef0123456789'` *
     * `$filter=lastModified le 1447284263690L` * `$filter=(deviceId ge
     * 'abcdef0123456789abcdef0123456789') and (deviceId lt
     * 'bacdef0123456789abcdef0123456789') and (lastModified gt 1447284263690L)`
     * The first example is used automatically for paging when returning the
     * `nextLink` property. The filter expression is a combination of checks on
     * some properties that can be compared to their value. The available
     * operators are: * `gt`  : greater than * `ge`  : greater than or equals *
     * `lt`  : less than * `le`  : less than or equals * `and` : to add multiple
     * checks (all checks must pass), optional parentheses can be used. The
     * properties that can be used in the expression are the following: *
     * `deviceId {operator} '{deviceIdValue}'` : a lexicographical comparison is
     * made on the deviceId value, use single quotes for the value. *
     * `lastModified {operator} {number}L` : returns only meta properties or
     * appInfo properties whose last value modification timestamp compared to the
     * specified value is matching (value is milliseconds since January 1st, 1970
     * UTC). Please note the `L` character after the number of milliseconds, its
     * required when the number of milliseconds exceeds `2^31 - 1` (which is
     * always the case for recent timestamps). Using `lastModified` excludes all
     * devices from the output that have no property matching the timestamp
     * criteria, like `$select`. Please note that the internal value of
     * `lastModified` timestamp for a given property is never part of the results.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($top = null, $select = null, $filter = null, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion(), '$top' => $top, '$select' => $select, '$filter' => $filter];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the information associated to a device running an application.
     *
     * @param string $deviceId Device identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'deviceId' => 'requiredDeviceId',
     *    'meta' => [
     *       'firstSeen' => '',
     *       'lastSeen' => '',
     *       'lastInfo' => '',
     *       'lastLocation' => '',
     *       'nativePushEnabled' => 'false'
     *    ],
     *    'info' => [
     *       'phoneModel' => '',
     *       'phoneManufacturer' => '',
     *       'firmwareVersion' => '',
     *       'firmwareName' => '',
     *       'androidAPILevel' => '',
     *       'carrierCountry' => '',
     *       'locale' => '',
     *       'carrierName' => '',
     *       'networkType' => '',
     *       'networkSubtype' => '',
     *       'applicationVersionName' => '',
     *       'applicationVersionCode' => '',
     *       'timeZoneOffset' => '',
     *       'serviceVersion' => ''
     *    ],
     *    'location' => [
     *       'countrycode' => '',
     *       'region' => '',
     *       'locality' => ''
     *    ],
     *    'appInfo' => ''
     * ];
     * </pre>
     */
    public function getByDeviceId($deviceId, array $customHeaders = [])
    {
        $response = $this->getByDeviceIdAsync($deviceId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the information associated to a device running an application.
     *
     * @param string $deviceId Device identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getByDeviceIdAsync($deviceId, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($deviceId == null) {
            Validate::notNullOrEmpty($deviceId, '$deviceId');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/{deviceId}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{deviceId}' => $deviceId]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the information associated to a device running an application using the
     * user identifier.
     *
     * @param string $userId User identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'deviceId' => 'requiredDeviceId',
     *    'meta' => [
     *       'firstSeen' => '',
     *       'lastSeen' => '',
     *       'lastInfo' => '',
     *       'lastLocation' => '',
     *       'nativePushEnabled' => 'false'
     *    ],
     *    'info' => [
     *       'phoneModel' => '',
     *       'phoneManufacturer' => '',
     *       'firmwareVersion' => '',
     *       'firmwareName' => '',
     *       'androidAPILevel' => '',
     *       'carrierCountry' => '',
     *       'locale' => '',
     *       'carrierName' => '',
     *       'networkType' => '',
     *       'networkSubtype' => '',
     *       'applicationVersionName' => '',
     *       'applicationVersionCode' => '',
     *       'timeZoneOffset' => '',
     *       'serviceVersion' => ''
     *    ],
     *    'location' => [
     *       'countrycode' => '',
     *       'region' => '',
     *       'locality' => ''
     *    ],
     *    'appInfo' => ''
     * ];
     * </pre>
     */
    public function getByUserId($userId, array $customHeaders = [])
    {
        $response = $this->getByUserIdAsync($userId, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the information associated to a device running an application using the
     * user identifier.
     *
     * @param string $userId User identifier.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getByUserIdAsync($userId, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($userId == null) {
            Validate::notNullOrEmpty($userId, '$userId');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/users/{userId}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName(), '{userId}' => $userId]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the tags registered for a set of devices running an application.
     * Updates are performed asynchronously, meaning that a few seconds are
     * needed before the modifications appear in the results of the Get device
     * command.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'tags' => '',
     *    'deleteOnNull' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'invalidIds' => 'requiredInvalidIds'
     * ];
     * </pre>
     */
    public function tagByDeviceId(array $parameters, array $customHeaders = [])
    {
        $response = $this->tagByDeviceIdAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the tags registered for a set of devices running an application.
     * Updates are performed asynchronously, meaning that a few seconds are
     * needed before the modifications appear in the results of the Get device
     * command.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'tags' => '',
     *    'deleteOnNull' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function tagByDeviceIdAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/tag';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Update the tags registered for a set of users running an application.
     * Updates are performed asynchronously, meaning that a few seconds are
     * needed before the modifications appear in the results of the Get device
     * command.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'tags' => '',
     *    'deleteOnNull' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'invalidIds' => 'requiredInvalidIds'
     * ];
     * </pre>
     */
    public function tagByUserId(array $parameters, array $customHeaders = [])
    {
        $response = $this->tagByUserIdAsync($parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Update the tags registered for a set of users running an application.
     * Updates are performed asynchronously, meaning that a few seconds are
     * needed before the modifications appear in the results of the Get device
     * command.
     *
     * @param array $parameters  
     * <pre>
     * [
     *    'tags' => '',
     *    'deleteOnNull' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function tagByUserIdAsync(array $parameters, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getResourceGroupName() == null) {
            Validate::notNullOrEmpty($this->_client->getResourceGroupName(), '$this->_client->getResourceGroupName()');
        }
        if ($this->_client->getAppCollection() == null) {
            Validate::notNullOrEmpty($this->_client->getAppCollection(), '$this->_client->getAppCollection()');
        }
        if ($this->_client->getAppName() == null) {
            Validate::notNullOrEmpty($this->_client->getAppName(), '$this->_client->getAppName()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/users/tag';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $this->_client->getResourceGroupName(), '{appCollection}' => $this->_client->getAppCollection(), '{appName}' => $this->_client->getAppName()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Query the information associated to the devices running an application.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Query the information associated to the devices running an application.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
