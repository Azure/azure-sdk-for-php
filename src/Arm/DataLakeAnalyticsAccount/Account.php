<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2015-10-01-preview
 */

namespace MicrosoftAzure\Arm\DataLakeAnalyticsAccount;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Account for Creates an Azure Data Lake Analytics account management client.
 */
class Account
{
    /**
     * The service client object for the operations.
     *
     * @var DataLakeAnalyticsAccountManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Account.
     *
     * @param DataLakeAnalyticsAccountManagementClient, Service client for Account
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Gets the specified Azure Storage account linked to the given Data Lake
     * Analytics account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which to retrieve Azure storage account details.
     * @param string $storageAccountName The name of the Azure Storage account for
     * which to retrieve the details.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'accessKey' => 'requiredAccessKey',
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getStorageAccount($resourceGroupName, $accountName, $storageAccountName, array $customHeaders = [])
    {
        $response = $this->getStorageAccountAsync($resourceGroupName, $accountName, $storageAccountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the specified Azure Storage account linked to the given Data Lake
     * Analytics account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which to retrieve Azure storage account details.
     * @param string $storageAccountName The name of the Azure Storage account for
     * which to retrieve the details.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getStorageAccountAsync($resourceGroupName, $accountName, $storageAccountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($storageAccountName == null) {
            Validate::notNullOrEmpty($storageAccountName, '$storageAccountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/StorageAccounts/{storageAccountName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{storageAccountName}' => $storageAccountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the specified Data Lake Analytics account to remove an Azure
     * Storage account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which to remove the Azure Storage account.
     * @param string $storageAccountName The name of the Azure Storage account to
     * remove
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function deleteStorageAccount($resourceGroupName, $accountName, $storageAccountName, array $customHeaders = [])
    {
        $response = $this->deleteStorageAccountAsync($resourceGroupName, $accountName, $storageAccountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the specified Data Lake Analytics account to remove an Azure
     * Storage account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which to remove the Azure Storage account.
     * @param string $storageAccountName The name of the Azure Storage account to
     * remove
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteStorageAccountAsync($resourceGroupName, $accountName, $storageAccountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($storageAccountName == null) {
            Validate::notNullOrEmpty($storageAccountName, '$storageAccountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/StorageAccounts/{storageAccountName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{storageAccountName}' => $storageAccountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Data Lake Analytics account to replace Azure Storage blob
     * account details, such as the access key and/or suffix.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * modify storage accounts in
     * @param string $storageAccountName The Azure Storage account to modify
     * @param array $parameters The parameters containing the access key and suffix to update the
     *  storage account with. 
     * <pre>
     * [
     *    'properties' => [
     *       'accessKey' => 'requiredAccessKey',
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function updateStorageAccount($resourceGroupName, $accountName, $storageAccountName, array $parameters, array $customHeaders = [])
    {
        $response = $this->updateStorageAccountAsync($resourceGroupName, $accountName, $storageAccountName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Data Lake Analytics account to replace Azure Storage blob
     * account details, such as the access key and/or suffix.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * modify storage accounts in
     * @param string $storageAccountName The Azure Storage account to modify
     * @param array $parameters The parameters containing the access key and suffix to update the
     *  storage account with. 
     * <pre>
     * [
     *    'properties' => [
     *       'accessKey' => 'requiredAccessKey',
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function updateStorageAccountAsync($resourceGroupName, $accountName, $storageAccountName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($storageAccountName == null) {
            Validate::notNullOrEmpty($storageAccountName, '$storageAccountName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/StorageAccounts/{storageAccountName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{storageAccountName}' => $storageAccountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the specified Data Lake Analytics account to add an Azure Storage
     * account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * which to add the Azure Storage account.
     * @param string $storageAccountName The name of the Azure Storage account to
     * add
     * @param array $parameters The parameters containing the access key and optional suffix for the
     *  Azure Storage Account. 
     * <pre>
     * [
     *    'properties' => [
     *       'accessKey' => 'requiredAccessKey',
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function addStorageAccount($resourceGroupName, $accountName, $storageAccountName, array $parameters, array $customHeaders = [])
    {
        $response = $this->addStorageAccountAsync($resourceGroupName, $accountName, $storageAccountName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the specified Data Lake Analytics account to add an Azure Storage
     * account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * which to add the Azure Storage account.
     * @param string $storageAccountName The name of the Azure Storage account to
     * add
     * @param array $parameters The parameters containing the access key and optional suffix for the
     *  Azure Storage Account. 
     * <pre>
     * [
     *    'properties' => [
     *       'accessKey' => 'requiredAccessKey',
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function addStorageAccountAsync($resourceGroupName, $accountName, $storageAccountName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($storageAccountName == null) {
            Validate::notNullOrEmpty($storageAccountName, '$storageAccountName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/StorageAccounts/{storageAccountName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{storageAccountName}' => $storageAccountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the specified Azure Storage container associated with the given Data
     * Lake Analytics and Azure Storage accounts.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account for
     * which to retrieve blob container.
     * @param string $storageAccountName The name of the Azure storage account
     * from which to retrieve the blob container.
     * @param string $containerName The name of the Azure storage container to
     * retrieve
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'name' => '',
     *    'id' => '',
     *    'type' => '',
     *    'properties' => [
     *       'lastModifiedTime' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getStorageContainer($resourceGroupName, $accountName, $storageAccountName, $containerName, array $customHeaders = [])
    {
        $response = $this->getStorageContainerAsync($resourceGroupName, $accountName, $storageAccountName, $containerName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the specified Azure Storage container associated with the given Data
     * Lake Analytics and Azure Storage accounts.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account for
     * which to retrieve blob container.
     * @param string $storageAccountName The name of the Azure storage account
     * from which to retrieve the blob container.
     * @param string $containerName The name of the Azure storage container to
     * retrieve
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getStorageContainerAsync($resourceGroupName, $accountName, $storageAccountName, $containerName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($storageAccountName == null) {
            Validate::notNullOrEmpty($storageAccountName, '$storageAccountName');
        }
        if ($containerName == null) {
            Validate::notNullOrEmpty($containerName, '$containerName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/StorageAccounts/{storageAccountName}/Containers/{containerName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{storageAccountName}' => $storageAccountName, '{containerName}' => $containerName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the Azure Storage containers, if any, associated with the specified
     * Data Lake Analytics and Azure Storage account combination. The response
     * includes a link to the next page of results, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account for
     * which to list Azure Storage blob containers.
     * @param string $storageAccountName The name of the Azure storage account
     * from which to list blob containers.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listStorageContainers($resourceGroupName, $accountName, $storageAccountName, array $customHeaders = [])
    {
        $response = $this->listStorageContainersAsync($resourceGroupName, $accountName, $storageAccountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the Azure Storage containers, if any, associated with the specified
     * Data Lake Analytics and Azure Storage account combination. The response
     * includes a link to the next page of results, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account for
     * which to list Azure Storage blob containers.
     * @param string $storageAccountName The name of the Azure storage account
     * from which to list blob containers.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listStorageContainersAsync($resourceGroupName, $accountName, $storageAccountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($storageAccountName == null) {
            Validate::notNullOrEmpty($storageAccountName, '$storageAccountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/StorageAccounts/{storageAccountName}/Containers';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{storageAccountName}' => $storageAccountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the SAS token associated with the specified Data Lake Analytics and
     * Azure Storage account and container combination.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which an Azure Storage account's SAS token is being requested.
     * @param string $storageAccountName The name of the Azure storage account for
     * which the SAS token is being requested.
     * @param string $containerName The name of the Azure storage container for
     * which the SAS token is being requested.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listSasTokens($resourceGroupName, $accountName, $storageAccountName, $containerName, array $customHeaders = [])
    {
        $response = $this->listSasTokensAsync($resourceGroupName, $accountName, $storageAccountName, $containerName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the SAS token associated with the specified Data Lake Analytics and
     * Azure Storage account and container combination.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which an Azure Storage account's SAS token is being requested.
     * @param string $storageAccountName The name of the Azure storage account for
     * which the SAS token is being requested.
     * @param string $containerName The name of the Azure storage container for
     * which the SAS token is being requested.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSasTokensAsync($resourceGroupName, $accountName, $storageAccountName, $containerName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($storageAccountName == null) {
            Validate::notNullOrEmpty($storageAccountName, '$storageAccountName');
        }
        if ($containerName == null) {
            Validate::notNullOrEmpty($containerName, '$containerName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/StorageAccounts/{storageAccountName}/Containers/{containerName}/listSasTokens';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{storageAccountName}' => $storageAccountName, '{containerName}' => $containerName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the specified Data Lake Store account details in the specified Data
     * Lake Analytics account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which to retrieve the Data Lake Store account details.
     * @param string $dataLakeStoreAccountName The name of the Data Lake Store
     * account to retrieve
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getDataLakeStoreAccount($resourceGroupName, $accountName, $dataLakeStoreAccountName, array $customHeaders = [])
    {
        $response = $this->getDataLakeStoreAccountAsync($resourceGroupName, $accountName, $dataLakeStoreAccountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the specified Data Lake Store account details in the specified Data
     * Lake Analytics account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which to retrieve the Data Lake Store account details.
     * @param string $dataLakeStoreAccountName The name of the Data Lake Store
     * account to retrieve
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getDataLakeStoreAccountAsync($resourceGroupName, $accountName, $dataLakeStoreAccountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($dataLakeStoreAccountName == null) {
            Validate::notNullOrEmpty($dataLakeStoreAccountName, '$dataLakeStoreAccountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/DataLakeStoreAccounts/{dataLakeStoreAccountName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{dataLakeStoreAccountName}' => $dataLakeStoreAccountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Data Lake Analytics account specified to remove the specified
     * Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which to remove the Data Lake Store account.
     * @param string $dataLakeStoreAccountName The name of the Data Lake Store
     * account to remove
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function deleteDataLakeStoreAccount($resourceGroupName, $accountName, $dataLakeStoreAccountName, array $customHeaders = [])
    {
        $response = $this->deleteDataLakeStoreAccountAsync($resourceGroupName, $accountName, $dataLakeStoreAccountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Data Lake Analytics account specified to remove the specified
     * Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account from
     * which to remove the Data Lake Store account.
     * @param string $dataLakeStoreAccountName The name of the Data Lake Store
     * account to remove
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteDataLakeStoreAccountAsync($resourceGroupName, $accountName, $dataLakeStoreAccountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($dataLakeStoreAccountName == null) {
            Validate::notNullOrEmpty($dataLakeStoreAccountName, '$dataLakeStoreAccountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/DataLakeStoreAccounts/{dataLakeStoreAccountName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{dataLakeStoreAccountName}' => $dataLakeStoreAccountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the specified Data Lake Analytics account to include the additional
     * Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * which to add the Data Lake Store account.
     * @param string $dataLakeStoreAccountName The name of the Data Lake Store
     * account to add.
     * @param array $parameters The details of the Data Lake Store account. 
     * <pre>
     * [
     *    'properties' => [
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function addDataLakeStoreAccount($resourceGroupName, $accountName, $dataLakeStoreAccountName, array $parameters, array $customHeaders = [])
    {
        $response = $this->addDataLakeStoreAccountAsync($resourceGroupName, $accountName, $dataLakeStoreAccountName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the specified Data Lake Analytics account to include the additional
     * Data Lake Store account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * which to add the Data Lake Store account.
     * @param string $dataLakeStoreAccountName The name of the Data Lake Store
     * account to add.
     * @param array $parameters The details of the Data Lake Store account. 
     * <pre>
     * [
     *    'properties' => [
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function addDataLakeStoreAccountAsync($resourceGroupName, $accountName, $dataLakeStoreAccountName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($dataLakeStoreAccountName == null) {
            Validate::notNullOrEmpty($dataLakeStoreAccountName, '$dataLakeStoreAccountName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/DataLakeStoreAccounts/{dataLakeStoreAccountName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{dataLakeStoreAccountName}' => $dataLakeStoreAccountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the first page of Azure Storage accounts, if any, linked to the
     * specified Data Lake Analytics account. The response includes a link to the
     * next page, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account for
     * which to list Azure Storage accounts.
     * @param array $filter The OData filter. Optional. 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'accessKey' => 'requiredAccessKey',
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'count' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listStorageAccounts($resourceGroupName, $accountName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        $response = $this->listStorageAccountsAsync($resourceGroupName, $accountName, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the first page of Azure Storage accounts, if any, linked to the
     * specified Data Lake Analytics account. The response includes a link to the
     * next page, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account for
     * which to list Azure Storage accounts.
     * @param array $filter The OData filter. Optional. 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'accessKey' => 'requiredAccessKey',
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listStorageAccountsAsync($resourceGroupName, $accountName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/StorageAccounts/';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, '$search' => $search, '$format' => $format, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the first page of Data Lake Store accounts linked to the specified
     * Data Lake Analytics account. The response includes a link to the next
     * page, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account for
     * which to list Data Lake Store accounts.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'count' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listDataLakeStoreAccounts($resourceGroupName, $accountName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        $response = $this->listDataLakeStoreAccountsAsync($resourceGroupName, $accountName, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the first page of Data Lake Store accounts linked to the specified
     * Data Lake Analytics account. The response includes a link to the next
     * page, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account for
     * which to list Data Lake Store accounts.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'suffix' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listDataLakeStoreAccountsAsync($resourceGroupName, $accountName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/DataLakeStoreAccounts/';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, '$search' => $search, '$format' => $format, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the first page of Data Lake Analytics accounts, if any, within a
     * specific resource group. This includes a link to the next page, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The return format. Return the response in particular
     * formatxii without access to request headers for standard content-type
     * negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listByResourceGroup($resourceGroupName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        $response = $this->listByResourceGroupAsync($resourceGroupName, $filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the first page of Data Lake Analytics accounts, if any, within a
     * specific resource group. This includes a link to the next page, if any.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The return format. Return the response in particular
     * formatxii without access to request headers for standard content-type
     * negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByResourceGroupAsync($resourceGroupName, array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, '$search' => $search, '$format' => $format, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the first page of Data Lake Analytics accounts, if any, within the
     * current subscription. This includes a link to the next page, if any.
     *
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation(array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($filter, $top, $skip, $expand, $select, $orderby, $count, $search, $format, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the first page of Data Lake Analytics accounts, if any, within the
     * current subscription. This includes a link to the next page, if any.
     *
     * @param array $filter OData filter. Optional. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param int $top The number of items to return. Optional.
     * @param int $skip The number of items to skip over before returning
     * elements. Optional.
     * @param string $expand OData expansion. Expand related resources in line
     * with the retrieved resources, e.g. Categories/$expand=Products would
     * expand Product data in line with each Category entry. Optional.
     * @param string $select OData Select statement. Limits the properties on each
     * entry to just those requested, e.g.
     * Categories?$select=CategoryName,Description. Optional.
     * @param string $orderby OrderBy clause. One or more comma-separated
     * expressions with an optional "asc" (the default) or "desc" depending on
     * the order you'd like the values sorted, e.g.
     * Categories?$orderby=CategoryName desc. Optional.
     * @param bool $count The Boolean value of true or false to request a count of
     * the matching resources included with the resources in the response, e.g.
     * Categories?$count=true. Optional.
     * @param string $search A free form search. A free-text search expression to
     * match for whether a particular entry should be included in the feed, e.g.
     * Categories?$search=blue OR green. Optional.
     * @param string $format The desired return format. Return the response in
     * particular formatxii without access to request headers for standard
     * content-type negotiation (e.g Orders?$format=json). Optional.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync(array $filter, $top = null, $skip = null, $expand = null, $select = null, $orderby = null, $count = null, $search = null, $format = null, array $customHeaders = [])
    {
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/accounts';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, '$top' => $top, '$skip' => $skip, '$expand' => $expand, '$select' => $select, '$orderby' => $orderby, '$count' => $count, '$search' => $search, '$format' => $format, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets details of the specified Data Lake Analytics account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * retrieve.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets details of the specified Data Lake Analytics account.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * retrieve.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Begins the delete delete process for the Data Lake Analytics account object
     * specified by the account name.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * delete
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function delete($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->begindeleteAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Begins the delete delete process for the Data Lake Analytics account object
     * specified by the account name.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * delete
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NotFound(404).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function beginDelete($resourceGroupName, $accountName, array $customHeaders = [])
    {
        $response = $this->beginDeleteAsync($resourceGroupName, $accountName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Begins the delete delete process for the Data Lake Analytics account object
     * specified by the account name.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $accountName The name of the Data Lake Analytics account to
     * delete
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteAsync($resourceGroupName, $accountName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($accountName == null) {
            Validate::notNullOrEmpty($accountName, '$accountName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}';
        $statusCodes = [200, 202, 404, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{accountName}' => $accountName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates the specified Data Lake Analytics account. This supplies the user
     * with computation services for Data Lake Analytics workloads
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.the account will be associated
     * with.
     * @param string $name The name of the Data Lake Analytics account to create.
     * @param array $parameters Parameters supplied to the create Data Lake Analytics account
     *  operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     */
    public function create($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincreateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates the specified Data Lake Analytics account. This supplies the user
     * with computation services for Data Lake Analytics workloads
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.the account will be associated
     * with.
     * @param string $name The name of the Data Lake Analytics account to create.
     * @param array $parameters Parameters supplied to the create Data Lake Analytics account
     *  operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginCreate($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCreateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates the specified Data Lake Analytics account. This supplies the user
     * with computation services for Data Lake Analytics workloads
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.the account will be associated
     * with.
     * @param string $name The name of the Data Lake Analytics account to create.
     * @param array $parameters Parameters supplied to the create Data Lake Analytics account
     *  operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateAsync($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{name}';
        $statusCodes = [201, 200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Updates the Data Lake Analytics account object specified by the accountName
     * with the contents of the account object.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $name The name of the Data Lake Analytics account to update.
     * @param array $parameters Parameters supplied to the update Data Lake Analytics account
     *  operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     */
    public function update($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginupdateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Data Lake Analytics account object specified by the accountName
     * with the contents of the account object.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $name The name of the Data Lake Analytics account to update.
     * @param array $parameters Parameters supplied to the update Data Lake Analytics account
     *  operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginUpdate($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginUpdateAsync($resourceGroupName, $name, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Updates the Data Lake Analytics account object specified by the accountName
     * with the contents of the account object.
     *
     * @param string $resourceGroupName The name of the Azure resource group that
     * contains the Data Lake Analytics account.
     * @param string $name The name of the Data Lake Analytics account to update.
     * @param array $parameters Parameters supplied to the update Data Lake Analytics account
     *  operation. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'id' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'provisioningState' =>
     *  'Failed|Creating|Running|Succeeded|Patching|Suspending|Resuming|Deleting|Deleted',
     *       'state' => 'active|suspended',
     *       'defaultDataLakeStoreAccount' => '',
     *       'maxDegreeOfParallelism' => '',
     *       'maxJobCount' => '',
     *       'dataLakeStoreAccounts' => '',
     *       'storageAccounts' => '',
     *       'creationTime' => '',
     *       'lastModifiedTime' => '',
     *       'endpoint' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginUpdateAsync($resourceGroupName, $name, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($name == null) {
            Validate::notNullOrEmpty($name, '$name');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{name}';
        $statusCodes = [200, 201];
        $method = 'PATCH';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{name}' => $name, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the Azure Storage containers, if any, associated with the specified
     * Data Lake Analytics and Azure Storage account combination. The response
     * includes a link to the next page of results, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listStorageContainersNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listStorageContainersNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the Azure Storage containers, if any, associated with the specified
     * Data Lake Analytics and Azure Storage account combination. The response
     * includes a link to the next page of results, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listStorageContainersNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the SAS token associated with the specified Data Lake Analytics and
     * Azure Storage account and container combination.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listSasTokensNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listSasTokensNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the SAS token associated with the specified Data Lake Analytics and
     * Azure Storage account and container combination.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listSasTokensNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the first page of Azure Storage accounts, if any, linked to the
     * specified Data Lake Analytics account. The response includes a link to the
     * next page, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'count' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listStorageAccountsNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listStorageAccountsNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the first page of Azure Storage accounts, if any, linked to the
     * specified Data Lake Analytics account. The response includes a link to the
     * next page, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listStorageAccountsNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the first page of Data Lake Store accounts linked to the specified
     * Data Lake Analytics account. The response includes a link to the next
     * page, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'count' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listDataLakeStoreAccountsNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listDataLakeStoreAccountsNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the first page of Data Lake Store accounts linked to the specified
     * Data Lake Analytics account. The response includes a link to the next
     * page, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listDataLakeStoreAccountsNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the first page of Data Lake Analytics accounts, if any, within a
     * specific resource group. This includes a link to the next page, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listByResourceGroupNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listByResourceGroupNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the first page of Data Lake Analytics accounts, if any, within a
     * specific resource group. This includes a link to the next page, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listByResourceGroupNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the first page of Data Lake Analytics accounts, if any, within the
     * current subscription. This includes a link to the next page, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the first page of Data Lake Analytics accounts, if any, within the
     * current subscription. This includes a link to the next page, if any.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
