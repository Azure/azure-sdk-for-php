<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2014-09-01
 */

namespace MicrosoftAzure\Arm\NotificationHubs;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * NotificationHubs for Azure NotificationHub client
 */
class NotificationHubs
{
    /**
     * The service client object for the operations.
     *
     * @var NotificationHubsManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for NotificationHubs.
     *
     * @param NotificationHubsManagementClient, Service client for NotificationHubs
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Checks the availability of the given notificationHub in a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param array $parameters The notificationHub name. 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'location' => '',
     *    'tags' => '',
     *    'isAvailiable' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'tags' => '',
     *    'isAvailiable' => 'false'
     * ];
     * </pre>
     */
    public function checkAvailability($resourceGroupName, $namespaceName, array $parameters, array $customHeaders = [])
    {
        $response = $this->checkAvailabilityAsync($resourceGroupName, $namespaceName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Checks the availability of the given notificationHub in a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param array $parameters The notificationHub name. 
     * <pre>
     * [
     *    'name' => 'requiredName',
     *    'location' => '',
     *    'tags' => '',
     *    'isAvailiable' => 'false'
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function checkAvailabilityAsync($resourceGroupName, $namespaceName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/checkNotificationHubAvailability';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates/Update a NotificationHub in a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param array $parameters Parameters supplied to the create/update a NotificationHub Resource. 
     * <pre>
     * [
     *    'location' => 'requiredLocation',
     *    'tags' => '',
     *    'properties' => [
     *       'name' => '',
     *       'registrationTtl' => '',
     *       'authorizationRules' => '',
     *       'apnsCredential' => [
     *          'properties' => [
     *             'apnsCertificate' => '',
     *             'certificateKey' => '',
     *             'endpoint' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'wnsCredential' => [
     *          'properties' => [
     *             'packageSid' => '',
     *             'secretKey' => '',
     *             'windowsLiveEndpoint' => ''
     *          ]
     *       ],
     *       'gcmCredential' => [
     *          'properties' => [
     *             'gcmEndpoint' => '',
     *             'googleApiKey' => ''
     *          ]
     *       ],
     *       'mpnsCredential' => [
     *          'properties' => [
     *             'mpnsCertificate' => '',
     *             'certificateKey' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'admCredential' => [
     *          'properties' => [
     *             'clientId' => '',
     *             'clientSecret' => '',
     *             'authTokenUrl' => ''
     *          ]
     *       ],
     *       'baiduCredential' => [
     *          'properties' => [
     *             'baiduApiKey' => '',
     *             'baiduEndPoint' => '',
     *             'baiduSecretKey' => ''
     *          ]
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'name' => '',
     *       'registrationTtl' => '',
     *       'authorizationRules' => '',
     *       'apnsCredential' => [
     *          'properties' => [
     *             'apnsCertificate' => '',
     *             'certificateKey' => '',
     *             'endpoint' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'wnsCredential' => [
     *          'properties' => [
     *             'packageSid' => '',
     *             'secretKey' => '',
     *             'windowsLiveEndpoint' => ''
     *          ]
     *       ],
     *       'gcmCredential' => [
     *          'properties' => [
     *             'gcmEndpoint' => '',
     *             'googleApiKey' => ''
     *          ]
     *       ],
     *       'mpnsCredential' => [
     *          'properties' => [
     *             'mpnsCertificate' => '',
     *             'certificateKey' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'admCredential' => [
     *          'properties' => [
     *             'clientId' => '',
     *             'clientSecret' => '',
     *             'authTokenUrl' => ''
     *          ]
     *       ],
     *       'baiduCredential' => [
     *          'properties' => [
     *             'baiduApiKey' => '',
     *             'baiduEndPoint' => '',
     *             'baiduSecretKey' => ''
     *          ]
     *       ]
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'id' => '',
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'name' => '',
     *       'registrationTtl' => '',
     *       'authorizationRules' => '',
     *       'apnsCredential' => [
     *          'properties' => [
     *             'apnsCertificate' => '',
     *             'certificateKey' => '',
     *             'endpoint' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'wnsCredential' => [
     *          'properties' => [
     *             'packageSid' => '',
     *             'secretKey' => '',
     *             'windowsLiveEndpoint' => ''
     *          ]
     *       ],
     *       'gcmCredential' => [
     *          'properties' => [
     *             'gcmEndpoint' => '',
     *             'googleApiKey' => ''
     *          ]
     *       ],
     *       'mpnsCredential' => [
     *          'properties' => [
     *             'mpnsCertificate' => '',
     *             'certificateKey' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'admCredential' => [
     *          'properties' => [
     *             'clientId' => '',
     *             'clientSecret' => '',
     *             'authTokenUrl' => ''
     *          ]
     *       ],
     *       'baiduCredential' => [
     *          'properties' => [
     *             'baiduApiKey' => '',
     *             'baiduEndPoint' => '',
     *             'baiduSecretKey' => ''
     *          ]
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdate($resourceGroupName, $namespaceName, $notificationHubName, array $parameters, array $customHeaders = [])
    {
        $response = $this->createOrUpdateAsync($resourceGroupName, $namespaceName, $notificationHubName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates/Update a NotificationHub in a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param array $parameters Parameters supplied to the create/update a NotificationHub Resource. 
     * <pre>
     * [
     *    'location' => 'requiredLocation',
     *    'tags' => '',
     *    'properties' => [
     *       'name' => '',
     *       'registrationTtl' => '',
     *       'authorizationRules' => '',
     *       'apnsCredential' => [
     *          'properties' => [
     *             'apnsCertificate' => '',
     *             'certificateKey' => '',
     *             'endpoint' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'wnsCredential' => [
     *          'properties' => [
     *             'packageSid' => '',
     *             'secretKey' => '',
     *             'windowsLiveEndpoint' => ''
     *          ]
     *       ],
     *       'gcmCredential' => [
     *          'properties' => [
     *             'gcmEndpoint' => '',
     *             'googleApiKey' => ''
     *          ]
     *       ],
     *       'mpnsCredential' => [
     *          'properties' => [
     *             'mpnsCertificate' => '',
     *             'certificateKey' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'admCredential' => [
     *          'properties' => [
     *             'clientId' => '',
     *             'clientSecret' => '',
     *             'authTokenUrl' => ''
     *          ]
     *       ],
     *       'baiduCredential' => [
     *          'properties' => [
     *             'baiduApiKey' => '',
     *             'baiduEndPoint' => '',
     *             'baiduSecretKey' => ''
     *          ]
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateAsync($resourceGroupName, $namespaceName, $notificationHubName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a notification hub associated with a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status OK(200).<br>
     */
    public function delete($resourceGroupName, $namespaceName, $notificationHubName, array $customHeaders = [])
    {
        $response = $this->deleteAsync($resourceGroupName, $namespaceName, $notificationHubName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a notification hub associated with a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAsync($resourceGroupName, $namespaceName, $notificationHubName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}';
        $statusCodes = [200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'name' => '',
     *       'registrationTtl' => '',
     *       'authorizationRules' => '',
     *       'apnsCredential' => [
     *          'properties' => [
     *             'apnsCertificate' => '',
     *             'certificateKey' => '',
     *             'endpoint' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'wnsCredential' => [
     *          'properties' => [
     *             'packageSid' => '',
     *             'secretKey' => '',
     *             'windowsLiveEndpoint' => ''
     *          ]
     *       ],
     *       'gcmCredential' => [
     *          'properties' => [
     *             'gcmEndpoint' => '',
     *             'googleApiKey' => ''
     *          ]
     *       ],
     *       'mpnsCredential' => [
     *          'properties' => [
     *             'mpnsCertificate' => '',
     *             'certificateKey' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'admCredential' => [
     *          'properties' => [
     *             'clientId' => '',
     *             'clientSecret' => '',
     *             'authTokenUrl' => ''
     *          ]
     *       ],
     *       'baiduCredential' => [
     *          'properties' => [
     *             'baiduApiKey' => '',
     *             'baiduEndPoint' => '',
     *             'baiduSecretKey' => ''
     *          ]
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $namespaceName, $notificationHubName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $namespaceName, $notificationHubName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $namespaceName, $notificationHubName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Creates/Updates an authorization rule for a NotificationHub
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param string $authorizationRuleName Authorization Rule Name.
     * @param array $parameters The shared access authorization rule. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'properties' => [
     *       'primaryKey' => '',
     *       'secondaryKey' => '',
     *       'keyName' => '',
     *       'claimType' => '',
     *       'claimValue' => '',
     *       'rights' => '',
     *       'createdTime' => '',
     *       'modifiedTime' => '',
     *       'revision' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'primaryKey' => '',
     *       'secondaryKey' => '',
     *       'keyName' => '',
     *       'claimType' => '',
     *       'claimValue' => '',
     *       'rights' => '',
     *       'createdTime' => '',
     *       'modifiedTime' => '',
     *       'revision' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdateAuthorizationRule($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, array $parameters, array $customHeaders = [])
    {
        $response = $this->createOrUpdateAuthorizationRuleAsync($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates/Updates an authorization rule for a NotificationHub
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param string $authorizationRuleName Authorization Rule Name.
     * @param array $parameters The shared access authorization rule. 
     * <pre>
     * [
     *    'location' => '',
     *    'name' => '',
     *    'properties' => [
     *       'primaryKey' => '',
     *       'secondaryKey' => '',
     *       'keyName' => '',
     *       'claimType' => '',
     *       'claimValue' => '',
     *       'rights' => '',
     *       'createdTime' => '',
     *       'modifiedTime' => '',
     *       'revision' => ''
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function createOrUpdateAuthorizationRuleAsync($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($authorizationRuleName == null) {
            Validate::notNullOrEmpty($authorizationRuleName, '$authorizationRuleName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}';
        $statusCodes = [200];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{authorizationRuleName}' => $authorizationRuleName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Deletes a notificationHub authorization rule
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param string $authorizationRuleName Authorization Rule Name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status OK(200).<br>
     */
    public function deleteAuthorizationRule($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, array $customHeaders = [])
    {
        $response = $this->deleteAuthorizationRuleAsync($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Deletes a notificationHub authorization rule
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param string $authorizationRuleName Authorization Rule Name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function deleteAuthorizationRuleAsync($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($authorizationRuleName == null) {
            Validate::notNullOrEmpty($authorizationRuleName, '$authorizationRuleName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}';
        $statusCodes = [204, 200];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{authorizationRuleName}' => $authorizationRuleName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets an authorization rule for a NotificationHub by name.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name
     * @param string $notificationHubName The notification hub name.
     * @param string $authorizationRuleName authorization rule name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'primaryKey' => '',
     *       'secondaryKey' => '',
     *       'keyName' => '',
     *       'claimType' => '',
     *       'claimValue' => '',
     *       'rights' => '',
     *       'createdTime' => '',
     *       'modifiedTime' => '',
     *       'revision' => ''
     *    ]
     * ];
     * </pre>
     */
    public function getAuthorizationRule($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, array $customHeaders = [])
    {
        $response = $this->getAuthorizationRuleAsync($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets an authorization rule for a NotificationHub by name.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name
     * @param string $notificationHubName The notification hub name.
     * @param string $authorizationRuleName authorization rule name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAuthorizationRuleAsync($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($authorizationRuleName == null) {
            Validate::notNullOrEmpty($authorizationRuleName, '$authorizationRuleName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{authorizationRuleName}' => $authorizationRuleName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($resourceGroupName, $namespaceName, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($resourceGroupName, $namespaceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($resourceGroupName, $namespaceName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name
     * @param string $notificationHubName The notification hub name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAuthorizationRules($resourceGroupName, $namespaceName, $notificationHubName, array $customHeaders = [])
    {
        $response = $this->listAuthorizationRulesAsync($resourceGroupName, $namespaceName, $notificationHubName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name
     * @param string $notificationHubName The notification hub name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAuthorizationRulesAsync($resourceGroupName, $namespaceName, $notificationHubName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param string $authorizationRuleName The connection string of the
     * NotificationHub for the specified authorizationRule.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'primaryConnectionString' => '',
     *    'secondaryConnectionString' => ''
     * ];
     * </pre>
     */
    public function listKeys($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, array $customHeaders = [])
    {
        $response = $this->listKeysAsync($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param string $authorizationRuleName The connection string of the
     * NotificationHub for the specified authorizationRule.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listKeysAsync($resourceGroupName, $namespaceName, $notificationHubName, $authorizationRuleName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($authorizationRuleName == null) {
            Validate::notNullOrEmpty($authorizationRuleName, '$authorizationRuleName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/listKeys';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{authorizationRuleName}' => $authorizationRuleName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the PNS Credentials associated with a notification hub .
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'location' => '',
     *    'name' => '',
     *    'type' => '',
     *    'tags' => '',
     *    'properties' => [
     *       'name' => '',
     *       'registrationTtl' => '',
     *       'authorizationRules' => '',
     *       'apnsCredential' => [
     *          'properties' => [
     *             'apnsCertificate' => '',
     *             'certificateKey' => '',
     *             'endpoint' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'wnsCredential' => [
     *          'properties' => [
     *             'packageSid' => '',
     *             'secretKey' => '',
     *             'windowsLiveEndpoint' => ''
     *          ]
     *       ],
     *       'gcmCredential' => [
     *          'properties' => [
     *             'gcmEndpoint' => '',
     *             'googleApiKey' => ''
     *          ]
     *       ],
     *       'mpnsCredential' => [
     *          'properties' => [
     *             'mpnsCertificate' => '',
     *             'certificateKey' => '',
     *             'thumbprint' => ''
     *          ]
     *       ],
     *       'admCredential' => [
     *          'properties' => [
     *             'clientId' => '',
     *             'clientSecret' => '',
     *             'authTokenUrl' => ''
     *          ]
     *       ],
     *       'baiduCredential' => [
     *          'properties' => [
     *             'baiduApiKey' => '',
     *             'baiduEndPoint' => '',
     *             'baiduSecretKey' => ''
     *          ]
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function getPnsCredentials($resourceGroupName, $namespaceName, $notificationHubName, array $customHeaders = [])
    {
        $response = $this->getPnsCredentialsAsync($resourceGroupName, $namespaceName, $notificationHubName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the PNS Credentials associated with a notification hub .
     *
     * @param string $resourceGroupName The name of the resource group.
     * @param string $namespaceName The namespace name.
     * @param string $notificationHubName The notification hub name.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getPnsCredentialsAsync($resourceGroupName, $namespaceName, $notificationHubName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($namespaceName == null) {
            Validate::notNullOrEmpty($namespaceName, '$namespaceName');
        }
        if ($notificationHubName == null) {
            Validate::notNullOrEmpty($notificationHubName, '$notificationHubName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/pnsCredentials';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{namespaceName}' => $namespaceName, '{notificationHubName}' => $notificationHubName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listAuthorizationRulesNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listAuthorizationRulesNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listAuthorizationRulesNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
