<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-02-01
 */

namespace MicrosoftAzure\Arm\Resources;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * Deployments.
 */
class Deployments
{
    /**
     * The service client object for the operations.
     *
     * @var ResourceManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for Deployments.
     *
     * @param ResourceManagementClient, Service client for Deployments
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Delete deployment.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment to be deleted.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function delete($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        $response = $this->begindeleteAsync($resourceGroupName, $deploymentName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete deployment.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment to be deleted.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function beginDelete($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        $response = $this->beginDeleteAsync($resourceGroupName, $deploymentName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Delete deployment.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment to be deleted.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginDeleteAsync($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($deploymentName == null) {
            Validate::notNullOrEmpty($deploymentName, '$deploymentName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';
        $statusCodes = [202, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{deploymentName}' => $deploymentName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Checks whether deployment exists.
     *
     * @param string $resourceGroupName The name of the resource group to check.
     * The name is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     * Empty array with resposne status NotFound(404).<br>
     */
    public function checkExistence($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        $response = $this->checkExistenceAsync($resourceGroupName, $deploymentName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Checks whether deployment exists.
     *
     * @param string $resourceGroupName The name of the resource group to check.
     * The name is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function checkExistenceAsync($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($deploymentName == null) {
            Validate::notNullOrEmpty($deploymentName, '$deploymentName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';
        $statusCodes = [204, 404];
        $method = 'HEAD';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{deploymentName}' => $deploymentName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Create a named template deployment using a template.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $parameters Additional parameters supplied to the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'provisioningState' => '',
     *       'correlationId' => '',
     *       'timestamp' => '',
     *       'outputs' => '',
     *       'providers' => '',
     *       'dependencies' => '',
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'provisioningState' => '',
     *       'correlationId' => '',
     *       'timestamp' => '',
     *       'outputs' => '',
     *       'providers' => '',
     *       'dependencies' => '',
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdate($resourceGroupName, $deploymentName, array $parameters, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateAsync($resourceGroupName, $deploymentName, $parameters, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create a named template deployment using a template.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $parameters Additional parameters supplied to the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'provisioningState' => '',
     *       'correlationId' => '',
     *       'timestamp' => '',
     *       'outputs' => '',
     *       'providers' => '',
     *       'dependencies' => '',
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'provisioningState' => '',
     *       'correlationId' => '',
     *       'timestamp' => '',
     *       'outputs' => '',
     *       'providers' => '',
     *       'dependencies' => '',
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function beginCreateOrUpdate($resourceGroupName, $deploymentName, array $parameters, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateAsync($resourceGroupName, $deploymentName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Create a named template deployment using a template.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $parameters Additional parameters supplied to the operation. 
     * <pre>
     * [
     *    'properties' => [
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateAsync($resourceGroupName, $deploymentName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($deploymentName == null) {
            Validate::notNullOrEmpty($deploymentName, '$deploymentName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{deploymentName}' => $deploymentName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get a deployment.
     *
     * @param string $resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'id' => '',
     *    'name' => 'requiredName',
     *    'properties' => [
     *       'provisioningState' => '',
     *       'correlationId' => '',
     *       'timestamp' => '',
     *       'outputs' => '',
     *       'providers' => '',
     *       'dependencies' => '',
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $deploymentName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get a deployment.
     *
     * @param string $resourceGroupName The name of the resource group to get. The
     * name is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($deploymentName == null) {
            Validate::notNullOrEmpty($deploymentName, '$deploymentName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{deploymentName}' => $deploymentName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Cancel a currently running template deployment.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status NoContent(204).<br>
     */
    public function cancel($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        $response = $this->cancelAsync($resourceGroupName, $deploymentName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Cancel a currently running template deployment.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function cancelAsync($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($deploymentName == null) {
            Validate::notNullOrEmpty($deploymentName, '$deploymentName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel';
        $statusCodes = [204];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{deploymentName}' => $deploymentName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Validate a deployment template.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $parameters Deployment to validate. 
     * <pre>
     * [
     *    'properties' => [
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'error' => [
     *       'code' => '',
     *       'message' => '',
     *       'target' => '',
     *       'details' => ''
     *    ],
     *    'properties' => [
     *       'provisioningState' => '',
     *       'correlationId' => '',
     *       'timestamp' => '',
     *       'outputs' => '',
     *       'providers' => '',
     *       'dependencies' => '',
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * When the resposne status is BadRequest(400), 
     * <pre>
     * [
     *    'error' => [
     *       'code' => '',
     *       'message' => '',
     *       'target' => '',
     *       'details' => ''
     *    ],
     *    'properties' => [
     *       'provisioningState' => '',
     *       'correlationId' => '',
     *       'timestamp' => '',
     *       'outputs' => '',
     *       'providers' => '',
     *       'dependencies' => '',
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     */
    public function validateOperation($resourceGroupName, $deploymentName, array $parameters, array $customHeaders = [])
    {
        $response = $this->validateOperationAsync($resourceGroupName, $deploymentName, $parameters, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Validate a deployment template.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $parameters Deployment to validate. 
     * <pre>
     * [
     *    'properties' => [
     *       'template' => '',
     *       'templateLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'parameters' => '',
     *       'parametersLink' => [
     *          'uri' => '',
     *          'contentVersion' => ''
     *       ],
     *       'mode' => 'Incremental|Complete',
     *       'debugSetting' => [
     *          'detailLevel' => ''
     *       ]
     *    ]
     * ];
     * </pre>
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function validateOperationAsync($resourceGroupName, $deploymentName, array $parameters, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($deploymentName == null) {
            Validate::notNullOrEmpty($deploymentName, '$deploymentName');
        }
        if ($parameters == null) {
            Validate::notNullOrEmpty($parameters, '$parameters');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate';
        $statusCodes = [200, 400];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{deploymentName}' => $deploymentName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($parameters);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Exports a deployment template.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'template' => ''
     * ];
     * </pre>
     */
    public function exportTemplate($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        $response = $this->exportTemplateAsync($resourceGroupName, $deploymentName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Exports a deployment template.
     *
     * @param string $resourceGroupName The name of the resource group. The name
     * is case insensitive.
     * @param string $deploymentName The name of the deployment.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function exportTemplateAsync($resourceGroupName, $deploymentName, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($deploymentName == null) {
            Validate::notNullOrEmpty($deploymentName, '$deploymentName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate';
        $statusCodes = [200];
        $method = 'POST';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{deploymentName}' => $deploymentName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get a list of deployments.
     *
     * @param string $resourceGroupName The name of the resource group to filter
     * by. The name is case insensitive.
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'provisioningState' => ''
     * ];
     * </pre>
     * @param int $top Query parameters. If null is passed returns all deployments.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($resourceGroupName, array $filter, $top = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($resourceGroupName, $filter, $top, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get a list of deployments.
     *
     * @param string $resourceGroupName The name of the resource group to filter
     * by. The name is case insensitive.
     * @param array $filter The filter to apply on the operation. 
     * <pre>
     * [
     *    'provisioningState' => ''
     * ];
     * </pre>
     * @param int $top Query parameters. If null is passed returns all deployments.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($resourceGroupName, array $filter, $top = null, array $customHeaders = [])
    {
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }

        $path = '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{resourceGroupName}' => $resourceGroupName, '{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['$filter' => $filter, '$top' => $top, 'api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get a list of deployments.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listNext($nextPageLink, array $customHeaders = [])
    {
        $response = $this->listNextAsync($nextPageLink, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get a list of deployments.
     *
     * @param string $nextPageLink The NextLink from the previous successful call
     * to List operation.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listNextAsync($nextPageLink, array $customHeaders = [])
    {
        if ($nextPageLink == null) {
            Validate::notNullOrEmpty($nextPageLink, '$nextPageLink');
        }

        $path = '{nextLink}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, []);
        $queryParams = [];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
