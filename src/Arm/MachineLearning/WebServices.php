<?php

/**
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 *
 * PHP version: 5.5
 *
 * @category    Microsoft
 *
 * @author      Azure PHP SDK <azurephpsdk@microsoft.com>
 * @copyright   2016 Microsoft Corporation
 * @license     https://github.com/Azure/azure-sdk-for-php/blob/arm/LICENSE
 *
 * @link        https://github.com/Azure/azure-sdk-for-php/tree/arm
 *
 * @version     Release: 0.10.0_2016, API Version: 2016-05-01-preview
 */

namespace MicrosoftAzure\Arm\MachineLearning;

use MicrosoftAzure\Common\Internal\Http\HttpClient;
use MicrosoftAzure\Common\Internal\Resources;
use MicrosoftAzure\Common\Internal\Utilities;
use MicrosoftAzure\Common\Internal\Validate;

/**
 * WebServices for These APIs allow end users to operate on Azure Machine
 * Learning Web Services resources. They support the following
 * operations:<ul><li>Create or update a web service</li><li>Get a web
 * service</li><li>Patch a web service</li><li>Delete a web
 * service</li><li>Get All Web Services in a Resource Group </li><li>Get All
 * Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 */
class WebServices
{
    /**
     * The service client object for the operations.
     *
     * @var AzureMLWebServicesManagementClient
     */
    private $_client;

    /**
     * Creates a new instance for WebServices.
     *
     * @param AzureMLWebServicesManagementClient, Service client for WebServices
     */
    public function __construct($client)
    {
        $this->_client = $client;
    }

    /**
     * Creates or updates a new Azure ML web service or update an existing one.
     *
     * @param array $createOrUpdatePayload The payload to create or update the Azure ML web service. 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     */
    public function createOrUpdate(array $createOrUpdatePayload, $resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        $response = $this->begincreateOrUpdateAsync($createOrUpdatePayload, $resourceGroupName, $webServiceName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates a new Azure ML web service or update an existing one.
     *
     * @param array $createOrUpdatePayload The payload to create or update the Azure ML web service. 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     * When the resposne status is Created(201), 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginCreateOrUpdate(array $createOrUpdatePayload, $resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        $response = $this->beginCreateOrUpdateAsync($createOrUpdatePayload, $resourceGroupName, $webServiceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Creates or updates a new Azure ML web service or update an existing one.
     *
     * @param array $createOrUpdatePayload The payload to create or update the Azure ML web service. 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginCreateOrUpdateAsync(array $createOrUpdatePayload, $resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        if ($createOrUpdatePayload == null) {
            Validate::notNullOrEmpty($createOrUpdatePayload, '$createOrUpdatePayload');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($webServiceName == null) {
            Validate::notNullOrEmpty($webServiceName, '$webServiceName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}';
        $statusCodes = [200, 201];
        $method = 'PUT';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{webServiceName}' => $webServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($createOrUpdatePayload);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieve an Azure ML web service definition by its subscription, resource
     * group and name.
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     */
    public function get($resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        $response = $this->getAsync($resourceGroupName, $webServiceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieve an Azure ML web service definition by its subscription, resource
     * group and name.
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function getAsync($resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($webServiceName == null) {
            Validate::notNullOrEmpty($webServiceName, '$webServiceName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{webServiceName}' => $webServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Patch an existing Azure ML web service resource.
     *
     * @param array $patchPayload The payload to patch the Azure ML web service with. 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     */
    public function patch(array $patchPayload, $resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        $response = $this->beginpatchAsync($patchPayload, $resourceGroupName, $webServiceName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Patch an existing Azure ML web service resource.
     *
     * @param array $patchPayload The payload to patch the Azure ML web service with. 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     */
    public function beginPatch(array $patchPayload, $resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        $response = $this->beginPatchAsync($patchPayload, $resourceGroupName, $webServiceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Patch an existing Azure ML web service resource.
     *
     * @param array $patchPayload The payload to patch the Azure ML web service with. 
     * <pre>
     * [
     *    'properties' => [
     *       'title' => '',
     *       'description' => '',
     *       'createdOn' => '',
     *       'modifiedOn' => '',
     *       'provisioningState' => 'Unknown|Provisioning|Succeeded|Failed|Canceled',
     *       'keys' => [
     *          'primary' => '',
     *          'secondary' => ''
     *       ],
     *       'readOnly' => 'false',
     *       'swaggerLocation' => '',
     *       'exposeSampleData' => 'false',
     *       'realtimeConfiguration' => [
     *          'maxConcurrentCalls' => ''
     *       ],
     *       'diagnostics' => [
     *          'level' => 'None|Error|All',
     *          'expiry' => ''
     *       ],
     *       'storageAccount' => [
     *          'name' => '',
     *          'key' => ''
     *       ],
     *       'machineLearningWorkspace' => [
     *          'id' => ''
     *       ],
     *       'commitmentPlan' => [
     *          'id' => ''
     *       ],
     *       'input' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'output' => [
     *          'title' => '',
     *          'description' => '',
     *          'type' => 'object',
     *          'properties' => ''
     *       ],
     *       'exampleRequest' => [
     *          'inputs' => '',
     *          'globalParameters' => ''
     *       ],
     *       'assets' => '',
     *       'parameters' => ''
     *    ]
     * ];
     * </pre>
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginPatchAsync(array $patchPayload, $resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        if ($patchPayload == null) {
            Validate::notNullOrEmpty($patchPayload, '$patchPayload');
        }
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($webServiceName == null) {
            Validate::notNullOrEmpty($webServiceName, '$webServiceName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}';
        $statusCodes = [200];
        $method = 'PATCH';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{webServiceName}' => $webServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $headers['Content-Type'] = 'application/json; charset=utf-8';
        $body = $this->_client->getDataSerializer()->serialize($patchPayload);

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Remove an existing Azure ML web service.
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function remove($resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        $response = $this->beginremoveAsync($resourceGroupName, $webServiceName, $customHeaders);

        if ($response->getStatusCode() !== Resources::STATUS_OK) {
            $this->_client->awaitAsync($response);
        }

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Remove an existing Azure ML web service.
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * Empty array with resposne status Accepted(202).<br>
     * Empty array with resposne status NoContent(204).<br>
     */
    public function beginRemove($resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        $response = $this->beginRemoveAsync($resourceGroupName, $webServiceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Remove an existing Azure ML web service.
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function beginRemoveAsync($resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($webServiceName == null) {
            Validate::notNullOrEmpty($webServiceName, '$webServiceName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}';
        $statusCodes = [202, 204];
        $method = 'DELETE';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{webServiceName}' => $webServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Get the access keys of a particular Azure ML web service
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'primary' => '',
     *    'secondary' => ''
     * ];
     * </pre>
     */
    public function listKeys($resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        $response = $this->listKeysAsync($resourceGroupName, $webServiceName, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Get the access keys of a particular Azure ML web service
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $webServiceName The Azure ML web service name which you want
     * to reach.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listKeysAsync($resourceGroupName, $webServiceName, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($webServiceName == null) {
            Validate::notNullOrEmpty($webServiceName, '$webServiceName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/listKeys';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName, '{webServiceName}' => $webServiceName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion()];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieve all Azure ML web services in a given resource group.
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $skiptoken Continuation token for pagination.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listInResourceGroup($resourceGroupName, $skiptoken = null, array $customHeaders = [])
    {
        $response = $this->listInResourceGroupAsync($resourceGroupName, $skiptoken, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieve all Azure ML web services in a given resource group.
     *
     * @param string $resourceGroupName Name of the resource group.
     * @param string $skiptoken Continuation token for pagination.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listInResourceGroupAsync($resourceGroupName, $skiptoken = null, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($resourceGroupName == null) {
            Validate::notNullOrEmpty($resourceGroupName, '$resourceGroupName');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId(), '{resourceGroupName}' => $resourceGroupName]);
        $queryParams = ['api-version' => $this->_client->getApiVersion(), '$skiptoken' => $skiptoken];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }

    /**
     * Retrieve all Azure ML web services in the current Azure subscription.
     *
     * @param string $skiptoken Continuation token for pagination.
     * @param array $customHeaders An array of custom headers ['key' => 'value'] that will be added to
     *  the HTTP request.
     *
     * @return array
     * When the resposne status is OK(200), 
     * <pre>
     * [
     *    'value' => '',
     *    'nextLink' => ''
     * ];
     * </pre>
     */
    public function listOperation($skiptoken = null, array $customHeaders = [])
    {
        $response = $this->listOperationAsync($skiptoken, $customHeaders);

        if ($response->getBody()) {
            $contents = $response->getBody()->getContents();
            if ($contents) {
                return $this->_client->getDataSerializer()->deserialize($contents);
            }
        }

        return [];
    }

    /**
     * Retrieve all Azure ML web services in the current Azure subscription.
     *
     * @param string $skiptoken Continuation token for pagination.
     * @param array $customHeaders An array of custom headers ['key' => 'value']
     * that will be added to the HTTP request.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function listOperationAsync($skiptoken = null, array $customHeaders = [])
    {
        if ($this->_client->getSubscriptionId() == null) {
            Validate::notNullOrEmpty($this->_client->getSubscriptionId(), '$this->_client->getSubscriptionId()');
        }
        if ($this->_client->getApiVersion() == null) {
            Validate::notNullOrEmpty($this->_client->getApiVersion(), '$this->_client->getApiVersion()');
        }

        $path = '/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/webServices';
        $statusCodes = [200];
        $method = 'GET';

        $path = strtr($path, ['{subscriptionId}' => $this->_client->getSubscriptionId()]);
        $queryParams = ['api-version' => $this->_client->getApiVersion(), '$skiptoken' => $skiptoken];
        $headers = $customHeaders;
        if ($this->_client->getAcceptLanguage() != null) {
            $headers['accept-language'] = $this->_client->getAcceptLanguage();
        }
        if ($this->_client->getGenerateClientRequestId()) {
            $headers[Resources::X_MS_REQUEST_ID] = Utilities::getGuid();
        }

        $body = '';

        $response = HttpClient::send(
            $method,
            $headers,
            $queryParams,
            [],
            $this->_client->getUrl($path),
            $statusCodes,
            $body,
            $this->_client->getFilters()
        );

        return $response;
    }
}
